
c:/Users/josep/Documents/IoT/iot-final-cadence-monitor/cadence_monitor/target/1.4.2/photon/cadence_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001774  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1790  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000ac  20000000  080a1794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b0  200000ac  200000ac  000300ac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1840  080a1840  00021840  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1868  080a1868  00021868  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0008d048  00000000  00000000  0002186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d2d9  00000000  00000000  000ae8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e37a  00000000  00000000  000bbb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a80  00000000  00000000  000c9f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002838  00000000  00000000  000cb987  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000226fb  00000000  00000000  000ce1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001dc58  00000000  00000000  000f08ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009f3d2  00000000  00000000  0010e512  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000a8c8  00000000  00000000  001ad8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
 80a0020:	b508      	push	{r3, lr}
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f9c5 	bl	80a13bc <memcpy>
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f9ca 	bl	80a13d2 <memset>
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1794 	.word	0x080a1794
 80a004c:	200000ac 	.word	0x200000ac
 80a0050:	200000ac 	.word	0x200000ac
 80a0054:	2000065c 	.word	0x2000065c
 80a0058:	2000065c 	.word	0x2000065c

080a005c <module_user_init>:
 80a005c:	b570      	push	{r4, r5, r6, lr}
 80a005e:	f000 fcad 	bl	80a09bc <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1758 	.word	0x080a1758
 80a0084:	080a178c 	.word	0x080a178c

080a0088 <module_user_setup>:
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
 80a008c:	b508      	push	{r3, lr}
 80a008e:	f000 f86f 	bl	80a0170 <loop>
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0096:	f000 bc53 	b.w	80a0940 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bad1 	b.w	80a0640 <free>

080a009e <__cxa_guard_acquire>:
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
int TARGET_CADENCE = 60;
int B_LED = D1;
int G_LED = D2;
int R_LED = D3;

void setup() {
 80a00b0:	b508      	push	{r3, lr}
  pinMode(monitor, INPUT);
 80a00b2:	4b13      	ldr	r3, [pc, #76]	; (80a0100 <setup+0x50>)
 80a00b4:	2100      	movs	r1, #0
 80a00b6:	8818      	ldrh	r0, [r3, #0]
 80a00b8:	f000 ff8a 	bl	80a0fd0 <pinMode>
  pinMode(startButton, INPUT_PULLUP);
 80a00bc:	4b11      	ldr	r3, [pc, #68]	; (80a0104 <setup+0x54>)
 80a00be:	2102      	movs	r1, #2
 80a00c0:	8818      	ldrh	r0, [r3, #0]
 80a00c2:	f000 ff85 	bl	80a0fd0 <pinMode>
  pinMode(stopButton, INPUT_PULLUP);
 80a00c6:	4b10      	ldr	r3, [pc, #64]	; (80a0108 <setup+0x58>)
 80a00c8:	2102      	movs	r1, #2
 80a00ca:	8818      	ldrh	r0, [r3, #0]
 80a00cc:	f000 ff80 	bl	80a0fd0 <pinMode>

  pinMode(B_LED, OUTPUT);
 80a00d0:	4b0e      	ldr	r3, [pc, #56]	; (80a010c <setup+0x5c>)
 80a00d2:	2101      	movs	r1, #1
 80a00d4:	8818      	ldrh	r0, [r3, #0]
 80a00d6:	f000 ff7b 	bl	80a0fd0 <pinMode>
  pinMode(G_LED, OUTPUT);
 80a00da:	4b0d      	ldr	r3, [pc, #52]	; (80a0110 <setup+0x60>)
 80a00dc:	2101      	movs	r1, #1
 80a00de:	8818      	ldrh	r0, [r3, #0]
 80a00e0:	f000 ff76 	bl	80a0fd0 <pinMode>
  pinMode(R_LED, OUTPUT);
 80a00e4:	4b0b      	ldr	r3, [pc, #44]	; (80a0114 <setup+0x64>)
 80a00e6:	2101      	movs	r1, #1
 80a00e8:	8818      	ldrh	r0, [r3, #0]
 80a00ea:	f000 ff71 	bl	80a0fd0 <pinMode>

  Serial.begin(9600);
 80a00ee:	f000 fd65 	bl	80a0bbc <_Z16_fetch_usbserialv>

  // Particle.function("startNode", start);
  // Particle.function("stopNode", stop);
  
  // Particle.subscribe("getCadence", getCadence, MY_DEVICES);
}
 80a00f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  pinMode(B_LED, OUTPUT);
  pinMode(G_LED, OUTPUT);
  pinMode(R_LED, OUTPUT);

  Serial.begin(9600);
 80a00f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00fa:	f000 bd45 	b.w	80a0b88 <_ZN9USBSerial5beginEl>
 80a00fe:	bf00      	nop
 80a0100:	200000b8 	.word	0x200000b8
 80a0104:	20000000 	.word	0x20000000
 80a0108:	20000038 	.word	0x20000038
 80a010c:	20000034 	.word	0x20000034
 80a0110:	20000030 	.word	0x20000030
 80a0114:	2000003c 	.word	0x2000003c

080a0118 <_Z20setLedBasedOnCadencei>:
    Serial.println("Stop Button Pressed");
    activeReading = false;
  }
}

void setLedBasedOnCadence(int currentCadence) {
 80a0118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a011a:	4606      	mov	r6, r0
  // Set all LED's to off
  digitalWrite(R_LED, LOW);
 80a011c:	4f10      	ldr	r7, [pc, #64]	; (80a0160 <_Z20setLedBasedOnCadencei+0x48>)
  digitalWrite(G_LED, LOW);
 80a011e:	4c11      	ldr	r4, [pc, #68]	; (80a0164 <_Z20setLedBasedOnCadencei+0x4c>)
  }
}

void setLedBasedOnCadence(int currentCadence) {
  // Set all LED's to off
  digitalWrite(R_LED, LOW);
 80a0120:	2100      	movs	r1, #0
 80a0122:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(G_LED, LOW);
  digitalWrite(B_LED, LOW);
 80a0124:	4d10      	ldr	r5, [pc, #64]	; (80a0168 <_Z20setLedBasedOnCadencei+0x50>)
  }
}

void setLedBasedOnCadence(int currentCadence) {
  // Set all LED's to off
  digitalWrite(R_LED, LOW);
 80a0126:	f000 ff64 	bl	80a0ff2 <digitalWrite>
  digitalWrite(G_LED, LOW);
 80a012a:	2100      	movs	r1, #0
 80a012c:	8820      	ldrh	r0, [r4, #0]
 80a012e:	f000 ff60 	bl	80a0ff2 <digitalWrite>
  digitalWrite(B_LED, LOW);
 80a0132:	2100      	movs	r1, #0
 80a0134:	8828      	ldrh	r0, [r5, #0]
 80a0136:	f000 ff5c 	bl	80a0ff2 <digitalWrite>

  if (currentCadence > TARGET_CADENCE + 4) {
 80a013a:	4b0c      	ldr	r3, [pc, #48]	; (80a016c <_Z20setLedBasedOnCadencei+0x54>)
 80a013c:	681b      	ldr	r3, [r3, #0]
 80a013e:	1d1a      	adds	r2, r3, #4
 80a0140:	42b2      	cmp	r2, r6
 80a0142:	da02      	bge.n	80a014a <_Z20setLedBasedOnCadencei+0x32>
    digitalWrite(R_LED, HIGH);
 80a0144:	2101      	movs	r1, #1
 80a0146:	8838      	ldrh	r0, [r7, #0]
 80a0148:	e005      	b.n	80a0156 <_Z20setLedBasedOnCadencei+0x3e>
  } else if (currentCadence < TARGET_CADENCE - 4) {
 80a014a:	3b04      	subs	r3, #4
 80a014c:	429e      	cmp	r6, r3
    digitalWrite(B_LED, HIGH);
 80a014e:	bfb4      	ite	lt
 80a0150:	8828      	ldrhlt	r0, [r5, #0]
  } else {
    digitalWrite(G_LED, HIGH);
 80a0152:	8820      	ldrhge	r0, [r4, #0]
  digitalWrite(B_LED, LOW);

  if (currentCadence > TARGET_CADENCE + 4) {
    digitalWrite(R_LED, HIGH);
  } else if (currentCadence < TARGET_CADENCE - 4) {
    digitalWrite(B_LED, HIGH);
 80a0154:	2101      	movs	r1, #1
  } else {
    digitalWrite(G_LED, HIGH);
  }
}
 80a0156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (currentCadence > TARGET_CADENCE + 4) {
    digitalWrite(R_LED, HIGH);
  } else if (currentCadence < TARGET_CADENCE - 4) {
    digitalWrite(B_LED, HIGH);
  } else {
    digitalWrite(G_LED, HIGH);
 80a015a:	f000 bf4a 	b.w	80a0ff2 <digitalWrite>
 80a015e:	bf00      	nop
 80a0160:	2000003c 	.word	0x2000003c
 80a0164:	20000030 	.word	0x20000030
 80a0168:	20000034 	.word	0x20000034
 80a016c:	20000040 	.word	0x20000040

080a0170 <loop>:
  // Particle.function("stopNode", stop);
  
  // Particle.subscribe("getCadence", getCadence, MY_DEVICES);
}

void loop() {
 80a0170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(digitalRead(startButton)==LOW && Time.now() > btnLastPressTime + 1) {
 80a0174:	4b41      	ldr	r3, [pc, #260]	; (80a027c <loop+0x10c>)
 80a0176:	4d42      	ldr	r5, [pc, #264]	; (80a0280 <loop+0x110>)
 80a0178:	8818      	ldrh	r0, [r3, #0]
 80a017a:	f000 ff53 	bl	80a1024 <digitalRead>
 80a017e:	b930      	cbnz	r0, 80a018e <loop+0x1e>
 80a0180:	f000 fb7c 	bl	80a087c <_ZN9TimeClass3nowEv>
 80a0184:	4c3f      	ldr	r4, [pc, #252]	; (80a0284 <loop+0x114>)
 80a0186:	6823      	ldr	r3, [r4, #0]
 80a0188:	3301      	adds	r3, #1
 80a018a:	4298      	cmp	r0, r3
 80a018c:	dc5f      	bgt.n	80a024e <loop+0xde>
    activeReading = true;
    startTime = Time.now();
    lastPublishTime = Time.now();
  }

  if (activeReading) {
 80a018e:	782b      	ldrb	r3, [r5, #0]
 80a0190:	2b00      	cmp	r3, #0
 80a0192:	d045      	beq.n	80a0220 <loop+0xb0>
    curTime = Time.now();
 80a0194:	f000 fb72 	bl	80a087c <_ZN9TimeClass3nowEv>

    lastReadHigh = curReadHigh;
 80a0198:	4f3b      	ldr	r7, [pc, #236]	; (80a0288 <loop+0x118>)
 80a019a:	4e3c      	ldr	r6, [pc, #240]	; (80a028c <loop+0x11c>)
 80a019c:	783b      	ldrb	r3, [r7, #0]
    startTime = Time.now();
    lastPublishTime = Time.now();
  }

  if (activeReading) {
    curTime = Time.now();
 80a019e:	4c3c      	ldr	r4, [pc, #240]	; (80a0290 <loop+0x120>)

    lastReadHigh = curReadHigh;
 80a01a0:	7033      	strb	r3, [r6, #0]
    curReadHigh = digitalRead(monitor);
 80a01a2:	4b3c      	ldr	r3, [pc, #240]	; (80a0294 <loop+0x124>)
    startTime = Time.now();
    lastPublishTime = Time.now();
  }

  if (activeReading) {
    curTime = Time.now();
 80a01a4:	6020      	str	r0, [r4, #0]

    lastReadHigh = curReadHigh;
    curReadHigh = digitalRead(monitor);
 80a01a6:	8818      	ldrh	r0, [r3, #0]
 80a01a8:	f000 ff3c 	bl	80a1024 <digitalRead>
 80a01ac:	1c03      	adds	r3, r0, #0
 80a01ae:	bf18      	it	ne
 80a01b0:	2301      	movne	r3, #1
 80a01b2:	703b      	strb	r3, [r7, #0]

    if (lastReadHigh && !curReadHigh) {
 80a01b4:	7833      	ldrb	r3, [r6, #0]
 80a01b6:	b123      	cbz	r3, 80a01c2 <loop+0x52>
 80a01b8:	b918      	cbnz	r0, 80a01c2 <loop+0x52>
      passes++;
 80a01ba:	4a37      	ldr	r2, [pc, #220]	; (80a0298 <loop+0x128>)
 80a01bc:	6813      	ldr	r3, [r2, #0]
 80a01be:	3301      	adds	r3, #1
 80a01c0:	6013      	str	r3, [r2, #0]
    }

    if (curTime > lastPublishTime + 3){
 80a01c2:	4e36      	ldr	r6, [pc, #216]	; (80a029c <loop+0x12c>)
 80a01c4:	6822      	ldr	r2, [r4, #0]
 80a01c6:	6833      	ldr	r3, [r6, #0]
 80a01c8:	3303      	adds	r3, #3
 80a01ca:	4293      	cmp	r3, r2
 80a01cc:	da28      	bge.n	80a0220 <loop+0xb0>
      Serial.printf("{\"currentTime\":%d, \"strokesSinceLastPublish\":%d}\n", curTime, passes);
 80a01ce:	4f32      	ldr	r7, [pc, #200]	; (80a0298 <loop+0x128>)
 80a01d0:	f000 fcf4 	bl	80a0bbc <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a01d4:	683b      	ldr	r3, [r7, #0]
      //Particle.publish("addReading", String::format("{\"currentTime\":%d, \"strokesSinceLastPublish\":%d}", curTime, passes));
      
      // Imitating the subscribe to the cloud function call.
      // REMOVE LATER
      Serial.printf("CURRENT EXAMPLE CADENCE: %d\n", exampleCadence[currentExampleCadence]);
 80a01d6:	4c32      	ldr	r4, [pc, #200]	; (80a02a0 <loop+0x130>)
 80a01d8:	9300      	str	r3, [sp, #0]
 80a01da:	4b2d      	ldr	r3, [pc, #180]	; (80a0290 <loop+0x120>)
 80a01dc:	4a31      	ldr	r2, [pc, #196]	; (80a02a4 <loop+0x134>)
 80a01de:	681b      	ldr	r3, [r3, #0]
 80a01e0:	2100      	movs	r1, #0
 80a01e2:	f000 fad4 	bl	80a078e <_ZN5Print11printf_implEbPKcz>
 80a01e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80a02bc <loop+0x14c>
 80a01ea:	f000 fce7 	bl	80a0bbc <_Z16_fetch_usbserialv>
 80a01ee:	6823      	ldr	r3, [r4, #0]
 80a01f0:	4a2d      	ldr	r2, [pc, #180]	; (80a02a8 <loop+0x138>)
 80a01f2:	2100      	movs	r1, #0
 80a01f4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80a01f8:	f000 fac9 	bl	80a078e <_ZN5Print11printf_implEbPKcz>
      setLedBasedOnCadence(exampleCadence[currentExampleCadence]);
 80a01fc:	6823      	ldr	r3, [r4, #0]
 80a01fe:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 80a0202:	f7ff ff89 	bl	80a0118 <_Z20setLedBasedOnCadencei>
      currentExampleCadence++;
      currentExampleCadence %= 11;
 80a0206:	6823      	ldr	r3, [r4, #0]
 80a0208:	210b      	movs	r1, #11
 80a020a:	3301      	adds	r3, #1
 80a020c:	fb93 f2f1 	sdiv	r2, r3, r1
 80a0210:	fb01 3312 	mls	r3, r1, r2, r3
 80a0214:	6023      	str	r3, [r4, #0]
      
      lastPublishTime = Time.now();
 80a0216:	f000 fb31 	bl	80a087c <_ZN9TimeClass3nowEv>
      passes = 0;
 80a021a:	2300      	movs	r3, #0
      Serial.printf("CURRENT EXAMPLE CADENCE: %d\n", exampleCadence[currentExampleCadence]);
      setLedBasedOnCadence(exampleCadence[currentExampleCadence]);
      currentExampleCadence++;
      currentExampleCadence %= 11;
      
      lastPublishTime = Time.now();
 80a021c:	6030      	str	r0, [r6, #0]
      passes = 0;
 80a021e:	603b      	str	r3, [r7, #0]
    }    
  }

  if (digitalRead(stopButton)==LOW && Time.now() > btnLastPressTime + 1) {
 80a0220:	4b22      	ldr	r3, [pc, #136]	; (80a02ac <loop+0x13c>)
 80a0222:	8818      	ldrh	r0, [r3, #0]
 80a0224:	f000 fefe 	bl	80a1024 <digitalRead>
 80a0228:	4604      	mov	r4, r0
 80a022a:	bb18      	cbnz	r0, 80a0274 <loop+0x104>
 80a022c:	f000 fb26 	bl	80a087c <_ZN9TimeClass3nowEv>
 80a0230:	4e14      	ldr	r6, [pc, #80]	; (80a0284 <loop+0x114>)
 80a0232:	6833      	ldr	r3, [r6, #0]
 80a0234:	3301      	adds	r3, #1
 80a0236:	4298      	cmp	r0, r3
 80a0238:	dd1c      	ble.n	80a0274 <loop+0x104>
    btnLastPressTime = Time.now();
 80a023a:	f000 fb1f 	bl	80a087c <_ZN9TimeClass3nowEv>
 80a023e:	6030      	str	r0, [r6, #0]
    Serial.println("Stop Button Pressed");
 80a0240:	f000 fcbc 	bl	80a0bbc <_Z16_fetch_usbserialv>
 80a0244:	491a      	ldr	r1, [pc, #104]	; (80a02b0 <loop+0x140>)
 80a0246:	f000 fa6c 	bl	80a0722 <_ZN5Print7printlnEPKc>
    activeReading = false;
 80a024a:	702c      	strb	r4, [r5, #0]
 80a024c:	e012      	b.n	80a0274 <loop+0x104>
  // Particle.subscribe("getCadence", getCadence, MY_DEVICES);
}

void loop() {
  if(digitalRead(startButton)==LOW && Time.now() > btnLastPressTime + 1) {
    btnLastPressTime = Time.now();
 80a024e:	f000 fb15 	bl	80a087c <_ZN9TimeClass3nowEv>
 80a0252:	6020      	str	r0, [r4, #0]
    Serial.println("Start Button Pressed");
 80a0254:	f000 fcb2 	bl	80a0bbc <_Z16_fetch_usbserialv>
 80a0258:	4916      	ldr	r1, [pc, #88]	; (80a02b4 <loop+0x144>)
 80a025a:	f000 fa62 	bl	80a0722 <_ZN5Print7printlnEPKc>
    activeReading = true;
 80a025e:	2301      	movs	r3, #1
 80a0260:	702b      	strb	r3, [r5, #0]
    startTime = Time.now();
 80a0262:	f000 fb0b 	bl	80a087c <_ZN9TimeClass3nowEv>
 80a0266:	4b14      	ldr	r3, [pc, #80]	; (80a02b8 <loop+0x148>)
 80a0268:	6018      	str	r0, [r3, #0]
    lastPublishTime = Time.now();
 80a026a:	f000 fb07 	bl	80a087c <_ZN9TimeClass3nowEv>
 80a026e:	4b0b      	ldr	r3, [pc, #44]	; (80a029c <loop+0x12c>)
 80a0270:	6018      	str	r0, [r3, #0]
 80a0272:	e78c      	b.n	80a018e <loop+0x1e>
  if (digitalRead(stopButton)==LOW && Time.now() > btnLastPressTime + 1) {
    btnLastPressTime = Time.now();
    Serial.println("Stop Button Pressed");
    activeReading = false;
  }
}
 80a0274:	b002      	add	sp, #8
 80a0276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a027a:	bf00      	nop
 80a027c:	20000000 	.word	0x20000000
 80a0280:	200000c0 	.word	0x200000c0
 80a0284:	200000c4 	.word	0x200000c4
 80a0288:	200000c9 	.word	0x200000c9
 80a028c:	200000c8 	.word	0x200000c8
 80a0290:	200000cc 	.word	0x200000cc
 80a0294:	200000b8 	.word	0x200000b8
 80a0298:	200000b4 	.word	0x200000b4
 80a029c:	200000d0 	.word	0x200000d0
 80a02a0:	200000b0 	.word	0x200000b0
 80a02a4:	080a1458 	.word	0x080a1458
 80a02a8:	080a148a 	.word	0x080a148a
 80a02ac:	20000038 	.word	0x20000038
 80a02b0:	080a14bc 	.word	0x080a14bc
 80a02b4:	080a14a7 	.word	0x080a14a7
 80a02b8:	200000bc 	.word	0x200000bc
 80a02bc:	20000004 	.word	0x20000004

080a02c0 <_GLOBAL__sub_I_monitor>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02c0:	f000 b800 	b.w	80a02c4 <HAL_Pin_Map>

080a02c4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a02c4:	b508      	push	{r3, lr}
 80a02c6:	4b02      	ldr	r3, [pc, #8]	; (80a02d0 <HAL_Pin_Map+0xc>)
 80a02c8:	681b      	ldr	r3, [r3, #0]
 80a02ca:	681b      	ldr	r3, [r3, #0]
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	bd08      	pop	{r3, pc}
 80a02d0:	080601b0 	.word	0x080601b0

080a02d4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a02d4:	b508      	push	{r3, lr}
 80a02d6:	4b02      	ldr	r3, [pc, #8]	; (80a02e0 <HAL_Pin_Mode+0xc>)
 80a02d8:	681b      	ldr	r3, [r3, #0]
 80a02da:	689b      	ldr	r3, [r3, #8]
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	bd08      	pop	{r3, pc}
 80a02e0:	080601b0 	.word	0x080601b0

080a02e4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a02e4:	b508      	push	{r3, lr}
 80a02e6:	4b02      	ldr	r3, [pc, #8]	; (80a02f0 <HAL_Get_Pin_Mode+0xc>)
 80a02e8:	681b      	ldr	r3, [r3, #0]
 80a02ea:	68db      	ldr	r3, [r3, #12]
 80a02ec:	9301      	str	r3, [sp, #4]
 80a02ee:	bd08      	pop	{r3, pc}
 80a02f0:	080601b0 	.word	0x080601b0

080a02f4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a02f4:	b508      	push	{r3, lr}
 80a02f6:	4b02      	ldr	r3, [pc, #8]	; (80a0300 <HAL_GPIO_Write+0xc>)
 80a02f8:	681b      	ldr	r3, [r3, #0]
 80a02fa:	691b      	ldr	r3, [r3, #16]
 80a02fc:	9301      	str	r3, [sp, #4]
 80a02fe:	bd08      	pop	{r3, pc}
 80a0300:	080601b0 	.word	0x080601b0

080a0304 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0304:	b508      	push	{r3, lr}
 80a0306:	4b02      	ldr	r3, [pc, #8]	; (80a0310 <HAL_GPIO_Read+0xc>)
 80a0308:	681b      	ldr	r3, [r3, #0]
 80a030a:	695b      	ldr	r3, [r3, #20]
 80a030c:	9301      	str	r3, [sp, #4]
 80a030e:	bd08      	pop	{r3, pc}
 80a0310:	080601b0 	.word	0x080601b0

080a0314 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0314:	b508      	push	{r3, lr}
 80a0316:	4b02      	ldr	r3, [pc, #8]	; (80a0320 <HAL_SPI_Init+0xc>)
 80a0318:	681b      	ldr	r3, [r3, #0]
 80a031a:	69db      	ldr	r3, [r3, #28]
 80a031c:	9301      	str	r3, [sp, #4]
 80a031e:	bd08      	pop	{r3, pc}
 80a0320:	080601b4 	.word	0x080601b4

080a0324 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_SPI_Is_Enabled+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	6a1b      	ldr	r3, [r3, #32]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601b4 	.word	0x080601b4

080a0334 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <HAL_RNG_GetRandomNumber+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	685b      	ldr	r3, [r3, #4]
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	0806019c 	.word	0x0806019c

080a0344 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	695b      	ldr	r3, [r3, #20]
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	0806019c 	.word	0x0806019c

080a0354 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <HAL_RTC_Get_UnixTime+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	69db      	ldr	r3, [r3, #28]
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	0806019c 	.word	0x0806019c

080a0364 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_RTC_Time_Is_Valid+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	0806019c 	.word	0x0806019c

080a0374 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <os_mutex_create+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	080601d0 	.word	0x080601d0

080a0384 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <HAL_USART_Init+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	699b      	ldr	r3, [r3, #24]
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601c4 	.word	0x080601c4

080a0394 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <HAL_USART_Write_Data+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601c4 	.word	0x080601c4

080a03a4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b02      	ldr	r3, [pc, #8]	; (80a03b0 <HAL_USART_Available_Data+0xc>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03ac:	9301      	str	r3, [sp, #4]
 80a03ae:	bd08      	pop	{r3, pc}
 80a03b0:	080601c4 	.word	0x080601c4

080a03b4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a03b4:	b508      	push	{r3, lr}
 80a03b6:	4b02      	ldr	r3, [pc, #8]	; (80a03c0 <HAL_USART_Read_Data+0xc>)
 80a03b8:	681b      	ldr	r3, [r3, #0]
 80a03ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a03bc:	9301      	str	r3, [sp, #4]
 80a03be:	bd08      	pop	{r3, pc}
 80a03c0:	080601c4 	.word	0x080601c4

080a03c4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a03c4:	b508      	push	{r3, lr}
 80a03c6:	4b02      	ldr	r3, [pc, #8]	; (80a03d0 <HAL_USART_Peek_Data+0xc>)
 80a03c8:	681b      	ldr	r3, [r3, #0]
 80a03ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03cc:	9301      	str	r3, [sp, #4]
 80a03ce:	bd08      	pop	{r3, pc}
 80a03d0:	080601c4 	.word	0x080601c4

080a03d4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03d4:	b508      	push	{r3, lr}
 80a03d6:	4b02      	ldr	r3, [pc, #8]	; (80a03e0 <HAL_USART_Flush_Data+0xc>)
 80a03d8:	681b      	ldr	r3, [r3, #0]
 80a03da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03dc:	9301      	str	r3, [sp, #4]
 80a03de:	bd08      	pop	{r3, pc}
 80a03e0:	080601c4 	.word	0x080601c4

080a03e4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a03e4:	b508      	push	{r3, lr}
 80a03e6:	4b02      	ldr	r3, [pc, #8]	; (80a03f0 <HAL_USART_Is_Enabled+0xc>)
 80a03e8:	681b      	ldr	r3, [r3, #0]
 80a03ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a03ec:	9301      	str	r3, [sp, #4]
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	080601c4 	.word	0x080601c4

080a03f4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03f4:	b508      	push	{r3, lr}
 80a03f6:	4b02      	ldr	r3, [pc, #8]	; (80a0400 <HAL_USART_Available_Data_For_Write+0xc>)
 80a03f8:	681b      	ldr	r3, [r3, #0]
 80a03fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03fc:	9301      	str	r3, [sp, #4]
 80a03fe:	bd08      	pop	{r3, pc}
 80a0400:	080601c4 	.word	0x080601c4

080a0404 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0404:	b508      	push	{r3, lr}
 80a0406:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <HAL_I2C_Write_Data+0xc>)
 80a0408:	681b      	ldr	r3, [r3, #0]
 80a040a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a040c:	9301      	str	r3, [sp, #4]
 80a040e:	bd08      	pop	{r3, pc}
 80a0410:	080601ac 	.word	0x080601ac

080a0414 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_I2C_Available_Data+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601ac 	.word	0x080601ac

080a0424 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_I2C_Read_Data+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601ac 	.word	0x080601ac

080a0434 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_I2C_Peek_Data+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601ac 	.word	0x080601ac

080a0444 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_I2C_Flush_Data+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601ac 	.word	0x080601ac

080a0454 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <HAL_I2C_Is_Enabled+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601ac 	.word	0x080601ac

080a0464 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b03      	ldr	r3, [pc, #12]	; (80a0474 <HAL_I2C_Init+0x10>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a046e:	9301      	str	r3, [sp, #4]
 80a0470:	bd08      	pop	{r3, pc}
 80a0472:	0000      	.short	0x0000
 80a0474:	080601ac 	.word	0x080601ac

080a0478 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <HAL_USB_USART_Init+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	681b      	ldr	r3, [r3, #0]
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601d8 	.word	0x080601d8

080a0488 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <HAL_USB_USART_Begin+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	685b      	ldr	r3, [r3, #4]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601d8 	.word	0x080601d8

080a0498 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <HAL_USB_USART_Available_Data+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	691b      	ldr	r3, [r3, #16]
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601d8 	.word	0x080601d8

080a04a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	695b      	ldr	r3, [r3, #20]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601d8 	.word	0x080601d8

080a04b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <HAL_USB_USART_Receive_Data+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	699b      	ldr	r3, [r3, #24]
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601d8 	.word	0x080601d8

080a04c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <HAL_USB_USART_Send_Data+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	69db      	ldr	r3, [r3, #28]
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601d8 	.word	0x080601d8

080a04d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <HAL_USB_USART_Flush_Data+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6a1b      	ldr	r3, [r3, #32]
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601d8 	.word	0x080601d8

080a04e8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <inet_gethostbyname+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601c0 	.word	0x080601c0

080a04f8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <system_mode+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	681b      	ldr	r3, [r3, #0]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601a4 	.word	0x080601a4

080a0508 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <set_system_mode+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	685b      	ldr	r3, [r3, #4]
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601a4 	.word	0x080601a4

080a0518 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <system_thread_get_state+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601a4 	.word	0x080601a4

080a0528 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b03      	ldr	r3, [pc, #12]	; (80a0538 <system_ctrl_set_app_request_handler+0x10>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0532:	9301      	str	r3, [sp, #4]
 80a0534:	bd08      	pop	{r3, pc}
 80a0536:	0000      	.short	0x0000
 80a0538:	080601a4 	.word	0x080601a4

080a053c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b03      	ldr	r3, [pc, #12]	; (80a054c <system_ctrl_set_result+0x10>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0546:	9301      	str	r3, [sp, #4]
 80a0548:	bd08      	pop	{r3, pc}
 80a054a:	0000      	.short	0x0000
 80a054c:	080601a4 	.word	0x080601a4

080a0550 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0550:	b508      	push	{r3, lr}
 80a0552:	4b02      	ldr	r3, [pc, #8]	; (80a055c <network_connect+0xc>)
 80a0554:	681b      	ldr	r3, [r3, #0]
 80a0556:	685b      	ldr	r3, [r3, #4]
 80a0558:	9301      	str	r3, [sp, #4]
 80a055a:	bd08      	pop	{r3, pc}
 80a055c:	080601c8 	.word	0x080601c8

080a0560 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0560:	b508      	push	{r3, lr}
 80a0562:	4b02      	ldr	r3, [pc, #8]	; (80a056c <network_connecting+0xc>)
 80a0564:	681b      	ldr	r3, [r3, #0]
 80a0566:	689b      	ldr	r3, [r3, #8]
 80a0568:	9301      	str	r3, [sp, #4]
 80a056a:	bd08      	pop	{r3, pc}
 80a056c:	080601c8 	.word	0x080601c8

080a0570 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0570:	b508      	push	{r3, lr}
 80a0572:	4b02      	ldr	r3, [pc, #8]	; (80a057c <network_disconnect+0xc>)
 80a0574:	681b      	ldr	r3, [r3, #0]
 80a0576:	68db      	ldr	r3, [r3, #12]
 80a0578:	9301      	str	r3, [sp, #4]
 80a057a:	bd08      	pop	{r3, pc}
 80a057c:	080601c8 	.word	0x080601c8

080a0580 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0580:	b508      	push	{r3, lr}
 80a0582:	4b02      	ldr	r3, [pc, #8]	; (80a058c <network_ready+0xc>)
 80a0584:	681b      	ldr	r3, [r3, #0]
 80a0586:	691b      	ldr	r3, [r3, #16]
 80a0588:	9301      	str	r3, [sp, #4]
 80a058a:	bd08      	pop	{r3, pc}
 80a058c:	080601c8 	.word	0x080601c8

080a0590 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <network_on+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	695b      	ldr	r3, [r3, #20]
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601c8 	.word	0x080601c8

080a05a0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <network_off+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	699b      	ldr	r3, [r3, #24]
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601c8 	.word	0x080601c8

080a05b0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <network_listen+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	69db      	ldr	r3, [r3, #28]
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	080601c8 	.word	0x080601c8

080a05c0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <network_listening+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	6a1b      	ldr	r3, [r3, #32]
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601c8 	.word	0x080601c8

080a05d0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <network_set_listen_timeout+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601c8 	.word	0x080601c8

080a05e0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <network_get_listen_timeout+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601c8 	.word	0x080601c8

080a05f0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <spark_process+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	689b      	ldr	r3, [r3, #8]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601cc 	.word	0x080601cc

080a0600 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <spark_cloud_flag_connected+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	695b      	ldr	r3, [r3, #20]
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601cc 	.word	0x080601cc

080a0610 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <spark_sync_time_pending+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601cc 	.word	0x080601cc

080a0620 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601cc 	.word	0x080601cc

080a0630 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <malloc+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	681b      	ldr	r3, [r3, #0]
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601a0 	.word	0x080601a0

080a0640 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <free+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	685b      	ldr	r3, [r3, #4]
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601a0 	.word	0x080601a0

080a0650 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b02      	ldr	r3, [pc, #8]	; (80a065c <vsnprintf+0xc>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0658:	9301      	str	r3, [sp, #4]
 80a065a:	bd08      	pop	{r3, pc}
 80a065c:	080601a0 	.word	0x080601a0

080a0660 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0660:	4770      	bx	lr

080a0662 <_ZN8SPIClassD0Ev>:
 80a0662:	b510      	push	{r4, lr}
 80a0664:	4604      	mov	r4, r0
 80a0666:	2110      	movs	r1, #16
 80a0668:	f000 fd4f 	bl	80a110a <_ZdlPvj>
 80a066c:	4620      	mov	r0, r4
 80a066e:	bd10      	pop	{r4, pc}

080a0670 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0670:	b570      	push	{r4, r5, r6, lr}
 80a0672:	4604      	mov	r4, r0
 80a0674:	460e      	mov	r6, r1
 80a0676:	4b07      	ldr	r3, [pc, #28]	; (80a0694 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0678:	2500      	movs	r5, #0
 80a067a:	6003      	str	r3, [r0, #0]
 80a067c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0680:	f7ff fe78 	bl	80a0374 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0684:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0686:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0688:	f7ff fe44 	bl	80a0314 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a068c:	60a5      	str	r5, [r4, #8]
}
 80a068e:	4620      	mov	r0, r4
 80a0690:	bd70      	pop	{r4, r5, r6, pc}
 80a0692:	bf00      	nop
 80a0694:	080a14d8 	.word	0x080a14d8

080a0698 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0698:	7900      	ldrb	r0, [r0, #4]
 80a069a:	f7ff be43 	b.w	80a0324 <HAL_SPI_Is_Enabled>
	...

080a06a0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a06a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a06a4:	4b03      	ldr	r3, [pc, #12]	; (80a06b4 <_GLOBAL__sub_I_System+0x14>)
 80a06a6:	2000      	movs	r0, #0
 80a06a8:	7018      	strb	r0, [r3, #0]
 80a06aa:	8058      	strh	r0, [r3, #2]
 80a06ac:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a06ae:	f7ff bf2b 	b.w	80a0508 <set_system_mode>
 80a06b2:	bf00      	nop
 80a06b4:	200000d4 	.word	0x200000d4

080a06b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a06b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06ba:	4606      	mov	r6, r0
 80a06bc:	460d      	mov	r5, r1
 80a06be:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a06c0:	2400      	movs	r4, #0
  while (size--) {
 80a06c2:	42bd      	cmp	r5, r7
 80a06c4:	d00c      	beq.n	80a06e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a06c6:	6833      	ldr	r3, [r6, #0]
 80a06c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a06cc:	689b      	ldr	r3, [r3, #8]
 80a06ce:	4630      	mov	r0, r6
 80a06d0:	4798      	blx	r3
     if (chunk>=0)
 80a06d2:	2800      	cmp	r0, #0
 80a06d4:	db01      	blt.n	80a06da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a06d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a06d8:	e7f3      	b.n	80a06c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a06da:	2c00      	cmp	r4, #0
 80a06dc:	bf08      	it	eq
 80a06de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a06e0:	4620      	mov	r0, r4
 80a06e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a06e4:	b570      	push	{r4, r5, r6, lr}
 80a06e6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a06e8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a06ea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a06ec:	b149      	cbz	r1, 80a0702 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a06ee:	f000 fea1 	bl	80a1434 <strlen>
 80a06f2:	682b      	ldr	r3, [r5, #0]
 80a06f4:	4602      	mov	r2, r0
 80a06f6:	4621      	mov	r1, r4
 80a06f8:	4628      	mov	r0, r5
    }
 80a06fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a06fe:	68db      	ldr	r3, [r3, #12]
 80a0700:	4718      	bx	r3
    }
 80a0702:	bd70      	pop	{r4, r5, r6, pc}

080a0704 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0704:	6803      	ldr	r3, [r0, #0]
 80a0706:	689b      	ldr	r3, [r3, #8]
 80a0708:	4718      	bx	r3

080a070a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a070a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a070c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a070e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0710:	f7ff fff8 	bl	80a0704 <_ZN5Print5printEc>
  n += print('\n');
 80a0714:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0716:	4604      	mov	r4, r0
  n += print('\n');
 80a0718:	4628      	mov	r0, r5
 80a071a:	f7ff fff3 	bl	80a0704 <_ZN5Print5printEc>
  return n;
}
 80a071e:	4420      	add	r0, r4
 80a0720:	bd38      	pop	{r3, r4, r5, pc}

080a0722 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0722:	b538      	push	{r3, r4, r5, lr}
 80a0724:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0726:	f7ff ffdd 	bl	80a06e4 <_ZN5Print5writeEPKc>
 80a072a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a072c:	4628      	mov	r0, r5
 80a072e:	f7ff ffec 	bl	80a070a <_ZN5Print7printlnEv>
  return n;
}
 80a0732:	4420      	add	r0, r4
 80a0734:	bd38      	pop	{r3, r4, r5, pc}

080a0736 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0736:	2a01      	cmp	r2, #1
 80a0738:	bf98      	it	ls
 80a073a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a073c:	b530      	push	{r4, r5, lr}
 80a073e:	460b      	mov	r3, r1
 80a0740:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0742:	2100      	movs	r1, #0
 80a0744:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0748:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a074c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0750:	fb05 3312 	mls	r3, r5, r2, r3
 80a0754:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0756:	2b09      	cmp	r3, #9
 80a0758:	bf94      	ite	ls
 80a075a:	3330      	addls	r3, #48	; 0x30
 80a075c:	3337      	addhi	r3, #55	; 0x37
 80a075e:	b2db      	uxtb	r3, r3
 80a0760:	4621      	mov	r1, r4
 80a0762:	f804 3901 	strb.w	r3, [r4], #-1
 80a0766:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0768:	2d00      	cmp	r5, #0
 80a076a:	d1ef      	bne.n	80a074c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a076c:	f7ff ffba 	bl	80a06e4 <_ZN5Print5writeEPKc>
}
 80a0770:	b00b      	add	sp, #44	; 0x2c
 80a0772:	bd30      	pop	{r4, r5, pc}

080a0774 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0774:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0776:	b922      	cbnz	r2, 80a0782 <_ZN5Print5printEmi+0xe>
 80a0778:	6803      	ldr	r3, [r0, #0]
 80a077a:	b2c9      	uxtb	r1, r1
 80a077c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a077e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0780:	4718      	bx	r3
  else return printNumber(n, base);
 80a0782:	b2d2      	uxtb	r2, r2
}
 80a0784:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0786:	f7ff bfd6 	b.w	80a0736 <_ZN5Print11printNumberEmh>

080a078a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a078a:	f7ff bff3 	b.w	80a0774 <_ZN5Print5printEmi>

080a078e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a078e:	b40c      	push	{r2, r3}
 80a0790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0794:	b087      	sub	sp, #28
 80a0796:	af00      	add	r7, sp, #0
 80a0798:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a079c:	f854 9b04 	ldr.w	r9, [r4], #4
 80a07a0:	4605      	mov	r5, r0
 80a07a2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a07a4:	4623      	mov	r3, r4
 80a07a6:	464a      	mov	r2, r9
 80a07a8:	2114      	movs	r1, #20
 80a07aa:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a07ac:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a07ae:	f7ff ff4f 	bl	80a0650 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a07b2:	2813      	cmp	r0, #19
 80a07b4:	d805      	bhi.n	80a07c2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07b6:	1d39      	adds	r1, r7, #4
 80a07b8:	4628      	mov	r0, r5
 80a07ba:	f7ff ff93 	bl	80a06e4 <_ZN5Print5writeEPKc>
 80a07be:	4604      	mov	r4, r0
 80a07c0:	e013      	b.n	80a07ea <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a07c2:	f100 0308 	add.w	r3, r0, #8
 80a07c6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a07ca:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a07cc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a07d0:	1c41      	adds	r1, r0, #1
 80a07d2:	4623      	mov	r3, r4
 80a07d4:	464a      	mov	r2, r9
 80a07d6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a07d8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a07da:	f7ff ff39 	bl	80a0650 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07de:	4669      	mov	r1, sp
 80a07e0:	4628      	mov	r0, r5
 80a07e2:	f7ff ff7f 	bl	80a06e4 <_ZN5Print5writeEPKc>
 80a07e6:	4604      	mov	r4, r0
 80a07e8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a07ea:	b11e      	cbz	r6, 80a07f4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a07ec:	4628      	mov	r0, r5
 80a07ee:	f7ff ff8c 	bl	80a070a <_ZN5Print7printlnEv>
 80a07f2:	4404      	add	r4, r0
    return n;
}
 80a07f4:	4620      	mov	r0, r4
 80a07f6:	371c      	adds	r7, #28
 80a07f8:	46bd      	mov	sp, r7
 80a07fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a07fe:	b002      	add	sp, #8
 80a0800:	4770      	bx	lr

080a0802 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0802:	2300      	movs	r3, #0
 80a0804:	461a      	mov	r2, r3
 80a0806:	4619      	mov	r1, r3
 80a0808:	6840      	ldr	r0, [r0, #4]
 80a080a:	f7ff bec1 	b.w	80a0590 <network_on>
	...

080a0810 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0810:	4a01      	ldr	r2, [pc, #4]	; (80a0818 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0814:	601a      	str	r2, [r3, #0]
 80a0816:	4770      	bx	lr
 80a0818:	080a1556 	.word	0x080a1556
 80a081c:	200000dc 	.word	0x200000dc

080a0820 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a0820:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a0822:	2000      	movs	r0, #0
 80a0824:	f7ff fef4 	bl	80a0610 <spark_sync_time_pending>
 80a0828:	b128      	cbz	r0, 80a0836 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a082a:	f7ff fee9 	bl	80a0600 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a082e:	f080 0001 	eor.w	r0, r0, #1
 80a0832:	b2c0      	uxtb	r0, r0
 80a0834:	bd08      	pop	{r3, pc}
 80a0836:	2001      	movs	r0, #1
    }
 80a0838:	bd08      	pop	{r3, pc}

080a083a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a083a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a083c:	2000      	movs	r0, #0
 80a083e:	f7ff fd91 	bl	80a0364 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a0842:	4604      	mov	r4, r0
 80a0844:	b968      	cbnz	r0, 80a0862 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a0846:	f7ff fe57 	bl	80a04f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a084a:	2801      	cmp	r0, #1
 80a084c:	d10b      	bne.n	80a0866 <_ZN9TimeClass7isValidEv+0x2c>
 80a084e:	4620      	mov	r0, r4
 80a0850:	f7ff fe62 	bl	80a0518 <system_thread_get_state>
 80a0854:	b938      	cbnz	r0, 80a0866 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a0856:	f7ff ffe3 	bl	80a0820 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a085a:	b930      	cbnz	r0, 80a086a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a085c:	f7ff fec8 	bl	80a05f0 <spark_process>
 80a0860:	e7f9      	b.n	80a0856 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a0862:	2001      	movs	r0, #1
 80a0864:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a0866:	2000      	movs	r0, #0
 80a0868:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a086a:	f7ff ffd9 	bl	80a0820 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a086e:	2000      	movs	r0, #0
 80a0870:	f7ff fd78 	bl	80a0364 <HAL_RTC_Time_Is_Valid>
 80a0874:	3000      	adds	r0, #0
 80a0876:	bf18      	it	ne
 80a0878:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a087a:	bd10      	pop	{r4, pc}

080a087c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a087c:	b508      	push	{r3, lr}
    (void)isValid();
 80a087e:	f7ff ffdc 	bl	80a083a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a0882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a0886:	f7ff bd65 	b.w	80a0354 <HAL_RTC_Get_UnixTime>
	...

080a088c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a088c:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a088e:	681a      	ldr	r2, [r3, #0]
 80a0890:	4b02      	ldr	r3, [pc, #8]	; (80a089c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0892:	601a      	str	r2, [r3, #0]
 80a0894:	4770      	bx	lr
 80a0896:	bf00      	nop
 80a0898:	20000044 	.word	0x20000044
 80a089c:	200000e0 	.word	0x200000e0

080a08a0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a08a0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a08a2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a08a4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a08a6:	b113      	cbz	r3, 80a08ae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a08a8:	2203      	movs	r2, #3
 80a08aa:	4601      	mov	r1, r0
 80a08ac:	4798      	blx	r3
    }
 80a08ae:	4620      	mov	r0, r4
 80a08b0:	bd10      	pop	{r4, pc}

080a08b2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a08b2:	b510      	push	{r4, lr}
 80a08b4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a08b6:	f7ff fff3 	bl	80a08a0 <_ZNSt14_Function_baseD1Ev>
 80a08ba:	4620      	mov	r0, r4
 80a08bc:	bd10      	pop	{r4, pc}
	...

080a08c0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a08c0:	4803      	ldr	r0, [pc, #12]	; (80a08d0 <_GLOBAL__sub_I_RGB+0x10>)
 80a08c2:	2300      	movs	r3, #0
 80a08c4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a08c6:	4a03      	ldr	r2, [pc, #12]	; (80a08d4 <_GLOBAL__sub_I_RGB+0x14>)
 80a08c8:	4903      	ldr	r1, [pc, #12]	; (80a08d8 <_GLOBAL__sub_I_RGB+0x18>)
 80a08ca:	f000 bc19 	b.w	80a1100 <__aeabi_atexit>
 80a08ce:	bf00      	nop
 80a08d0:	200000e4 	.word	0x200000e4
 80a08d4:	200000ac 	.word	0x200000ac
 80a08d8:	080a08b3 	.word	0x080a08b3

080a08dc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a08dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a08de:	4b14      	ldr	r3, [pc, #80]	; (80a0930 <serialEventRun+0x54>)
 80a08e0:	b133      	cbz	r3, 80a08f0 <serialEventRun+0x14>
 80a08e2:	f000 f96b 	bl	80a0bbc <_Z16_fetch_usbserialv>
 80a08e6:	6803      	ldr	r3, [r0, #0]
 80a08e8:	691b      	ldr	r3, [r3, #16]
 80a08ea:	4798      	blx	r3
 80a08ec:	2800      	cmp	r0, #0
 80a08ee:	dc16      	bgt.n	80a091e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a08f0:	4b10      	ldr	r3, [pc, #64]	; (80a0934 <serialEventRun+0x58>)
 80a08f2:	b133      	cbz	r3, 80a0902 <serialEventRun+0x26>
 80a08f4:	f000 fa20 	bl	80a0d38 <_Z22__fetch_global_Serial1v>
 80a08f8:	6803      	ldr	r3, [r0, #0]
 80a08fa:	691b      	ldr	r3, [r3, #16]
 80a08fc:	4798      	blx	r3
 80a08fe:	2800      	cmp	r0, #0
 80a0900:	dc10      	bgt.n	80a0924 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0902:	4b0d      	ldr	r3, [pc, #52]	; (80a0938 <serialEventRun+0x5c>)
 80a0904:	b10b      	cbz	r3, 80a090a <serialEventRun+0x2e>
 80a0906:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a090a:	4b0c      	ldr	r3, [pc, #48]	; (80a093c <serialEventRun+0x60>)
 80a090c:	b17b      	cbz	r3, 80a092e <serialEventRun+0x52>
 80a090e:	f000 f991 	bl	80a0c34 <_Z17_fetch_usbserial1v>
 80a0912:	6803      	ldr	r3, [r0, #0]
 80a0914:	691b      	ldr	r3, [r3, #16]
 80a0916:	4798      	blx	r3
 80a0918:	2800      	cmp	r0, #0
 80a091a:	dc06      	bgt.n	80a092a <serialEventRun+0x4e>
 80a091c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a091e:	f3af 8000 	nop.w
 80a0922:	e7e5      	b.n	80a08f0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0924:	f3af 8000 	nop.w
 80a0928:	e7eb      	b.n	80a0902 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a092a:	f3af 8000 	nop.w
 80a092e:	bd08      	pop	{r3, pc}
	...

080a0940 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0940:	b508      	push	{r3, lr}
	serialEventRun();
 80a0942:	f7ff ffcb 	bl	80a08dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0946:	f7ff fcfd 	bl	80a0344 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a094a:	4b01      	ldr	r3, [pc, #4]	; (80a0950 <_post_loop+0x10>)
 80a094c:	6018      	str	r0, [r3, #0]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	20000588 	.word	0x20000588

080a0954 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0954:	4802      	ldr	r0, [pc, #8]	; (80a0960 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0956:	4a03      	ldr	r2, [pc, #12]	; (80a0964 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0958:	4903      	ldr	r1, [pc, #12]	; (80a0968 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a095a:	1a12      	subs	r2, r2, r0
 80a095c:	f000 bd2e 	b.w	80a13bc <memcpy>
 80a0960:	40024000 	.word	0x40024000
 80a0964:	40024004 	.word	0x40024004
 80a0968:	080a1790 	.word	0x080a1790

080a096c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a096c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a096e:	2300      	movs	r3, #0
 80a0970:	9300      	str	r3, [sp, #0]
 80a0972:	461a      	mov	r2, r3
 80a0974:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0978:	f7ff fde0 	bl	80a053c <system_ctrl_set_result>
}
 80a097c:	b003      	add	sp, #12
 80a097e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0984 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0984:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0986:	8843      	ldrh	r3, [r0, #2]
 80a0988:	2b0a      	cmp	r3, #10
 80a098a:	d008      	beq.n	80a099e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a098c:	2b50      	cmp	r3, #80	; 0x50
 80a098e:	d109      	bne.n	80a09a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0990:	4b09      	ldr	r3, [pc, #36]	; (80a09b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0992:	681b      	ldr	r3, [r3, #0]
 80a0994:	b13b      	cbz	r3, 80a09a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0996:	b003      	add	sp, #12
 80a0998:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a099c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a099e:	f7ff ffe5 	bl	80a096c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a09a2:	e006      	b.n	80a09b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a09a4:	2300      	movs	r3, #0
 80a09a6:	9300      	str	r3, [sp, #0]
 80a09a8:	461a      	mov	r2, r3
 80a09aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a09ae:	f7ff fdc5 	bl	80a053c <system_ctrl_set_result>
        break;
    }
}
 80a09b2:	b003      	add	sp, #12
 80a09b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a09b8:	200000f4 	.word	0x200000f4

080a09bc <module_user_init_hook>:

void module_user_init_hook()
{
 80a09bc:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a09be:	4c10      	ldr	r4, [pc, #64]	; (80a0a00 <module_user_init_hook+0x44>)
 80a09c0:	4d10      	ldr	r5, [pc, #64]	; (80a0a04 <module_user_init_hook+0x48>)
 80a09c2:	6823      	ldr	r3, [r4, #0]
 80a09c4:	42ab      	cmp	r3, r5
 80a09c6:	4b10      	ldr	r3, [pc, #64]	; (80a0a08 <module_user_init_hook+0x4c>)
 80a09c8:	bf0c      	ite	eq
 80a09ca:	2201      	moveq	r2, #1
 80a09cc:	2200      	movne	r2, #0
 80a09ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a09d0:	d002      	beq.n	80a09d8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a09d2:	f7ff ffbf 	bl	80a0954 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a09d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a09d8:	f7ff fcac 	bl	80a0334 <HAL_RNG_GetRandomNumber>
 80a09dc:	4604      	mov	r4, r0
    srand(seed);
 80a09de:	f000 fd01 	bl	80a13e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a09e2:	4b0a      	ldr	r3, [pc, #40]	; (80a0a0c <module_user_init_hook+0x50>)
 80a09e4:	b113      	cbz	r3, 80a09ec <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a09e6:	4620      	mov	r0, r4
 80a09e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a09ec:	2100      	movs	r1, #0
 80a09ee:	4807      	ldr	r0, [pc, #28]	; (80a0a0c <module_user_init_hook+0x50>)
 80a09f0:	f7ff fe16 	bl	80a0620 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a09f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a09f8:	2100      	movs	r1, #0
 80a09fa:	4805      	ldr	r0, [pc, #20]	; (80a0a10 <module_user_init_hook+0x54>)
 80a09fc:	f7ff bd94 	b.w	80a0528 <system_ctrl_set_app_request_handler>
 80a0a00:	40024000 	.word	0x40024000
 80a0a04:	9a271c1e 	.word	0x9a271c1e
 80a0a08:	200000f8 	.word	0x200000f8
 80a0a0c:	00000000 	.word	0x00000000
 80a0a10:	080a0985 	.word	0x080a0985

080a0a14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0a14:	4770      	bx	lr

080a0a16 <_ZN9IPAddressD0Ev>:
 80a0a16:	b510      	push	{r4, lr}
 80a0a18:	4604      	mov	r4, r0
 80a0a1a:	2118      	movs	r1, #24
 80a0a1c:	f000 fb75 	bl	80a110a <_ZdlPvj>
 80a0a20:	4620      	mov	r0, r4
 80a0a22:	bd10      	pop	{r4, pc}

080a0a24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a26:	460f      	mov	r7, r1
 80a0a28:	f100 0608 	add.w	r6, r0, #8
 80a0a2c:	1d05      	adds	r5, r0, #4
 80a0a2e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0a34:	220a      	movs	r2, #10
 80a0a36:	4638      	mov	r0, r7
 80a0a38:	f7ff fea7 	bl	80a078a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a3c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0a3e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0a40:	d007      	beq.n	80a0a52 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0a42:	2c00      	cmp	r4, #0
 80a0a44:	d0f4      	beq.n	80a0a30 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0a46:	212e      	movs	r1, #46	; 0x2e
 80a0a48:	4638      	mov	r0, r7
 80a0a4a:	f7ff fe5b 	bl	80a0704 <_ZN5Print5printEc>
 80a0a4e:	4404      	add	r4, r0
 80a0a50:	e7ee      	b.n	80a0a30 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0a52:	4620      	mov	r0, r4
 80a0a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0a58 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0a58:	b510      	push	{r4, lr}
 80a0a5a:	4604      	mov	r4, r0
 80a0a5c:	4b04      	ldr	r3, [pc, #16]	; (80a0a70 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0a5e:	2211      	movs	r2, #17
 80a0a60:	f840 3b04 	str.w	r3, [r0], #4
 80a0a64:	2100      	movs	r1, #0
 80a0a66:	f000 fcb4 	bl	80a13d2 <memset>
{
    clear();
}
 80a0a6a:	4620      	mov	r0, r4
 80a0a6c:	bd10      	pop	{r4, pc}
 80a0a6e:	bf00      	nop
 80a0a70:	080a15f8 	.word	0x080a15f8

080a0a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0a74:	4603      	mov	r3, r0
 80a0a76:	4a07      	ldr	r2, [pc, #28]	; (80a0a94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0a78:	b510      	push	{r4, lr}
 80a0a7a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0a7e:	f101 0210 	add.w	r2, r1, #16
 80a0a82:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0a86:	4291      	cmp	r1, r2
 80a0a88:	f843 4b04 	str.w	r4, [r3], #4
 80a0a8c:	d1f9      	bne.n	80a0a82 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0a8e:	780a      	ldrb	r2, [r1, #0]
 80a0a90:	701a      	strb	r2, [r3, #0]
}
 80a0a92:	bd10      	pop	{r4, pc}
 80a0a94:	080a15f8 	.word	0x080a15f8

080a0a98 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a98:	4a02      	ldr	r2, [pc, #8]	; (80a0aa4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0a9a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0a9c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0a9e:	2204      	movs	r2, #4
 80a0aa0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0aa2:	4770      	bx	lr
 80a0aa4:	080a15f8 	.word	0x080a15f8

080a0aa8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0aa8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0aaa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0aae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0ab2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0ab6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0aba:	2304      	movs	r3, #4
 80a0abc:	6041      	str	r1, [r0, #4]
 80a0abe:	7503      	strb	r3, [r0, #20]
 80a0ac0:	bd10      	pop	{r4, pc}
	...

080a0ac4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0ac6:	4d04      	ldr	r5, [pc, #16]	; (80a0ad8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0ac8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0aca:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0ace:	9500      	str	r5, [sp, #0]
 80a0ad0:	f7ff ffea 	bl	80a0aa8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0ad4:	b003      	add	sp, #12
 80a0ad6:	bd30      	pop	{r4, r5, pc}
 80a0ad8:	080a15f8 	.word	0x080a15f8

080a0adc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0adc:	7441      	strb	r1, [r0, #17]
 80a0ade:	4770      	bx	lr

080a0ae0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0ae0:	4770      	bx	lr

080a0ae2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0ae2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0ae4:	2100      	movs	r1, #0
 80a0ae6:	7c00      	ldrb	r0, [r0, #16]
 80a0ae8:	f7ff fce6 	bl	80a04b8 <HAL_USB_USART_Receive_Data>
}
 80a0aec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0af0:	bf28      	it	cs
 80a0af2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0af6:	bd08      	pop	{r3, pc}

080a0af8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0af8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0afa:	2101      	movs	r1, #1
 80a0afc:	7c00      	ldrb	r0, [r0, #16]
 80a0afe:	f7ff fcdb 	bl	80a04b8 <HAL_USB_USART_Receive_Data>
}
 80a0b02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b06:	bf28      	it	cs
 80a0b08:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0b0c:	bd08      	pop	{r3, pc}

080a0b0e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0b0e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0b10:	7c00      	ldrb	r0, [r0, #16]
 80a0b12:	f7ff fcc9 	bl	80a04a8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0b16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b1a:	bd08      	pop	{r3, pc}

080a0b1c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0b1c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0b1e:	7c00      	ldrb	r0, [r0, #16]
 80a0b20:	f7ff fcba 	bl	80a0498 <HAL_USB_USART_Available_Data>
}
 80a0b24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b28:	bd08      	pop	{r3, pc}

080a0b2a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0b2a:	7c00      	ldrb	r0, [r0, #16]
 80a0b2c:	f7ff bcd4 	b.w	80a04d8 <HAL_USB_USART_Flush_Data>

080a0b30 <_ZN9USBSerialD0Ev>:
 80a0b30:	b510      	push	{r4, lr}
 80a0b32:	4604      	mov	r4, r0
 80a0b34:	2114      	movs	r1, #20
 80a0b36:	f000 fae8 	bl	80a110a <_ZdlPvj>
 80a0b3a:	4620      	mov	r0, r4
 80a0b3c:	bd10      	pop	{r4, pc}

080a0b3e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b3e:	b538      	push	{r3, r4, r5, lr}
 80a0b40:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b42:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0b44:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0b46:	f7ff fcaf 	bl	80a04a8 <HAL_USB_USART_Available_Data_For_Write>
 80a0b4a:	2800      	cmp	r0, #0
 80a0b4c:	dc01      	bgt.n	80a0b52 <_ZN9USBSerial5writeEh+0x14>
 80a0b4e:	7c60      	ldrb	r0, [r4, #17]
 80a0b50:	b128      	cbz	r0, 80a0b5e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0b52:	4629      	mov	r1, r5
 80a0b54:	7c20      	ldrb	r0, [r4, #16]
 80a0b56:	f7ff fcb7 	bl	80a04c8 <HAL_USB_USART_Send_Data>
 80a0b5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0b5e:	bd38      	pop	{r3, r4, r5, pc}

080a0b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0b60:	b510      	push	{r4, lr}
 80a0b62:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0b64:	2300      	movs	r3, #0
 80a0b66:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0b6c:	60a3      	str	r3, [r4, #8]
 80a0b6e:	4b05      	ldr	r3, [pc, #20]	; (80a0b84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0b70:	4608      	mov	r0, r1
 80a0b72:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0b74:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0b76:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0b78:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0b7a:	4611      	mov	r1, r2
 80a0b7c:	f7ff fc7c 	bl	80a0478 <HAL_USB_USART_Init>
}
 80a0b80:	4620      	mov	r0, r4
 80a0b82:	bd10      	pop	{r4, pc}
 80a0b84:	080a160c 	.word	0x080a160c

080a0b88 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0b88:	2200      	movs	r2, #0
 80a0b8a:	7c00      	ldrb	r0, [r0, #16]
 80a0b8c:	f7ff bc7c 	b.w	80a0488 <HAL_USB_USART_Begin>

080a0b90 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0b90:	b510      	push	{r4, lr}
 80a0b92:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0b94:	2214      	movs	r2, #20
 80a0b96:	2100      	movs	r1, #0
 80a0b98:	f000 fc1b 	bl	80a13d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0b9c:	4b05      	ldr	r3, [pc, #20]	; (80a0bb4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0b9e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ba0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0ba2:	4b05      	ldr	r3, [pc, #20]	; (80a0bb8 <_Z19acquireSerialBufferv+0x28>)
 80a0ba4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ba6:	f240 1301 	movw	r3, #257	; 0x101
 80a0baa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0bac:	2381      	movs	r3, #129	; 0x81
 80a0bae:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0bb0:	bd10      	pop	{r4, pc}
 80a0bb2:	bf00      	nop
 80a0bb4:	20000181 	.word	0x20000181
 80a0bb8:	20000100 	.word	0x20000100

080a0bbc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0bbc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0bbe:	4d0e      	ldr	r5, [pc, #56]	; (80a0bf8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0bc0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0bc2:	a801      	add	r0, sp, #4
 80a0bc4:	f7ff ffe4 	bl	80a0b90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0bc8:	6829      	ldr	r1, [r5, #0]
 80a0bca:	f011 0401 	ands.w	r4, r1, #1
 80a0bce:	d110      	bne.n	80a0bf2 <_Z16_fetch_usbserialv+0x36>
 80a0bd0:	4628      	mov	r0, r5
 80a0bd2:	f7ff fa64 	bl	80a009e <__cxa_guard_acquire>
 80a0bd6:	b160      	cbz	r0, 80a0bf2 <_Z16_fetch_usbserialv+0x36>
 80a0bd8:	aa01      	add	r2, sp, #4
 80a0bda:	4621      	mov	r1, r4
 80a0bdc:	4807      	ldr	r0, [pc, #28]	; (80a0bfc <_Z16_fetch_usbserialv+0x40>)
 80a0bde:	f7ff ffbf 	bl	80a0b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0be2:	4628      	mov	r0, r5
 80a0be4:	f7ff fa60 	bl	80a00a8 <__cxa_guard_release>
 80a0be8:	4a05      	ldr	r2, [pc, #20]	; (80a0c00 <_Z16_fetch_usbserialv+0x44>)
 80a0bea:	4906      	ldr	r1, [pc, #24]	; (80a0c04 <_Z16_fetch_usbserialv+0x48>)
 80a0bec:	4803      	ldr	r0, [pc, #12]	; (80a0bfc <_Z16_fetch_usbserialv+0x40>)
 80a0bee:	f000 fa87 	bl	80a1100 <__aeabi_atexit>
	return _usbserial;
}
 80a0bf2:	4802      	ldr	r0, [pc, #8]	; (80a0bfc <_Z16_fetch_usbserialv+0x40>)
 80a0bf4:	b007      	add	sp, #28
 80a0bf6:	bd30      	pop	{r4, r5, pc}
 80a0bf8:	200000fc 	.word	0x200000fc
 80a0bfc:	20000284 	.word	0x20000284
 80a0c00:	200000ac 	.word	0x200000ac
 80a0c04:	080a0ae1 	.word	0x080a0ae1

080a0c08 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0c08:	b510      	push	{r4, lr}
 80a0c0a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0c0c:	2214      	movs	r2, #20
 80a0c0e:	2100      	movs	r1, #0
 80a0c10:	f000 fbdf 	bl	80a13d2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0c14:	4b05      	ldr	r3, [pc, #20]	; (80a0c2c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0c16:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0c18:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0c1a:	4b05      	ldr	r3, [pc, #20]	; (80a0c30 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0c1c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0c1e:	f240 1301 	movw	r3, #257	; 0x101
 80a0c22:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0c24:	2381      	movs	r3, #129	; 0x81
 80a0c26:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0c28:	bd10      	pop	{r4, pc}
 80a0c2a:	bf00      	nop
 80a0c2c:	20000334 	.word	0x20000334
 80a0c30:	2000029c 	.word	0x2000029c

080a0c34 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0c34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c36:	4c0e      	ldr	r4, [pc, #56]	; (80a0c70 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0c38:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0c3a:	a801      	add	r0, sp, #4
 80a0c3c:	f7ff ffe4 	bl	80a0c08 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0c40:	6823      	ldr	r3, [r4, #0]
 80a0c42:	07db      	lsls	r3, r3, #31
 80a0c44:	d410      	bmi.n	80a0c68 <_Z17_fetch_usbserial1v+0x34>
 80a0c46:	4620      	mov	r0, r4
 80a0c48:	f7ff fa29 	bl	80a009e <__cxa_guard_acquire>
 80a0c4c:	b160      	cbz	r0, 80a0c68 <_Z17_fetch_usbserial1v+0x34>
 80a0c4e:	aa01      	add	r2, sp, #4
 80a0c50:	2101      	movs	r1, #1
 80a0c52:	4808      	ldr	r0, [pc, #32]	; (80a0c74 <_Z17_fetch_usbserial1v+0x40>)
 80a0c54:	f7ff ff84 	bl	80a0b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	f7ff fa25 	bl	80a00a8 <__cxa_guard_release>
 80a0c5e:	4a06      	ldr	r2, [pc, #24]	; (80a0c78 <_Z17_fetch_usbserial1v+0x44>)
 80a0c60:	4906      	ldr	r1, [pc, #24]	; (80a0c7c <_Z17_fetch_usbserial1v+0x48>)
 80a0c62:	4804      	ldr	r0, [pc, #16]	; (80a0c74 <_Z17_fetch_usbserial1v+0x40>)
 80a0c64:	f000 fa4c 	bl	80a1100 <__aeabi_atexit>
  return _usbserial1;
}
 80a0c68:	4802      	ldr	r0, [pc, #8]	; (80a0c74 <_Z17_fetch_usbserial1v+0x40>)
 80a0c6a:	b006      	add	sp, #24
 80a0c6c:	bd10      	pop	{r4, pc}
 80a0c6e:	bf00      	nop
 80a0c70:	20000298 	.word	0x20000298
 80a0c74:	20000320 	.word	0x20000320
 80a0c78:	200000ac 	.word	0x200000ac
 80a0c7c:	080a0ae1 	.word	0x080a0ae1

080a0c80 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0c80:	4770      	bx	lr

080a0c82 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0c82:	7441      	strb	r1, [r0, #17]
 80a0c84:	4770      	bx	lr

080a0c86 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0c86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0c88:	7c00      	ldrb	r0, [r0, #16]
 80a0c8a:	f7ff fbb3 	bl	80a03f4 <HAL_USART_Available_Data_For_Write>
}
 80a0c8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c92:	bd08      	pop	{r3, pc}

080a0c94 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0c94:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0c96:	7c00      	ldrb	r0, [r0, #16]
 80a0c98:	f7ff fb84 	bl	80a03a4 <HAL_USART_Available_Data>
}
 80a0c9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0ca0:	bd08      	pop	{r3, pc}

080a0ca2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0ca2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0ca4:	7c00      	ldrb	r0, [r0, #16]
 80a0ca6:	f7ff fb8d 	bl	80a03c4 <HAL_USART_Peek_Data>
}
 80a0caa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0cae:	bf28      	it	cs
 80a0cb0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0cb4:	bd08      	pop	{r3, pc}

080a0cb6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0cb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0cb8:	7c00      	ldrb	r0, [r0, #16]
 80a0cba:	f7ff fb7b 	bl	80a03b4 <HAL_USART_Read_Data>
}
 80a0cbe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0cc2:	bf28      	it	cs
 80a0cc4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0cc8:	bd08      	pop	{r3, pc}

080a0cca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0cca:	7c00      	ldrb	r0, [r0, #16]
 80a0ccc:	f7ff bb82 	b.w	80a03d4 <HAL_USART_Flush_Data>

080a0cd0 <_ZN11USARTSerialD0Ev>:
 80a0cd0:	b510      	push	{r4, lr}
 80a0cd2:	4604      	mov	r4, r0
 80a0cd4:	2114      	movs	r1, #20
 80a0cd6:	f000 fa18 	bl	80a110a <_ZdlPvj>
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	bd10      	pop	{r4, pc}

080a0cde <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0cde:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0ce0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0ce2:	4604      	mov	r4, r0
 80a0ce4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0ce6:	b925      	cbnz	r5, 80a0cf2 <_ZN11USARTSerial5writeEh+0x14>
 80a0ce8:	7c00      	ldrb	r0, [r0, #16]
 80a0cea:	f7ff fb83 	bl	80a03f4 <HAL_USART_Available_Data_For_Write>
 80a0cee:	2800      	cmp	r0, #0
 80a0cf0:	dd05      	ble.n	80a0cfe <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0cf2:	4631      	mov	r1, r6
 80a0cf4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0cfa:	f7ff bb4b 	b.w	80a0394 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0cfe:	4628      	mov	r0, r5
 80a0d00:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0d04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0d04:	b510      	push	{r4, lr}
 80a0d06:	4604      	mov	r4, r0
 80a0d08:	4608      	mov	r0, r1
 80a0d0a:	4611      	mov	r1, r2
 80a0d0c:	2200      	movs	r2, #0
 80a0d0e:	6062      	str	r2, [r4, #4]
 80a0d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0d14:	60a2      	str	r2, [r4, #8]
 80a0d16:	4a05      	ldr	r2, [pc, #20]	; (80a0d2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0d18:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0d1a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0d1c:	2201      	movs	r2, #1
 80a0d1e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0d20:	461a      	mov	r2, r3
 80a0d22:	f7ff fb2f 	bl	80a0384 <HAL_USART_Init>
}
 80a0d26:	4620      	mov	r0, r4
 80a0d28:	bd10      	pop	{r4, pc}
 80a0d2a:	bf00      	nop
 80a0d2c:	080a163c 	.word	0x080a163c

080a0d30 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0d30:	7c00      	ldrb	r0, [r0, #16]
 80a0d32:	f7ff bb57 	b.w	80a03e4 <HAL_USART_Is_Enabled>
	...

080a0d38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0d38:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0d3a:	4d0c      	ldr	r5, [pc, #48]	; (80a0d6c <_Z22__fetch_global_Serial1v+0x34>)
 80a0d3c:	6829      	ldr	r1, [r5, #0]
 80a0d3e:	f011 0401 	ands.w	r4, r1, #1
 80a0d42:	d111      	bne.n	80a0d68 <_Z22__fetch_global_Serial1v+0x30>
 80a0d44:	4628      	mov	r0, r5
 80a0d46:	f7ff f9aa 	bl	80a009e <__cxa_guard_acquire>
 80a0d4a:	b168      	cbz	r0, 80a0d68 <_Z22__fetch_global_Serial1v+0x30>
 80a0d4c:	4a08      	ldr	r2, [pc, #32]	; (80a0d70 <_Z22__fetch_global_Serial1v+0x38>)
 80a0d4e:	4621      	mov	r1, r4
 80a0d50:	4b08      	ldr	r3, [pc, #32]	; (80a0d74 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0d52:	4809      	ldr	r0, [pc, #36]	; (80a0d78 <_Z22__fetch_global_Serial1v+0x40>)
 80a0d54:	f7ff ffd6 	bl	80a0d04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0d58:	4628      	mov	r0, r5
 80a0d5a:	f7ff f9a5 	bl	80a00a8 <__cxa_guard_release>
 80a0d5e:	4a07      	ldr	r2, [pc, #28]	; (80a0d7c <_Z22__fetch_global_Serial1v+0x44>)
 80a0d60:	4907      	ldr	r1, [pc, #28]	; (80a0d80 <_Z22__fetch_global_Serial1v+0x48>)
 80a0d62:	4805      	ldr	r0, [pc, #20]	; (80a0d78 <_Z22__fetch_global_Serial1v+0x40>)
 80a0d64:	f000 f9cc 	bl	80a1100 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0d68:	4803      	ldr	r0, [pc, #12]	; (80a0d78 <_Z22__fetch_global_Serial1v+0x40>)
 80a0d6a:	bd38      	pop	{r3, r4, r5, pc}
 80a0d6c:	200004d0 	.word	0x200004d0
 80a0d70:	200004d4 	.word	0x200004d4
 80a0d74:	2000044c 	.word	0x2000044c
 80a0d78:	20000438 	.word	0x20000438
 80a0d7c:	200000ac 	.word	0x200000ac
 80a0d80:	080a0c81 	.word	0x080a0c81

080a0d84 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0d84:	4770      	bx	lr

080a0d86 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d88:	4606      	mov	r6, r0
 80a0d8a:	4615      	mov	r5, r2
 80a0d8c:	460c      	mov	r4, r1
 80a0d8e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0d90:	42bc      	cmp	r4, r7
 80a0d92:	d006      	beq.n	80a0da2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0d94:	6833      	ldr	r3, [r6, #0]
 80a0d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0d9a:	689b      	ldr	r3, [r3, #8]
 80a0d9c:	4630      	mov	r0, r6
 80a0d9e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0da0:	e7f6      	b.n	80a0d90 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0da2:	4628      	mov	r0, r5
 80a0da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0da6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0da6:	2200      	movs	r2, #0
 80a0da8:	7c00      	ldrb	r0, [r0, #16]
 80a0daa:	f7ff bb2b 	b.w	80a0404 <HAL_I2C_Write_Data>

080a0dae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0dae:	2100      	movs	r1, #0
 80a0db0:	7c00      	ldrb	r0, [r0, #16]
 80a0db2:	f7ff bb2f 	b.w	80a0414 <HAL_I2C_Available_Data>

080a0db6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0db6:	2100      	movs	r1, #0
 80a0db8:	7c00      	ldrb	r0, [r0, #16]
 80a0dba:	f7ff bb33 	b.w	80a0424 <HAL_I2C_Read_Data>

080a0dbe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0dbe:	2100      	movs	r1, #0
 80a0dc0:	7c00      	ldrb	r0, [r0, #16]
 80a0dc2:	f7ff bb37 	b.w	80a0434 <HAL_I2C_Peek_Data>

080a0dc6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0dc6:	2100      	movs	r1, #0
 80a0dc8:	7c00      	ldrb	r0, [r0, #16]
 80a0dca:	f7ff bb3b 	b.w	80a0444 <HAL_I2C_Flush_Data>

080a0dce <_ZN7TwoWireD0Ev>:
 80a0dce:	b510      	push	{r4, lr}
 80a0dd0:	4604      	mov	r4, r0
 80a0dd2:	2114      	movs	r1, #20
 80a0dd4:	f000 f999 	bl	80a110a <_ZdlPvj>
 80a0dd8:	4620      	mov	r0, r4
 80a0dda:	bd10      	pop	{r4, pc}

080a0ddc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0ddc:	b510      	push	{r4, lr}
 80a0dde:	4604      	mov	r4, r0
 80a0de0:	4608      	mov	r0, r1
 80a0de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0de6:	60a3      	str	r3, [r4, #8]
 80a0de8:	4b04      	ldr	r3, [pc, #16]	; (80a0dfc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a0dea:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0dec:	7420      	strb	r0, [r4, #16]
 80a0dee:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0df0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0df2:	f7ff fb37 	bl	80a0464 <HAL_I2C_Init>

}
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	bd10      	pop	{r4, pc}
 80a0dfa:	bf00      	nop
 80a0dfc:	080a166c 	.word	0x080a166c

080a0e00 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0e00:	2100      	movs	r1, #0
 80a0e02:	7c00      	ldrb	r0, [r0, #16]
 80a0e04:	f7ff bb26 	b.w	80a0454 <HAL_I2C_Is_Enabled>

080a0e08 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0e08:	2200      	movs	r2, #0
 80a0e0a:	4611      	mov	r1, r2
 80a0e0c:	6840      	ldr	r0, [r0, #4]
 80a0e0e:	f7ff bbb7 	b.w	80a0580 <network_ready>

080a0e12 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e14:	4616      	mov	r6, r2
 80a0e16:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0e18:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0e1a:	460f      	mov	r7, r1
 80a0e1c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0e1e:	2100      	movs	r1, #0
 80a0e20:	a803      	add	r0, sp, #12
 80a0e22:	f000 fad6 	bl	80a13d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e26:	4630      	mov	r0, r6
 80a0e28:	f000 fb04 	bl	80a1434 <strlen>
 80a0e2c:	2500      	movs	r5, #0
 80a0e2e:	9500      	str	r5, [sp, #0]
 80a0e30:	b281      	uxth	r1, r0
 80a0e32:	687b      	ldr	r3, [r7, #4]
 80a0e34:	aa03      	add	r2, sp, #12
 80a0e36:	4630      	mov	r0, r6
 80a0e38:	f7ff fb56 	bl	80a04e8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e3c:	b120      	cbz	r0, 80a0e48 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0e3e:	4629      	mov	r1, r5
 80a0e40:	4620      	mov	r0, r4
 80a0e42:	f7ff fe29 	bl	80a0a98 <_ZN9IPAddressC1Em>
 80a0e46:	e003      	b.n	80a0e50 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0e48:	a903      	add	r1, sp, #12
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	f7ff fe12 	bl	80a0a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0e50:	4620      	mov	r0, r4
 80a0e52:	b009      	add	sp, #36	; 0x24
 80a0e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0e56 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0e56:	2200      	movs	r2, #0
 80a0e58:	4611      	mov	r1, r2
 80a0e5a:	6840      	ldr	r0, [r0, #4]
 80a0e5c:	f7ff bbb0 	b.w	80a05c0 <network_listening>

080a0e60 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0e60:	2200      	movs	r2, #0
 80a0e62:	4611      	mov	r1, r2
 80a0e64:	6840      	ldr	r0, [r0, #4]
 80a0e66:	f7ff bbbb 	b.w	80a05e0 <network_get_listen_timeout>

080a0e6a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0e6a:	2200      	movs	r2, #0
 80a0e6c:	6840      	ldr	r0, [r0, #4]
 80a0e6e:	f7ff bbaf 	b.w	80a05d0 <network_set_listen_timeout>

080a0e72 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0e72:	2200      	movs	r2, #0
 80a0e74:	f081 0101 	eor.w	r1, r1, #1
 80a0e78:	6840      	ldr	r0, [r0, #4]
 80a0e7a:	f7ff bb99 	b.w	80a05b0 <network_listen>

080a0e7e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0e7e:	2300      	movs	r3, #0
 80a0e80:	461a      	mov	r2, r3
 80a0e82:	4619      	mov	r1, r3
 80a0e84:	6840      	ldr	r0, [r0, #4]
 80a0e86:	f7ff bb8b 	b.w	80a05a0 <network_off>

080a0e8a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0e8a:	2200      	movs	r2, #0
 80a0e8c:	4611      	mov	r1, r2
 80a0e8e:	6840      	ldr	r0, [r0, #4]
 80a0e90:	f7ff bb66 	b.w	80a0560 <network_connecting>

080a0e94 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0e94:	2200      	movs	r2, #0
 80a0e96:	2102      	movs	r1, #2
 80a0e98:	6840      	ldr	r0, [r0, #4]
 80a0e9a:	f7ff bb69 	b.w	80a0570 <network_disconnect>

080a0e9e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0e9e:	2300      	movs	r3, #0
 80a0ea0:	461a      	mov	r2, r3
 80a0ea2:	6840      	ldr	r0, [r0, #4]
 80a0ea4:	f7ff bb54 	b.w	80a0550 <network_connect>

080a0ea8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0ea8:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0eaa:	2204      	movs	r2, #4
 80a0eac:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0eae:	4a02      	ldr	r2, [pc, #8]	; (80a0eb8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0eb0:	601a      	str	r2, [r3, #0]
 80a0eb2:	4770      	bx	lr
 80a0eb4:	20000558 	.word	0x20000558
 80a0eb8:	080a1694 	.word	0x080a1694

080a0ebc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0ebc:	2300      	movs	r3, #0
 80a0ebe:	461a      	mov	r2, r3
 80a0ec0:	6840      	ldr	r0, [r0, #4]
 80a0ec2:	f7ff bb45 	b.w	80a0550 <network_connect>

080a0ec6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0ec6:	2200      	movs	r2, #0
 80a0ec8:	2102      	movs	r1, #2
 80a0eca:	6840      	ldr	r0, [r0, #4]
 80a0ecc:	f7ff bb50 	b.w	80a0570 <network_disconnect>

080a0ed0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0ed0:	2200      	movs	r2, #0
 80a0ed2:	4611      	mov	r1, r2
 80a0ed4:	6840      	ldr	r0, [r0, #4]
 80a0ed6:	f7ff bb43 	b.w	80a0560 <network_connecting>

080a0eda <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0eda:	2200      	movs	r2, #0
 80a0edc:	4611      	mov	r1, r2
 80a0ede:	6840      	ldr	r0, [r0, #4]
 80a0ee0:	f7ff bb4e 	b.w	80a0580 <network_ready>

080a0ee4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0ee4:	2300      	movs	r3, #0
 80a0ee6:	461a      	mov	r2, r3
 80a0ee8:	4619      	mov	r1, r3
 80a0eea:	6840      	ldr	r0, [r0, #4]
 80a0eec:	f7ff bb50 	b.w	80a0590 <network_on>

080a0ef0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0ef0:	2300      	movs	r3, #0
 80a0ef2:	461a      	mov	r2, r3
 80a0ef4:	4619      	mov	r1, r3
 80a0ef6:	6840      	ldr	r0, [r0, #4]
 80a0ef8:	f7ff bb52 	b.w	80a05a0 <network_off>

080a0efc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0efc:	2200      	movs	r2, #0
 80a0efe:	f081 0101 	eor.w	r1, r1, #1
 80a0f02:	6840      	ldr	r0, [r0, #4]
 80a0f04:	f7ff bb54 	b.w	80a05b0 <network_listen>

080a0f08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0f08:	2200      	movs	r2, #0
 80a0f0a:	6840      	ldr	r0, [r0, #4]
 80a0f0c:	f7ff bb60 	b.w	80a05d0 <network_set_listen_timeout>

080a0f10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0f10:	2200      	movs	r2, #0
 80a0f12:	4611      	mov	r1, r2
 80a0f14:	6840      	ldr	r0, [r0, #4]
 80a0f16:	f7ff bb63 	b.w	80a05e0 <network_get_listen_timeout>

080a0f1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0f1a:	2200      	movs	r2, #0
 80a0f1c:	4611      	mov	r1, r2
 80a0f1e:	6840      	ldr	r0, [r0, #4]
 80a0f20:	f7ff bb4e 	b.w	80a05c0 <network_listening>

080a0f24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0f24:	b570      	push	{r4, r5, r6, lr}
 80a0f26:	4616      	mov	r6, r2
 80a0f28:	b08e      	sub	sp, #56	; 0x38
 80a0f2a:	4604      	mov	r4, r0
    IPAddress addr;
 80a0f2c:	a808      	add	r0, sp, #32
 80a0f2e:	f7ff fd93 	bl	80a0a58 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0f32:	2211      	movs	r2, #17
 80a0f34:	2100      	movs	r1, #0
 80a0f36:	a803      	add	r0, sp, #12
 80a0f38:	f000 fa4b 	bl	80a13d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0f3c:	4630      	mov	r0, r6
 80a0f3e:	f000 fa79 	bl	80a1434 <strlen>
 80a0f42:	2500      	movs	r5, #0
 80a0f44:	4b0a      	ldr	r3, [pc, #40]	; (80a0f70 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0f46:	9500      	str	r5, [sp, #0]
 80a0f48:	b281      	uxth	r1, r0
 80a0f4a:	685b      	ldr	r3, [r3, #4]
 80a0f4c:	aa03      	add	r2, sp, #12
 80a0f4e:	4630      	mov	r0, r6
 80a0f50:	f7ff faca 	bl	80a04e8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0f54:	b120      	cbz	r0, 80a0f60 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0f56:	4629      	mov	r1, r5
 80a0f58:	4620      	mov	r0, r4
 80a0f5a:	f7ff fd9d 	bl	80a0a98 <_ZN9IPAddressC1Em>
 80a0f5e:	e003      	b.n	80a0f68 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0f60:	a903      	add	r1, sp, #12
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	f7ff fd86 	bl	80a0a74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0f68:	4620      	mov	r0, r4
 80a0f6a:	b00e      	add	sp, #56	; 0x38
 80a0f6c:	bd70      	pop	{r4, r5, r6, pc}
 80a0f6e:	bf00      	nop
 80a0f70:	20000558 	.word	0x20000558

080a0f74 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0f74:	4b02      	ldr	r3, [pc, #8]	; (80a0f80 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0f76:	4a03      	ldr	r2, [pc, #12]	; (80a0f84 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0f78:	601a      	str	r2, [r3, #0]
 80a0f7a:	2200      	movs	r2, #0
 80a0f7c:	605a      	str	r2, [r3, #4]
 80a0f7e:	4770      	bx	lr
 80a0f80:	20000560 	.word	0x20000560
 80a0f84:	080a16c8 	.word	0x080a16c8

080a0f88 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0f88:	b510      	push	{r4, lr}
 80a0f8a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0f8c:	480f      	ldr	r0, [pc, #60]	; (80a0fcc <pinAvailable+0x44>)
 80a0f8e:	f7ff fb83 	bl	80a0698 <_ZN8SPIClass9isEnabledEv>
 80a0f92:	b128      	cbz	r0, 80a0fa0 <pinAvailable+0x18>
 80a0f94:	f1a4 030d 	sub.w	r3, r4, #13
 80a0f98:	2b02      	cmp	r3, #2
 80a0f9a:	d801      	bhi.n	80a0fa0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0f9c:	2000      	movs	r0, #0
 80a0f9e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0fa0:	f000 f88e 	bl	80a10c0 <_Z19__fetch_global_Wirev>
 80a0fa4:	f7ff ff2c 	bl	80a0e00 <_ZN7TwoWire9isEnabledEv>
 80a0fa8:	b108      	cbz	r0, 80a0fae <pinAvailable+0x26>
 80a0faa:	2c01      	cmp	r4, #1
 80a0fac:	d9f6      	bls.n	80a0f9c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0fae:	f7ff fec3 	bl	80a0d38 <_Z22__fetch_global_Serial1v>
 80a0fb2:	f7ff febd 	bl	80a0d30 <_ZN11USARTSerial9isEnabledEv>
 80a0fb6:	b118      	cbz	r0, 80a0fc0 <pinAvailable+0x38>
 80a0fb8:	f1a4 0312 	sub.w	r3, r4, #18
 80a0fbc:	2b01      	cmp	r3, #1
 80a0fbe:	d9ed      	bls.n	80a0f9c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0fc0:	2c17      	cmp	r4, #23
 80a0fc2:	bf8c      	ite	hi
 80a0fc4:	2000      	movhi	r0, #0
 80a0fc6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0fc8:	bd10      	pop	{r4, pc}
 80a0fca:	bf00      	nop
 80a0fcc:	20000568 	.word	0x20000568

080a0fd0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0fd0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0fd2:	b538      	push	{r3, r4, r5, lr}
 80a0fd4:	4604      	mov	r4, r0
 80a0fd6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0fd8:	d80a      	bhi.n	80a0ff0 <pinMode+0x20>
 80a0fda:	29ff      	cmp	r1, #255	; 0xff
 80a0fdc:	d008      	beq.n	80a0ff0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0fde:	f7ff ffd3 	bl	80a0f88 <pinAvailable>
 80a0fe2:	b128      	cbz	r0, 80a0ff0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0fe4:	4629      	mov	r1, r5
 80a0fe6:	4620      	mov	r0, r4
}
 80a0fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0fec:	f7ff b972 	b.w	80a02d4 <HAL_Pin_Mode>
 80a0ff0:	bd38      	pop	{r3, r4, r5, pc}

080a0ff2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0ff2:	b538      	push	{r3, r4, r5, lr}
 80a0ff4:	4604      	mov	r4, r0
 80a0ff6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0ff8:	f7ff f974 	bl	80a02e4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0ffc:	28ff      	cmp	r0, #255	; 0xff
 80a0ffe:	d010      	beq.n	80a1022 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1000:	2806      	cmp	r0, #6
 80a1002:	d804      	bhi.n	80a100e <digitalWrite+0x1c>
 80a1004:	234d      	movs	r3, #77	; 0x4d
 80a1006:	fa23 f000 	lsr.w	r0, r3, r0
 80a100a:	07c3      	lsls	r3, r0, #31
 80a100c:	d409      	bmi.n	80a1022 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a100e:	4620      	mov	r0, r4
 80a1010:	f7ff ffba 	bl	80a0f88 <pinAvailable>
 80a1014:	b128      	cbz	r0, 80a1022 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1016:	4629      	mov	r1, r5
 80a1018:	4620      	mov	r0, r4
}
 80a101a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a101e:	f7ff b969 	b.w	80a02f4 <HAL_GPIO_Write>
 80a1022:	bd38      	pop	{r3, r4, r5, pc}

080a1024 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1024:	b510      	push	{r4, lr}
 80a1026:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1028:	f7ff f95c 	bl	80a02e4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a102c:	3804      	subs	r0, #4
 80a102e:	b2c0      	uxtb	r0, r0
 80a1030:	2801      	cmp	r0, #1
 80a1032:	d908      	bls.n	80a1046 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1034:	4620      	mov	r0, r4
 80a1036:	f7ff ffa7 	bl	80a0f88 <pinAvailable>
 80a103a:	b120      	cbz	r0, 80a1046 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a103c:	4620      	mov	r0, r4
}
 80a103e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1042:	f7ff b95f 	b.w	80a0304 <HAL_GPIO_Read>
}
 80a1046:	2000      	movs	r0, #0
 80a1048:	bd10      	pop	{r4, pc}
	...

080a104c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a104c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a104e:	4c0c      	ldr	r4, [pc, #48]	; (80a1080 <_GLOBAL__sub_I_SPI+0x34>)
 80a1050:	4e0c      	ldr	r6, [pc, #48]	; (80a1084 <_GLOBAL__sub_I_SPI+0x38>)
 80a1052:	4d0d      	ldr	r5, [pc, #52]	; (80a1088 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1054:	2100      	movs	r1, #0
 80a1056:	4620      	mov	r0, r4
 80a1058:	f7ff fb0a 	bl	80a0670 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a105c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a105e:	4c0b      	ldr	r4, [pc, #44]	; (80a108c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1060:	4632      	mov	r2, r6
 80a1062:	4629      	mov	r1, r5
 80a1064:	f000 f84c 	bl	80a1100 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1068:	2101      	movs	r1, #1
 80a106a:	4620      	mov	r0, r4
 80a106c:	f7ff fb00 	bl	80a0670 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1070:	4632      	mov	r2, r6
 80a1072:	4629      	mov	r1, r5
 80a1074:	4620      	mov	r0, r4
 80a1076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a107a:	f000 b841 	b.w	80a1100 <__aeabi_atexit>
 80a107e:	bf00      	nop
 80a1080:	20000568 	.word	0x20000568
 80a1084:	200000ac 	.word	0x200000ac
 80a1088:	080a0661 	.word	0x080a0661
 80a108c:	20000578 	.word	0x20000578

080a1090 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1090:	b513      	push	{r0, r1, r4, lr}
 80a1092:	4c08      	ldr	r4, [pc, #32]	; (80a10b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1094:	2300      	movs	r3, #0
 80a1096:	461a      	mov	r2, r3
 80a1098:	4619      	mov	r1, r3
 80a109a:	9300      	str	r3, [sp, #0]
 80a109c:	4620      	mov	r0, r4
 80a109e:	f7ff fd11 	bl	80a0ac4 <_ZN9IPAddressC1Ehhhh>
 80a10a2:	4620      	mov	r0, r4
 80a10a4:	4a04      	ldr	r2, [pc, #16]	; (80a10b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a10a6:	4905      	ldr	r1, [pc, #20]	; (80a10bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a10a8:	b002      	add	sp, #8
 80a10aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a10ae:	f000 b827 	b.w	80a1100 <__aeabi_atexit>
 80a10b2:	bf00      	nop
 80a10b4:	2000058c 	.word	0x2000058c
 80a10b8:	200000ac 	.word	0x200000ac
 80a10bc:	080a0a15 	.word	0x080a0a15

080a10c0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a10c0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a10c2:	4d0b      	ldr	r5, [pc, #44]	; (80a10f0 <_Z19__fetch_global_Wirev+0x30>)
 80a10c4:	6829      	ldr	r1, [r5, #0]
 80a10c6:	f011 0401 	ands.w	r4, r1, #1
 80a10ca:	d10f      	bne.n	80a10ec <_Z19__fetch_global_Wirev+0x2c>
 80a10cc:	4628      	mov	r0, r5
 80a10ce:	f7fe ffe6 	bl	80a009e <__cxa_guard_acquire>
 80a10d2:	b158      	cbz	r0, 80a10ec <_Z19__fetch_global_Wirev+0x2c>
 80a10d4:	4621      	mov	r1, r4
 80a10d6:	4807      	ldr	r0, [pc, #28]	; (80a10f4 <_Z19__fetch_global_Wirev+0x34>)
 80a10d8:	f7ff fe80 	bl	80a0ddc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a10dc:	4628      	mov	r0, r5
 80a10de:	f7fe ffe3 	bl	80a00a8 <__cxa_guard_release>
 80a10e2:	4a05      	ldr	r2, [pc, #20]	; (80a10f8 <_Z19__fetch_global_Wirev+0x38>)
 80a10e4:	4905      	ldr	r1, [pc, #20]	; (80a10fc <_Z19__fetch_global_Wirev+0x3c>)
 80a10e6:	4803      	ldr	r0, [pc, #12]	; (80a10f4 <_Z19__fetch_global_Wirev+0x34>)
 80a10e8:	f000 f80a 	bl	80a1100 <__aeabi_atexit>
	return wire;
}
 80a10ec:	4801      	ldr	r0, [pc, #4]	; (80a10f4 <_Z19__fetch_global_Wirev+0x34>)
 80a10ee:	bd38      	pop	{r3, r4, r5, pc}
 80a10f0:	200005a4 	.word	0x200005a4
 80a10f4:	200005a8 	.word	0x200005a8
 80a10f8:	200000ac 	.word	0x200000ac
 80a10fc:	080a0d85 	.word	0x080a0d85

080a1100 <__aeabi_atexit>:
 80a1100:	460b      	mov	r3, r1
 80a1102:	4601      	mov	r1, r0
 80a1104:	4618      	mov	r0, r3
 80a1106:	f000 b94b 	b.w	80a13a0 <__cxa_atexit>

080a110a <_ZdlPvj>:
 80a110a:	f7fe bfc6 	b.w	80a009a <_ZdlPv>
	...

080a1110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1110:	4b18      	ldr	r3, [pc, #96]	; (80a1174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d1      	lsls	r1, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4b16      	ldr	r3, [pc, #88]	; (80a1178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a111e:	681a      	ldr	r2, [r3, #0]
 80a1120:	07d2      	lsls	r2, r2, #31
 80a1122:	bf5c      	itt	pl
 80a1124:	2201      	movpl	r2, #1
 80a1126:	601a      	strpl	r2, [r3, #0]
 80a1128:	4b14      	ldr	r3, [pc, #80]	; (80a117c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a112a:	681a      	ldr	r2, [r3, #0]
 80a112c:	07d0      	lsls	r0, r2, #31
 80a112e:	bf5c      	itt	pl
 80a1130:	2201      	movpl	r2, #1
 80a1132:	601a      	strpl	r2, [r3, #0]
 80a1134:	4b12      	ldr	r3, [pc, #72]	; (80a1180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1136:	681a      	ldr	r2, [r3, #0]
 80a1138:	07d1      	lsls	r1, r2, #31
 80a113a:	bf5c      	itt	pl
 80a113c:	2201      	movpl	r2, #1
 80a113e:	601a      	strpl	r2, [r3, #0]
 80a1140:	4b10      	ldr	r3, [pc, #64]	; (80a1184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1142:	681a      	ldr	r2, [r3, #0]
 80a1144:	07d2      	lsls	r2, r2, #31
 80a1146:	bf5c      	itt	pl
 80a1148:	2201      	movpl	r2, #1
 80a114a:	601a      	strpl	r2, [r3, #0]
 80a114c:	4b0e      	ldr	r3, [pc, #56]	; (80a1188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	07d0      	lsls	r0, r2, #31
 80a1152:	bf5c      	itt	pl
 80a1154:	2201      	movpl	r2, #1
 80a1156:	601a      	strpl	r2, [r3, #0]
 80a1158:	4b0c      	ldr	r3, [pc, #48]	; (80a118c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a115a:	681a      	ldr	r2, [r3, #0]
 80a115c:	07d1      	lsls	r1, r2, #31
 80a115e:	bf5c      	itt	pl
 80a1160:	2201      	movpl	r2, #1
 80a1162:	601a      	strpl	r2, [r3, #0]
 80a1164:	4b0a      	ldr	r3, [pc, #40]	; (80a1190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1166:	681a      	ldr	r2, [r3, #0]
 80a1168:	07d2      	lsls	r2, r2, #31
 80a116a:	bf5c      	itt	pl
 80a116c:	2201      	movpl	r2, #1
 80a116e:	601a      	strpl	r2, [r3, #0]
 80a1170:	4770      	bx	lr
 80a1172:	bf00      	nop
 80a1174:	200005d8 	.word	0x200005d8
 80a1178:	200005d4 	.word	0x200005d4
 80a117c:	200005d0 	.word	0x200005d0
 80a1180:	200005cc 	.word	0x200005cc
 80a1184:	200005c8 	.word	0x200005c8
 80a1188:	200005c4 	.word	0x200005c4
 80a118c:	200005c0 	.word	0x200005c0
 80a1190:	200005bc 	.word	0x200005bc

080a1194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1194:	4b24      	ldr	r3, [pc, #144]	; (80a1228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1196:	681a      	ldr	r2, [r3, #0]
 80a1198:	07d0      	lsls	r0, r2, #31
 80a119a:	bf5c      	itt	pl
 80a119c:	2201      	movpl	r2, #1
 80a119e:	601a      	strpl	r2, [r3, #0]
 80a11a0:	4b22      	ldr	r3, [pc, #136]	; (80a122c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a11a2:	681a      	ldr	r2, [r3, #0]
 80a11a4:	07d1      	lsls	r1, r2, #31
 80a11a6:	bf5c      	itt	pl
 80a11a8:	2201      	movpl	r2, #1
 80a11aa:	601a      	strpl	r2, [r3, #0]
 80a11ac:	4b20      	ldr	r3, [pc, #128]	; (80a1230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a11ae:	681a      	ldr	r2, [r3, #0]
 80a11b0:	07d2      	lsls	r2, r2, #31
 80a11b2:	bf5c      	itt	pl
 80a11b4:	2201      	movpl	r2, #1
 80a11b6:	601a      	strpl	r2, [r3, #0]
 80a11b8:	4b1e      	ldr	r3, [pc, #120]	; (80a1234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a11ba:	681a      	ldr	r2, [r3, #0]
 80a11bc:	07d0      	lsls	r0, r2, #31
 80a11be:	bf5c      	itt	pl
 80a11c0:	2201      	movpl	r2, #1
 80a11c2:	601a      	strpl	r2, [r3, #0]
 80a11c4:	4b1c      	ldr	r3, [pc, #112]	; (80a1238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a11c6:	681a      	ldr	r2, [r3, #0]
 80a11c8:	07d1      	lsls	r1, r2, #31
 80a11ca:	bf5c      	itt	pl
 80a11cc:	2201      	movpl	r2, #1
 80a11ce:	601a      	strpl	r2, [r3, #0]
 80a11d0:	4b1a      	ldr	r3, [pc, #104]	; (80a123c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a11d2:	681a      	ldr	r2, [r3, #0]
 80a11d4:	07d2      	lsls	r2, r2, #31
 80a11d6:	bf5c      	itt	pl
 80a11d8:	2201      	movpl	r2, #1
 80a11da:	601a      	strpl	r2, [r3, #0]
 80a11dc:	4b18      	ldr	r3, [pc, #96]	; (80a1240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a11de:	681a      	ldr	r2, [r3, #0]
 80a11e0:	07d0      	lsls	r0, r2, #31
 80a11e2:	bf5c      	itt	pl
 80a11e4:	2201      	movpl	r2, #1
 80a11e6:	601a      	strpl	r2, [r3, #0]
 80a11e8:	4b16      	ldr	r3, [pc, #88]	; (80a1244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a11ea:	681a      	ldr	r2, [r3, #0]
 80a11ec:	07d1      	lsls	r1, r2, #31
 80a11ee:	bf5c      	itt	pl
 80a11f0:	2201      	movpl	r2, #1
 80a11f2:	601a      	strpl	r2, [r3, #0]
 80a11f4:	4b14      	ldr	r3, [pc, #80]	; (80a1248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a11f6:	681a      	ldr	r2, [r3, #0]
 80a11f8:	07d2      	lsls	r2, r2, #31
 80a11fa:	bf5c      	itt	pl
 80a11fc:	2201      	movpl	r2, #1
 80a11fe:	601a      	strpl	r2, [r3, #0]
 80a1200:	4b12      	ldr	r3, [pc, #72]	; (80a124c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1202:	681a      	ldr	r2, [r3, #0]
 80a1204:	07d0      	lsls	r0, r2, #31
 80a1206:	bf5c      	itt	pl
 80a1208:	2201      	movpl	r2, #1
 80a120a:	601a      	strpl	r2, [r3, #0]
 80a120c:	4b10      	ldr	r3, [pc, #64]	; (80a1250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a120e:	681a      	ldr	r2, [r3, #0]
 80a1210:	07d1      	lsls	r1, r2, #31
 80a1212:	bf5c      	itt	pl
 80a1214:	2201      	movpl	r2, #1
 80a1216:	601a      	strpl	r2, [r3, #0]
 80a1218:	4b0e      	ldr	r3, [pc, #56]	; (80a1254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a121a:	681a      	ldr	r2, [r3, #0]
 80a121c:	07d2      	lsls	r2, r2, #31
 80a121e:	bf5c      	itt	pl
 80a1220:	2201      	movpl	r2, #1
 80a1222:	601a      	strpl	r2, [r3, #0]
 80a1224:	4770      	bx	lr
 80a1226:	bf00      	nop
 80a1228:	20000608 	.word	0x20000608
 80a122c:	20000604 	.word	0x20000604
 80a1230:	20000600 	.word	0x20000600
 80a1234:	200005fc 	.word	0x200005fc
 80a1238:	200005f8 	.word	0x200005f8
 80a123c:	200005f4 	.word	0x200005f4
 80a1240:	200005f0 	.word	0x200005f0
 80a1244:	200005ec 	.word	0x200005ec
 80a1248:	200005e8 	.word	0x200005e8
 80a124c:	200005e4 	.word	0x200005e4
 80a1250:	200005e0 	.word	0x200005e0
 80a1254:	200005dc 	.word	0x200005dc

080a1258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1258:	4b24      	ldr	r3, [pc, #144]	; (80a12ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a125a:	681a      	ldr	r2, [r3, #0]
 80a125c:	07d0      	lsls	r0, r2, #31
 80a125e:	bf5c      	itt	pl
 80a1260:	2201      	movpl	r2, #1
 80a1262:	601a      	strpl	r2, [r3, #0]
 80a1264:	4b22      	ldr	r3, [pc, #136]	; (80a12f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1266:	681a      	ldr	r2, [r3, #0]
 80a1268:	07d1      	lsls	r1, r2, #31
 80a126a:	bf5c      	itt	pl
 80a126c:	2201      	movpl	r2, #1
 80a126e:	601a      	strpl	r2, [r3, #0]
 80a1270:	4b20      	ldr	r3, [pc, #128]	; (80a12f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1272:	681a      	ldr	r2, [r3, #0]
 80a1274:	07d2      	lsls	r2, r2, #31
 80a1276:	bf5c      	itt	pl
 80a1278:	2201      	movpl	r2, #1
 80a127a:	601a      	strpl	r2, [r3, #0]
 80a127c:	4b1e      	ldr	r3, [pc, #120]	; (80a12f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a127e:	681a      	ldr	r2, [r3, #0]
 80a1280:	07d0      	lsls	r0, r2, #31
 80a1282:	bf5c      	itt	pl
 80a1284:	2201      	movpl	r2, #1
 80a1286:	601a      	strpl	r2, [r3, #0]
 80a1288:	4b1c      	ldr	r3, [pc, #112]	; (80a12fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a128a:	681a      	ldr	r2, [r3, #0]
 80a128c:	07d1      	lsls	r1, r2, #31
 80a128e:	bf5c      	itt	pl
 80a1290:	2201      	movpl	r2, #1
 80a1292:	601a      	strpl	r2, [r3, #0]
 80a1294:	4b1a      	ldr	r3, [pc, #104]	; (80a1300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1296:	681a      	ldr	r2, [r3, #0]
 80a1298:	07d2      	lsls	r2, r2, #31
 80a129a:	bf5c      	itt	pl
 80a129c:	2201      	movpl	r2, #1
 80a129e:	601a      	strpl	r2, [r3, #0]
 80a12a0:	4b18      	ldr	r3, [pc, #96]	; (80a1304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a12a2:	681a      	ldr	r2, [r3, #0]
 80a12a4:	07d0      	lsls	r0, r2, #31
 80a12a6:	bf5c      	itt	pl
 80a12a8:	2201      	movpl	r2, #1
 80a12aa:	601a      	strpl	r2, [r3, #0]
 80a12ac:	4b16      	ldr	r3, [pc, #88]	; (80a1308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a12ae:	681a      	ldr	r2, [r3, #0]
 80a12b0:	07d1      	lsls	r1, r2, #31
 80a12b2:	bf5c      	itt	pl
 80a12b4:	2201      	movpl	r2, #1
 80a12b6:	601a      	strpl	r2, [r3, #0]
 80a12b8:	4b14      	ldr	r3, [pc, #80]	; (80a130c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a12ba:	681a      	ldr	r2, [r3, #0]
 80a12bc:	07d2      	lsls	r2, r2, #31
 80a12be:	bf5c      	itt	pl
 80a12c0:	2201      	movpl	r2, #1
 80a12c2:	601a      	strpl	r2, [r3, #0]
 80a12c4:	4b12      	ldr	r3, [pc, #72]	; (80a1310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a12c6:	681a      	ldr	r2, [r3, #0]
 80a12c8:	07d0      	lsls	r0, r2, #31
 80a12ca:	bf5c      	itt	pl
 80a12cc:	2201      	movpl	r2, #1
 80a12ce:	601a      	strpl	r2, [r3, #0]
 80a12d0:	4b10      	ldr	r3, [pc, #64]	; (80a1314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a12d2:	681a      	ldr	r2, [r3, #0]
 80a12d4:	07d1      	lsls	r1, r2, #31
 80a12d6:	bf5c      	itt	pl
 80a12d8:	2201      	movpl	r2, #1
 80a12da:	601a      	strpl	r2, [r3, #0]
 80a12dc:	4b0e      	ldr	r3, [pc, #56]	; (80a1318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a12de:	681a      	ldr	r2, [r3, #0]
 80a12e0:	07d2      	lsls	r2, r2, #31
 80a12e2:	bf5c      	itt	pl
 80a12e4:	2201      	movpl	r2, #1
 80a12e6:	601a      	strpl	r2, [r3, #0]
 80a12e8:	4770      	bx	lr
 80a12ea:	bf00      	nop
 80a12ec:	20000638 	.word	0x20000638
 80a12f0:	20000634 	.word	0x20000634
 80a12f4:	20000630 	.word	0x20000630
 80a12f8:	2000062c 	.word	0x2000062c
 80a12fc:	20000628 	.word	0x20000628
 80a1300:	20000624 	.word	0x20000624
 80a1304:	20000620 	.word	0x20000620
 80a1308:	2000061c 	.word	0x2000061c
 80a130c:	20000618 	.word	0x20000618
 80a1310:	20000614 	.word	0x20000614
 80a1314:	20000610 	.word	0x20000610
 80a1318:	2000060c 	.word	0x2000060c

080a131c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a131c:	4b18      	ldr	r3, [pc, #96]	; (80a1380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a131e:	681a      	ldr	r2, [r3, #0]
 80a1320:	07d1      	lsls	r1, r2, #31
 80a1322:	bf5c      	itt	pl
 80a1324:	2201      	movpl	r2, #1
 80a1326:	601a      	strpl	r2, [r3, #0]
 80a1328:	4b16      	ldr	r3, [pc, #88]	; (80a1384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a132a:	681a      	ldr	r2, [r3, #0]
 80a132c:	07d2      	lsls	r2, r2, #31
 80a132e:	bf5c      	itt	pl
 80a1330:	2201      	movpl	r2, #1
 80a1332:	601a      	strpl	r2, [r3, #0]
 80a1334:	4b14      	ldr	r3, [pc, #80]	; (80a1388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1336:	681a      	ldr	r2, [r3, #0]
 80a1338:	07d0      	lsls	r0, r2, #31
 80a133a:	bf5c      	itt	pl
 80a133c:	2201      	movpl	r2, #1
 80a133e:	601a      	strpl	r2, [r3, #0]
 80a1340:	4b12      	ldr	r3, [pc, #72]	; (80a138c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1342:	681a      	ldr	r2, [r3, #0]
 80a1344:	07d1      	lsls	r1, r2, #31
 80a1346:	bf5c      	itt	pl
 80a1348:	2201      	movpl	r2, #1
 80a134a:	601a      	strpl	r2, [r3, #0]
 80a134c:	4b10      	ldr	r3, [pc, #64]	; (80a1390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a134e:	681a      	ldr	r2, [r3, #0]
 80a1350:	07d2      	lsls	r2, r2, #31
 80a1352:	bf5c      	itt	pl
 80a1354:	2201      	movpl	r2, #1
 80a1356:	601a      	strpl	r2, [r3, #0]
 80a1358:	4b0e      	ldr	r3, [pc, #56]	; (80a1394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a135a:	681a      	ldr	r2, [r3, #0]
 80a135c:	07d0      	lsls	r0, r2, #31
 80a135e:	bf5c      	itt	pl
 80a1360:	2201      	movpl	r2, #1
 80a1362:	601a      	strpl	r2, [r3, #0]
 80a1364:	4b0c      	ldr	r3, [pc, #48]	; (80a1398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1366:	681a      	ldr	r2, [r3, #0]
 80a1368:	07d1      	lsls	r1, r2, #31
 80a136a:	bf5c      	itt	pl
 80a136c:	2201      	movpl	r2, #1
 80a136e:	601a      	strpl	r2, [r3, #0]
 80a1370:	4b0a      	ldr	r3, [pc, #40]	; (80a139c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1372:	681a      	ldr	r2, [r3, #0]
 80a1374:	07d2      	lsls	r2, r2, #31
 80a1376:	bf5c      	itt	pl
 80a1378:	2201      	movpl	r2, #1
 80a137a:	601a      	strpl	r2, [r3, #0]
 80a137c:	4770      	bx	lr
 80a137e:	bf00      	nop
 80a1380:	20000658 	.word	0x20000658
 80a1384:	20000654 	.word	0x20000654
 80a1388:	20000650 	.word	0x20000650
 80a138c:	2000064c 	.word	0x2000064c
 80a1390:	20000648 	.word	0x20000648
 80a1394:	20000644 	.word	0x20000644
 80a1398:	20000640 	.word	0x20000640
 80a139c:	2000063c 	.word	0x2000063c

080a13a0 <__cxa_atexit>:
 80a13a0:	b510      	push	{r4, lr}
 80a13a2:	4c05      	ldr	r4, [pc, #20]	; (80a13b8 <__cxa_atexit+0x18>)
 80a13a4:	4613      	mov	r3, r2
 80a13a6:	b12c      	cbz	r4, 80a13b4 <__cxa_atexit+0x14>
 80a13a8:	460a      	mov	r2, r1
 80a13aa:	4601      	mov	r1, r0
 80a13ac:	2002      	movs	r0, #2
 80a13ae:	f3af 8000 	nop.w
 80a13b2:	bd10      	pop	{r4, pc}
 80a13b4:	4620      	mov	r0, r4
 80a13b6:	bd10      	pop	{r4, pc}
 80a13b8:	00000000 	.word	0x00000000

080a13bc <memcpy>:
 80a13bc:	b510      	push	{r4, lr}
 80a13be:	1e43      	subs	r3, r0, #1
 80a13c0:	440a      	add	r2, r1
 80a13c2:	4291      	cmp	r1, r2
 80a13c4:	d004      	beq.n	80a13d0 <memcpy+0x14>
 80a13c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a13ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a13ce:	e7f8      	b.n	80a13c2 <memcpy+0x6>
 80a13d0:	bd10      	pop	{r4, pc}

080a13d2 <memset>:
 80a13d2:	4603      	mov	r3, r0
 80a13d4:	4402      	add	r2, r0
 80a13d6:	4293      	cmp	r3, r2
 80a13d8:	d002      	beq.n	80a13e0 <memset+0xe>
 80a13da:	f803 1b01 	strb.w	r1, [r3], #1
 80a13de:	e7fa      	b.n	80a13d6 <memset+0x4>
 80a13e0:	4770      	bx	lr
	...

080a13e4 <srand>:
 80a13e4:	b538      	push	{r3, r4, r5, lr}
 80a13e6:	4b12      	ldr	r3, [pc, #72]	; (80a1430 <srand+0x4c>)
 80a13e8:	4605      	mov	r5, r0
 80a13ea:	681c      	ldr	r4, [r3, #0]
 80a13ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a13ee:	b9d3      	cbnz	r3, 80a1426 <srand+0x42>
 80a13f0:	2018      	movs	r0, #24
 80a13f2:	f7ff f91d 	bl	80a0630 <malloc>
 80a13f6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a13fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80a13fc:	8003      	strh	r3, [r0, #0]
 80a13fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1402:	8043      	strh	r3, [r0, #2]
 80a1404:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1408:	8083      	strh	r3, [r0, #4]
 80a140a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a140e:	80c3      	strh	r3, [r0, #6]
 80a1410:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1414:	8103      	strh	r3, [r0, #8]
 80a1416:	2305      	movs	r3, #5
 80a1418:	8143      	strh	r3, [r0, #10]
 80a141a:	230b      	movs	r3, #11
 80a141c:	8183      	strh	r3, [r0, #12]
 80a141e:	2201      	movs	r2, #1
 80a1420:	2300      	movs	r3, #0
 80a1422:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1428:	2200      	movs	r2, #0
 80a142a:	611d      	str	r5, [r3, #16]
 80a142c:	615a      	str	r2, [r3, #20]
 80a142e:	bd38      	pop	{r3, r4, r5, pc}
 80a1430:	200000a8 	.word	0x200000a8

080a1434 <strlen>:
 80a1434:	4603      	mov	r3, r0
 80a1436:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a143a:	2a00      	cmp	r2, #0
 80a143c:	d1fb      	bne.n	80a1436 <strlen+0x2>
 80a143e:	1a18      	subs	r0, r3, r0
 80a1440:	3801      	subs	r0, #1
 80a1442:	4770      	bx	lr

080a1444 <dynalib_user>:
 80a1444:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1454:	0000 0000 227b 7563 7272 6e65 5474 6d69     ....{"currentTim
 80a1464:	2265 253a 2c64 2220 7473 6f72 656b 5373     e":%d, "strokesS
 80a1474:	6e69 6563 614c 7473 7550 6c62 7369 2268     inceLastPublish"
 80a1484:	253a 7d64 000a 5543 5252 4e45 2054 5845     :%d}..CURRENT EX
 80a1494:	4d41 4c50 2045 4143 4544 434e 3a45 2520     AMPLE CADENCE: %
 80a14a4:	0a64 5300 6174 7472 4220 7475 6f74 206e     d..Start Button 
 80a14b4:	7250 7365 6573 0064 7453 706f 4220 7475     Pressed.Stop But
 80a14c4:	6f74 206e 7250 7365 6573 0064               ton Pressed.

080a14d0 <_ZTV8SPIClass>:
	...
 80a14d8:	0661 080a 0663 080a 6162 6475 5300 7265     a...c...baud.Ser
 80a14e8:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a14f8:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a1508:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a1518:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a1528:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a1538:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a1548:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a1558:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 80a1568:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 80a1578:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 80a1588:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 80a1598:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80a15a8:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a15b8:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a15c8:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a15d8:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a15e8:	6974 656d 0000 0000                         time....

080a15f0 <_ZTV9IPAddress>:
	...
 80a15f8:	0a25 080a 0a15 080a 0a17 080a               %...........

080a1604 <_ZTV9USBSerial>:
	...
 80a160c:	0ae1 080a 0b31 080a 0b3f 080a 06b9 080a     ....1...?.......
 80a161c:	0b1d 080a 0ae3 080a 0af9 080a 0b2b 080a     ............+...
 80a162c:	0b0f 080a 0add 080a                         ........

080a1634 <_ZTV11USARTSerial>:
	...
 80a163c:	0c81 080a 0cd1 080a 0cdf 080a 06b9 080a     ................
 80a164c:	0c95 080a 0cb7 080a 0ca3 080a 0ccb 080a     ................
 80a165c:	0c83 080a 0c87 080a                         ........

080a1664 <_ZTV7TwoWire>:
	...
 80a166c:	0d85 080a 0dcf 080a 0da7 080a 0d87 080a     ................
 80a167c:	0daf 080a 0db7 080a 0dbf 080a 0dc7 080a     ................

080a168c <_ZTVN5spark9WiFiClassE>:
	...
 80a1694:	0e9f 080a 0e95 080a 0e8b 080a 0e09 080a     ................
 80a16a4:	0803 080a 0e7f 080a 0e73 080a 0e6b 080a     ........s...k...
 80a16b4:	0e61 080a 0e57 080a 0e13 080a               a...W.......

080a16c0 <_ZTVN5spark12NetworkClassE>:
	...
 80a16c8:	0ebd 080a 0ec7 080a 0ed1 080a 0edb 080a     ................
 80a16d8:	0ee5 080a 0ef1 080a 0efd 080a 0f09 080a     ................
 80a16e8:	0f11 080a 0f1b 080a 0f25 080a               ........%...

080a16f4 <__sf_fake_stdin>:
	...

080a1714 <__sf_fake_stdout>:
	...

080a1734 <__sf_fake_stderr>:
	...
 80a1754:	0043                                        C.

080a1756 <link_const_variable_data_end>:
	...

080a1758 <link_constructors_location>:
 80a1758:	080a02c1 	.word	0x080a02c1
 80a175c:	080a06a1 	.word	0x080a06a1
 80a1760:	080a0811 	.word	0x080a0811
 80a1764:	080a088d 	.word	0x080a088d
 80a1768:	080a08c1 	.word	0x080a08c1
 80a176c:	080a0ea9 	.word	0x080a0ea9
 80a1770:	080a0f75 	.word	0x080a0f75
 80a1774:	080a104d 	.word	0x080a104d
 80a1778:	080a1091 	.word	0x080a1091
 80a177c:	080a1111 	.word	0x080a1111
 80a1780:	080a1195 	.word	0x080a1195
 80a1784:	080a1259 	.word	0x080a1259
 80a1788:	080a131d 	.word	0x080a131d

080a178c <link_constructors_end>:
 80a178c:	00000000 	.word	0x00000000
