
c:/Users/s519653/Documents/IoT/Projects/iot-final-cadence-monitor/cadence_monitor/target/1.4.2/photon/cadence_monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002314  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2330  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  20000000  080a2334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b4  20000088  20000088  00030088  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a23bc  080a23bc  000223bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a23e4  080a23e4  000223e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000adc1c  00000000  00000000  000223e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f555  00000000  00000000  000d0004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000139a2  00000000  00000000  000df559  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ec0  00000000  00000000  000f2efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003188  00000000  00000000  000f4dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002425a  00000000  00000000  000f7f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021fb5  00000000  00000000  0011c19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5301  00000000  00000000  0013e152  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b8b0  00000000  00000000  001e3454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
 80a0020:	b508      	push	{r3, lr}
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fe37 	bl	80a1ca0 <memcpy>
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fe3c 	bl	80a1cb6 <memset>
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2334 	.word	0x080a2334
 80a004c:	20000088 	.word	0x20000088
 80a0050:	20000088 	.word	0x20000088
 80a0054:	2000063c 	.word	0x2000063c
 80a0058:	2000063c 	.word	0x2000063c

080a005c <module_user_init>:
 80a005c:	b570      	push	{r4, r5, r6, lr}
 80a005e:	f000 fe41 	bl	80a0ce4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a22f8 	.word	0x080a22f8
 80a0084:	080a232c 	.word	0x080a232c

080a0088 <module_user_setup>:
 80a0088:	f000 b856 	b.w	80a0138 <setup>

080a008c <module_user_loop>:
 80a008c:	b508      	push	{r3, lr}
 80a008e:	f000 f8ef 	bl	80a0270 <loop>
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0096:	f000 bde7 	b.w	80a0c68 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bba7 	b.w	80a07ec <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bbad 	b.w	80a07fc <free>

080a00a2 <__cxa_guard_acquire>:
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z15handleStartRidePKcS0_>:
  currentCadence = String(data).toInt();
  Serial.println(data);
  Serial.printf("Parsed Cadence: %d", currentCadence);
}

void handleStartRide(const char *event, const char *data) {
 80a00b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  rideId = String(data).toInt();
 80a00b6:	4668      	mov	r0, sp
  currentCadence = String(data).toInt();
  Serial.println(data);
  Serial.printf("Parsed Cadence: %d", currentCadence);
}

void handleStartRide(const char *event, const char *data) {
 80a00b8:	460c      	mov	r4, r1
  rideId = String(data).toInt();
 80a00ba:	f000 fc3a 	bl	80a0932 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00be:	4668      	mov	r0, sp
 80a00c0:	f000 fc4a 	bl	80a0958 <_ZNK6String5toIntEv>
 80a00c4:	4b09      	ldr	r3, [pc, #36]	; (80a00ec <_Z15handleStartRidePKcS0_+0x38>)
 80a00c6:	6018      	str	r0, [r3, #0]
 80a00c8:	4668      	mov	r0, sp
 80a00ca:	f000 fbeb 	bl	80a08a4 <_ZN6StringD1Ev>
  Serial.println(data);
 80a00ce:	f001 f9cd 	bl	80a146c <_Z16_fetch_usbserialv>
 80a00d2:	4621      	mov	r1, r4
 80a00d4:	f000 fca3 	bl	80a0a1e <_ZN5Print7printlnEPKc>
  // Set the device to start reading, and last publisht time to now
  activeReading = true;
 80a00d8:	4b05      	ldr	r3, [pc, #20]	; (80a00f0 <_Z15handleStartRidePKcS0_+0x3c>)
 80a00da:	2201      	movs	r2, #1
 80a00dc:	701a      	strb	r2, [r3, #0]
  lastPublishTime = Time.now();
 80a00de:	f000 fd51 	bl	80a0b84 <_ZN9TimeClass3nowEv>
 80a00e2:	4b04      	ldr	r3, [pc, #16]	; (80a00f4 <_Z15handleStartRidePKcS0_+0x40>)
 80a00e4:	6018      	str	r0, [r3, #0]
}
 80a00e6:	b004      	add	sp, #16
 80a00e8:	bd10      	pop	{r4, pc}
 80a00ea:	bf00      	nop
 80a00ec:	20000008 	.word	0x20000008
 80a00f0:	200000a0 	.word	0x200000a0
 80a00f4:	200000b0 	.word	0x200000b0

080a00f8 <_Z13handleCadencePKcS0_>:
  } else {
    digitalWrite(G_LED, HIGH);
  }
}

void handleCadence(const char *event, const char *data) {
 80a00f8:	b530      	push	{r4, r5, lr}
 80a00fa:	b085      	sub	sp, #20
  currentCadence = String(data).toInt();
 80a00fc:	4668      	mov	r0, sp
  } else {
    digitalWrite(G_LED, HIGH);
  }
}

void handleCadence(const char *event, const char *data) {
 80a00fe:	460d      	mov	r5, r1
  currentCadence = String(data).toInt();
 80a0100:	f000 fc17 	bl	80a0932 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0104:	4668      	mov	r0, sp
 80a0106:	f000 fc27 	bl	80a0958 <_ZNK6String5toIntEv>
 80a010a:	4c09      	ldr	r4, [pc, #36]	; (80a0130 <_Z13handleCadencePKcS0_+0x38>)
 80a010c:	6020      	str	r0, [r4, #0]
 80a010e:	4668      	mov	r0, sp
 80a0110:	f000 fbc8 	bl	80a08a4 <_ZN6StringD1Ev>
  Serial.println(data);
 80a0114:	f001 f9aa 	bl	80a146c <_Z16_fetch_usbserialv>
 80a0118:	4629      	mov	r1, r5
 80a011a:	f000 fc80 	bl	80a0a1e <_ZN5Print7printlnEPKc>
  Serial.printf("Parsed Cadence: %d", currentCadence);
 80a011e:	f001 f9a5 	bl	80a146c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a0122:	6823      	ldr	r3, [r4, #0]
 80a0124:	4a03      	ldr	r2, [pc, #12]	; (80a0134 <_Z13handleCadencePKcS0_+0x3c>)
 80a0126:	2100      	movs	r1, #0
 80a0128:	f000 fcaf 	bl	80a0a8a <_ZN5Print11printf_implEbPKcz>
}
 80a012c:	b005      	add	sp, #20
 80a012e:	bd30      	pop	{r4, r5, pc}
 80a0130:	2000009c 	.word	0x2000009c
 80a0134:	080a1e94 	.word	0x080a1e94

080a0138 <setup>:
int TARGET_CADENCE = 60;
int B_LED = D1;
int G_LED = D2;
int R_LED = D3;

void setup() {
 80a0138:	b513      	push	{r0, r1, r4, lr}
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80a013a:	2400      	movs	r4, #0
 80a013c:	4623      	mov	r3, r4
 80a013e:	4622      	mov	r2, r4
 80a0140:	9401      	str	r4, [sp, #4]
 80a0142:	9400      	str	r4, [sp, #0]
 80a0144:	4919      	ldr	r1, [pc, #100]	; (80a01ac <setup+0x74>)
 80a0146:	481a      	ldr	r0, [pc, #104]	; (80a01b0 <setup+0x78>)
 80a0148:	f000 fb38 	bl	80a07bc <spark_subscribe>
 80a014c:	4622      	mov	r2, r4
 80a014e:	4623      	mov	r3, r4
 80a0150:	9401      	str	r4, [sp, #4]
 80a0152:	9400      	str	r4, [sp, #0]
 80a0154:	4917      	ldr	r1, [pc, #92]	; (80a01b4 <setup+0x7c>)
 80a0156:	4818      	ldr	r0, [pc, #96]	; (80a01b8 <setup+0x80>)
 80a0158:	f000 fb30 	bl	80a07bc <spark_subscribe>
  Particle.subscribe("hook-response/getCadence", handleCadence, MY_DEVICES);
  // Callback to get the rideId when starting
  Particle.subscribe("hook-response/startRide", handleStartRide, MY_DEVICES);
  // a

  pinMode(monitor, INPUT);
 80a015c:	4b17      	ldr	r3, [pc, #92]	; (80a01bc <setup+0x84>)
 80a015e:	4621      	mov	r1, r4
 80a0160:	8818      	ldrh	r0, [r3, #0]
 80a0162:	f001 fba1 	bl	80a18a8 <pinMode>
  pinMode(startButton, INPUT_PULLUP);
 80a0166:	4b16      	ldr	r3, [pc, #88]	; (80a01c0 <setup+0x88>)
 80a0168:	2102      	movs	r1, #2
 80a016a:	8818      	ldrh	r0, [r3, #0]
 80a016c:	f001 fb9c 	bl	80a18a8 <pinMode>
  pinMode(stopButton, INPUT_PULLUP);
 80a0170:	4b14      	ldr	r3, [pc, #80]	; (80a01c4 <setup+0x8c>)
 80a0172:	2102      	movs	r1, #2
 80a0174:	8818      	ldrh	r0, [r3, #0]
 80a0176:	f001 fb97 	bl	80a18a8 <pinMode>

  pinMode(B_LED, OUTPUT);
 80a017a:	4b13      	ldr	r3, [pc, #76]	; (80a01c8 <setup+0x90>)
 80a017c:	2101      	movs	r1, #1
 80a017e:	8818      	ldrh	r0, [r3, #0]
 80a0180:	f001 fb92 	bl	80a18a8 <pinMode>
  pinMode(G_LED, OUTPUT);
 80a0184:	4b11      	ldr	r3, [pc, #68]	; (80a01cc <setup+0x94>)
 80a0186:	2101      	movs	r1, #1
 80a0188:	8818      	ldrh	r0, [r3, #0]
 80a018a:	f001 fb8d 	bl	80a18a8 <pinMode>
  pinMode(R_LED, OUTPUT);
 80a018e:	4b10      	ldr	r3, [pc, #64]	; (80a01d0 <setup+0x98>)
 80a0190:	2101      	movs	r1, #1
 80a0192:	8818      	ldrh	r0, [r3, #0]
 80a0194:	f001 fb88 	bl	80a18a8 <pinMode>

  Serial.begin(9600);
 80a0198:	f001 f968 	bl	80a146c <_Z16_fetch_usbserialv>
 80a019c:	f44f 5116 	mov.w	r1, #9600	; 0x2580

  // Particle.function("startNode", start);
  // Particle.function("stopNode", stop);
  
  // Particle.subscribe("getCadence", getCadence, MY_DEVICES);
}
 80a01a0:	b002      	add	sp, #8
 80a01a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  pinMode(B_LED, OUTPUT);
  pinMode(G_LED, OUTPUT);
  pinMode(R_LED, OUTPUT);

  Serial.begin(9600);
 80a01a6:	f001 b947 	b.w	80a1438 <_ZN9USBSerial5beginEl>
 80a01aa:	bf00      	nop
 80a01ac:	080a00f9 	.word	0x080a00f9
 80a01b0:	080a1ea7 	.word	0x080a1ea7
 80a01b4:	080a00b5 	.word	0x080a00b5
 80a01b8:	080a1ec0 	.word	0x080a1ec0
 80a01bc:	20000094 	.word	0x20000094
 80a01c0:	20000000 	.word	0x20000000
 80a01c4:	20000010 	.word	0x20000010
 80a01c8:	2000000c 	.word	0x2000000c
 80a01cc:	20000004 	.word	0x20000004
 80a01d0:	20000014 	.word	0x20000014

080a01d4 <_Z11turnOffLedsv>:
    turnOffLeds();
    activeReading = false;
  }
}

void turnOffLeds() {
 80a01d4:	b508      	push	{r3, lr}
  // Set all LED's to off
  digitalWrite(R_LED, LOW);
 80a01d6:	4b08      	ldr	r3, [pc, #32]	; (80a01f8 <_Z11turnOffLedsv+0x24>)
 80a01d8:	2100      	movs	r1, #0
 80a01da:	8818      	ldrh	r0, [r3, #0]
 80a01dc:	f001 fb75 	bl	80a18ca <digitalWrite>
  digitalWrite(G_LED, LOW);
 80a01e0:	4b06      	ldr	r3, [pc, #24]	; (80a01fc <_Z11turnOffLedsv+0x28>)
 80a01e2:	2100      	movs	r1, #0
 80a01e4:	8818      	ldrh	r0, [r3, #0]
 80a01e6:	f001 fb70 	bl	80a18ca <digitalWrite>
  digitalWrite(B_LED, LOW);
 80a01ea:	4b05      	ldr	r3, [pc, #20]	; (80a0200 <_Z11turnOffLedsv+0x2c>)
 80a01ec:	2100      	movs	r1, #0
 80a01ee:	8818      	ldrh	r0, [r3, #0]
}
 80a01f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void turnOffLeds() {
  // Set all LED's to off
  digitalWrite(R_LED, LOW);
  digitalWrite(G_LED, LOW);
  digitalWrite(B_LED, LOW);
 80a01f4:	f001 bb69 	b.w	80a18ca <digitalWrite>
 80a01f8:	20000014 	.word	0x20000014
 80a01fc:	20000004 	.word	0x20000004
 80a0200:	2000000c 	.word	0x2000000c

080a0204 <_Z20setLedBasedOnCadencei>:
}

void setLedBasedOnCadence(int currentCadence) {
 80a0204:	b510      	push	{r4, lr}
 80a0206:	4604      	mov	r4, r0
  turnOffLeds();
 80a0208:	f7ff ffe4 	bl	80a01d4 <_Z11turnOffLedsv>
  if (currentCadence > TARGET_CADENCE + 4) {
 80a020c:	4b09      	ldr	r3, [pc, #36]	; (80a0234 <_Z20setLedBasedOnCadencei+0x30>)
 80a020e:	681b      	ldr	r3, [r3, #0]
 80a0210:	1d1a      	adds	r2, r3, #4
 80a0212:	42a2      	cmp	r2, r4
 80a0214:	da02      	bge.n	80a021c <_Z20setLedBasedOnCadencei+0x18>
    digitalWrite(R_LED, HIGH);
 80a0216:	2101      	movs	r1, #1
 80a0218:	4b07      	ldr	r3, [pc, #28]	; (80a0238 <_Z20setLedBasedOnCadencei+0x34>)
 80a021a:	e005      	b.n	80a0228 <_Z20setLedBasedOnCadencei+0x24>
  } else if (currentCadence < TARGET_CADENCE - 4) {
 80a021c:	3b04      	subs	r3, #4
 80a021e:	429c      	cmp	r4, r3
    digitalWrite(B_LED, HIGH);
 80a0220:	bfb4      	ite	lt
 80a0222:	4b06      	ldrlt	r3, [pc, #24]	; (80a023c <_Z20setLedBasedOnCadencei+0x38>)
  } else {
    digitalWrite(G_LED, HIGH);
 80a0224:	4b06      	ldrge	r3, [pc, #24]	; (80a0240 <_Z20setLedBasedOnCadencei+0x3c>)
void setLedBasedOnCadence(int currentCadence) {
  turnOffLeds();
  if (currentCadence > TARGET_CADENCE + 4) {
    digitalWrite(R_LED, HIGH);
  } else if (currentCadence < TARGET_CADENCE - 4) {
    digitalWrite(B_LED, HIGH);
 80a0226:	2101      	movs	r1, #1
  } else {
    digitalWrite(G_LED, HIGH);
 80a0228:	8818      	ldrh	r0, [r3, #0]
  }
}
 80a022a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (currentCadence > TARGET_CADENCE + 4) {
    digitalWrite(R_LED, HIGH);
  } else if (currentCadence < TARGET_CADENCE - 4) {
    digitalWrite(B_LED, HIGH);
  } else {
    digitalWrite(G_LED, HIGH);
 80a022e:	f001 bb4c 	b.w	80a18ca <digitalWrite>
 80a0232:	bf00      	nop
 80a0234:	20000018 	.word	0x20000018
 80a0238:	20000014 	.word	0x20000014
 80a023c:	2000000c 	.word	0x2000000c
 80a0240:	20000004 	.word	0x20000004

080a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0244:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0246:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0248:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a024a:	b17c      	cbz	r4, 80a026c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a024c:	6863      	ldr	r3, [r4, #4]
 80a024e:	3b01      	subs	r3, #1
 80a0250:	6063      	str	r3, [r4, #4]
 80a0252:	b95b      	cbnz	r3, 80a026c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0254:	6823      	ldr	r3, [r4, #0]
 80a0256:	4620      	mov	r0, r4
 80a0258:	689b      	ldr	r3, [r3, #8]
 80a025a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a025c:	68a3      	ldr	r3, [r4, #8]
 80a025e:	3b01      	subs	r3, #1
 80a0260:	60a3      	str	r3, [r4, #8]
 80a0262:	b91b      	cbnz	r3, 80a026c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0264:	6823      	ldr	r3, [r4, #0]
 80a0266:	4620      	mov	r0, r4
 80a0268:	68db      	ldr	r3, [r3, #12]
 80a026a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a026c:	4628      	mov	r0, r5
 80a026e:	bd38      	pop	{r3, r4, r5, pc}

080a0270 <loop>:
  // Particle.function("stopNode", stop);
  
  // Particle.subscribe("getCadence", getCadence, MY_DEVICES);
}

void loop() {
 80a0270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(digitalRead(startButton)==LOW && Time.now() > btnLastPressTime + 1) {
 80a0274:	4b56      	ldr	r3, [pc, #344]	; (80a03d0 <loop+0x160>)
  // Particle.function("stopNode", stop);
  
  // Particle.subscribe("getCadence", getCadence, MY_DEVICES);
}

void loop() {
 80a0276:	b088      	sub	sp, #32
  if(digitalRead(startButton)==LOW && Time.now() > btnLastPressTime + 1) {
 80a0278:	8818      	ldrh	r0, [r3, #0]
 80a027a:	f001 fb3f 	bl	80a18fc <digitalRead>
 80a027e:	b938      	cbnz	r0, 80a0290 <loop+0x20>
 80a0280:	f000 fc80 	bl	80a0b84 <_ZN9TimeClass3nowEv>
 80a0284:	4c53      	ldr	r4, [pc, #332]	; (80a03d4 <loop+0x164>)
 80a0286:	6823      	ldr	r3, [r4, #0]
 80a0288:	3301      	adds	r3, #1
 80a028a:	4298      	cmp	r0, r3
 80a028c:	f300 8087 	bgt.w	80a039e <loop+0x12e>
    // Publish a cloud request that will allow us to get our rideId from the server
    Particle.publish("startRide", "", PRIVATE);
  }

  // It is set to reading and the device got a rideId from the server
  if (activeReading) {
 80a0290:	4c51      	ldr	r4, [pc, #324]	; (80a03d8 <loop+0x168>)
 80a0292:	7823      	ldrb	r3, [r4, #0]
 80a0294:	2b00      	cmp	r3, #0
 80a0296:	d05b      	beq.n	80a0350 <loop+0xe0>
    curTime = Time.now();
 80a0298:	f000 fc74 	bl	80a0b84 <_ZN9TimeClass3nowEv>

    lastReadHigh = curReadHigh;
 80a029c:	4f4f      	ldr	r7, [pc, #316]	; (80a03dc <loop+0x16c>)
 80a029e:	4e50      	ldr	r6, [pc, #320]	; (80a03e0 <loop+0x170>)
 80a02a0:	783b      	ldrb	r3, [r7, #0]
    Particle.publish("startRide", "", PRIVATE);
  }

  // It is set to reading and the device got a rideId from the server
  if (activeReading) {
    curTime = Time.now();
 80a02a2:	4d50      	ldr	r5, [pc, #320]	; (80a03e4 <loop+0x174>)

    lastReadHigh = curReadHigh;
 80a02a4:	7033      	strb	r3, [r6, #0]
    curReadHigh = digitalRead(monitor);
 80a02a6:	4b50      	ldr	r3, [pc, #320]	; (80a03e8 <loop+0x178>)
    Particle.publish("startRide", "", PRIVATE);
  }

  // It is set to reading and the device got a rideId from the server
  if (activeReading) {
    curTime = Time.now();
 80a02a8:	6028      	str	r0, [r5, #0]

    lastReadHigh = curReadHigh;
    curReadHigh = digitalRead(monitor);
 80a02aa:	8818      	ldrh	r0, [r3, #0]
 80a02ac:	f001 fb26 	bl	80a18fc <digitalRead>
 80a02b0:	1c03      	adds	r3, r0, #0
 80a02b2:	bf18      	it	ne
 80a02b4:	2301      	movne	r3, #1
 80a02b6:	703b      	strb	r3, [r7, #0]

    if (lastReadHigh && !curReadHigh) {
 80a02b8:	7833      	ldrb	r3, [r6, #0]
 80a02ba:	b123      	cbz	r3, 80a02c6 <loop+0x56>
 80a02bc:	b918      	cbnz	r0, 80a02c6 <loop+0x56>
      passes++;
 80a02be:	4a4b      	ldr	r2, [pc, #300]	; (80a03ec <loop+0x17c>)
 80a02c0:	6813      	ldr	r3, [r2, #0]
 80a02c2:	3301      	adds	r3, #1
 80a02c4:	6013      	str	r3, [r2, #0]
    }

    if (curTime > lastPublishTime + 3){
 80a02c6:	4e4a      	ldr	r6, [pc, #296]	; (80a03f0 <loop+0x180>)
 80a02c8:	682a      	ldr	r2, [r5, #0]
 80a02ca:	6833      	ldr	r3, [r6, #0]
 80a02cc:	4f45      	ldr	r7, [pc, #276]	; (80a03e4 <loop+0x174>)
 80a02ce:	3303      	adds	r3, #3
 80a02d0:	4293      	cmp	r3, r2
 80a02d2:	da3d      	bge.n	80a0350 <loop+0xe0>
      Serial.printf("{\"currentTime\":%d, \"strokesSinceLastPublish\":%d, \"rideId\": %d}", curTime, passes, rideId);
 80a02d4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80a0424 <loop+0x1b4>
 80a02d8:	f001 f8c8 	bl	80a146c <_Z16_fetch_usbserialv>
 80a02dc:	f8d8 3000 	ldr.w	r3, [r8]
 80a02e0:	4d42      	ldr	r5, [pc, #264]	; (80a03ec <loop+0x17c>)
 80a02e2:	9301      	str	r3, [sp, #4]
 80a02e4:	682b      	ldr	r3, [r5, #0]
 80a02e6:	4a43      	ldr	r2, [pc, #268]	; (80a03f4 <loop+0x184>)
 80a02e8:	9300      	str	r3, [sp, #0]
 80a02ea:	683b      	ldr	r3, [r7, #0]
 80a02ec:	2100      	movs	r1, #0
 80a02ee:	f000 fbcc 	bl	80a0a8a <_ZN5Print11printf_implEbPKcz>
      Particle.publish("addReading", String::format("{\"currentTime\":%d, \"strokesSinceLastPublish\":%d, \"rideId\": %d}", curTime, passes, rideId));
 80a02f2:	f8d8 3000 	ldr.w	r3, [r8]
 80a02f6:	493f      	ldr	r1, [pc, #252]	; (80a03f4 <loop+0x184>)
 80a02f8:	9300      	str	r3, [sp, #0]
 80a02fa:	682b      	ldr	r3, [r5, #0]
 80a02fc:	683a      	ldr	r2, [r7, #0]
 80a02fe:	a804      	add	r0, sp, #16
 80a0300:	f000 fb30 	bl	80a0964 <_ZN6String6formatEPKcz>
 80a0304:	4b3c      	ldr	r3, [pc, #240]	; (80a03f8 <loop+0x188>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0306:	9a04      	ldr	r2, [sp, #16]
 80a0308:	781b      	ldrb	r3, [r3, #0]
 80a030a:	493c      	ldr	r1, [pc, #240]	; (80a03fc <loop+0x18c>)
 80a030c:	f88d 3000 	strb.w	r3, [sp]
 80a0310:	a802      	add	r0, sp, #8
 80a0312:	233c      	movs	r3, #60	; 0x3c
 80a0314:	f000 fe54 	bl	80a0fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0318:	a803      	add	r0, sp, #12
 80a031a:	f7ff ff93 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a031e:	a804      	add	r0, sp, #16
 80a0320:	f000 fac0 	bl	80a08a4 <_ZN6StringD1Ev>
 80a0324:	4b36      	ldr	r3, [pc, #216]	; (80a0400 <loop+0x190>)
 80a0326:	2200      	movs	r2, #0
 80a0328:	781b      	ldrb	r3, [r3, #0]
 80a032a:	4936      	ldr	r1, [pc, #216]	; (80a0404 <loop+0x194>)
 80a032c:	f88d 3000 	strb.w	r3, [sp]
 80a0330:	a804      	add	r0, sp, #16
 80a0332:	233c      	movs	r3, #60	; 0x3c
 80a0334:	f000 fe44 	bl	80a0fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0338:	a805      	add	r0, sp, #20
 80a033a:	f7ff ff83 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      
      // setLedBasedOnCadence(exampleCadence[currentExampleCadence]);
      // currentExampleCadence++;
      // currentExampleCadence %= 11;
      Particle.publish("getCadence", PRIVATE);
      setLedBasedOnCadence(currentCadence);
 80a033e:	4b32      	ldr	r3, [pc, #200]	; (80a0408 <loop+0x198>)
 80a0340:	6818      	ldr	r0, [r3, #0]
 80a0342:	f7ff ff5f 	bl	80a0204 <_Z20setLedBasedOnCadencei>

      lastPublishTime = Time.now();
 80a0346:	f000 fc1d 	bl	80a0b84 <_ZN9TimeClass3nowEv>
      passes = 0;
 80a034a:	2300      	movs	r3, #0
      // currentExampleCadence++;
      // currentExampleCadence %= 11;
      Particle.publish("getCadence", PRIVATE);
      setLedBasedOnCadence(currentCadence);

      lastPublishTime = Time.now();
 80a034c:	6030      	str	r0, [r6, #0]
      passes = 0;
 80a034e:	602b      	str	r3, [r5, #0]
    }    
  }

  if (digitalRead(stopButton)==LOW && Time.now() > btnLastPressTime + 1) {
 80a0350:	4b2e      	ldr	r3, [pc, #184]	; (80a040c <loop+0x19c>)
 80a0352:	8818      	ldrh	r0, [r3, #0]
 80a0354:	f001 fad2 	bl	80a18fc <digitalRead>
 80a0358:	4605      	mov	r5, r0
 80a035a:	2800      	cmp	r0, #0
 80a035c:	d135      	bne.n	80a03ca <loop+0x15a>
 80a035e:	f000 fc11 	bl	80a0b84 <_ZN9TimeClass3nowEv>
 80a0362:	4e1c      	ldr	r6, [pc, #112]	; (80a03d4 <loop+0x164>)
 80a0364:	6833      	ldr	r3, [r6, #0]
 80a0366:	3301      	adds	r3, #1
 80a0368:	4298      	cmp	r0, r3
 80a036a:	dd2e      	ble.n	80a03ca <loop+0x15a>
    btnLastPressTime = Time.now();
 80a036c:	f000 fc0a 	bl	80a0b84 <_ZN9TimeClass3nowEv>
 80a0370:	6030      	str	r0, [r6, #0]
    Serial.println("Stop Button Pressed");
 80a0372:	f001 f87b 	bl	80a146c <_Z16_fetch_usbserialv>
 80a0376:	4926      	ldr	r1, [pc, #152]	; (80a0410 <loop+0x1a0>)
 80a0378:	f000 fb51 	bl	80a0a1e <_ZN5Print7printlnEPKc>
 80a037c:	4b1e      	ldr	r3, [pc, #120]	; (80a03f8 <loop+0x188>)
 80a037e:	462a      	mov	r2, r5
 80a0380:	781b      	ldrb	r3, [r3, #0]
 80a0382:	4924      	ldr	r1, [pc, #144]	; (80a0414 <loop+0x1a4>)
 80a0384:	f88d 3000 	strb.w	r3, [sp]
 80a0388:	a804      	add	r0, sp, #16
 80a038a:	233c      	movs	r3, #60	; 0x3c
 80a038c:	f000 fe18 	bl	80a0fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0390:	a805      	add	r0, sp, #20
 80a0392:	f7ff ff57 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("stopRide");
    turnOffLeds();
 80a0396:	f7ff ff1d 	bl	80a01d4 <_Z11turnOffLedsv>
    activeReading = false;
 80a039a:	7025      	strb	r5, [r4, #0]
 80a039c:	e015      	b.n	80a03ca <loop+0x15a>
  // Particle.subscribe("getCadence", getCadence, MY_DEVICES);
}

void loop() {
  if(digitalRead(startButton)==LOW && Time.now() > btnLastPressTime + 1) {
    btnLastPressTime = Time.now();
 80a039e:	f000 fbf1 	bl	80a0b84 <_ZN9TimeClass3nowEv>
 80a03a2:	6020      	str	r0, [r4, #0]
    Serial.println("Start Button Pressed");
 80a03a4:	f001 f862 	bl	80a146c <_Z16_fetch_usbserialv>
 80a03a8:	491b      	ldr	r1, [pc, #108]	; (80a0418 <loop+0x1a8>)
 80a03aa:	f000 fb38 	bl	80a0a1e <_ZN5Print7printlnEPKc>
 80a03ae:	4b14      	ldr	r3, [pc, #80]	; (80a0400 <loop+0x190>)
 80a03b0:	a804      	add	r0, sp, #16
 80a03b2:	781b      	ldrb	r3, [r3, #0]
 80a03b4:	4a19      	ldr	r2, [pc, #100]	; (80a041c <loop+0x1ac>)
 80a03b6:	f88d 3000 	strb.w	r3, [sp]
 80a03ba:	4919      	ldr	r1, [pc, #100]	; (80a0420 <loop+0x1b0>)
 80a03bc:	233c      	movs	r3, #60	; 0x3c
 80a03be:	f000 fdff 	bl	80a0fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a03c2:	a805      	add	r0, sp, #20
 80a03c4:	f7ff ff3e 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a03c8:	e762      	b.n	80a0290 <loop+0x20>
    Serial.println("Stop Button Pressed");
    Particle.publish("stopRide");
    turnOffLeds();
    activeReading = false;
  }
}
 80a03ca:	b008      	add	sp, #32
 80a03cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a03d0:	20000000 	.word	0x20000000
 80a03d4:	200000a4 	.word	0x200000a4
 80a03d8:	200000a0 	.word	0x200000a0
 80a03dc:	200000a9 	.word	0x200000a9
 80a03e0:	200000a8 	.word	0x200000a8
 80a03e4:	200000ac 	.word	0x200000ac
 80a03e8:	20000094 	.word	0x20000094
 80a03ec:	20000090 	.word	0x20000090
 80a03f0:	200000b0 	.word	0x200000b0
 80a03f4:	080a1ed8 	.word	0x080a1ed8
 80a03f8:	2000008c 	.word	0x2000008c
 80a03fc:	080a1f17 	.word	0x080a1f17
 80a0400:	20000098 	.word	0x20000098
 80a0404:	080a1eb5 	.word	0x080a1eb5
 80a0408:	2000009c 	.word	0x2000009c
 80a040c:	20000010 	.word	0x20000010
 80a0410:	080a1f37 	.word	0x080a1f37
 80a0414:	080a1f4b 	.word	0x080a1f4b
 80a0418:	080a1f22 	.word	0x080a1f22
 80a041c:	080a200b 	.word	0x080a200b
 80a0420:	080a1ece 	.word	0x080a1ece
 80a0424:	20000008 	.word	0x20000008

080a0428 <_GLOBAL__sub_I_monitor>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0428:	4b03      	ldr	r3, [pc, #12]	; (80a0438 <_GLOBAL__sub_I_monitor+0x10>)
 80a042a:	2200      	movs	r2, #0
 80a042c:	701a      	strb	r2, [r3, #0]
 80a042e:	4b03      	ldr	r3, [pc, #12]	; (80a043c <_GLOBAL__sub_I_monitor+0x14>)
 80a0430:	2201      	movs	r2, #1
 80a0432:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0434:	f000 b804 	b.w	80a0440 <HAL_Pin_Map>
 80a0438:	2000008c 	.word	0x2000008c
 80a043c:	20000098 	.word	0x20000098

080a0440 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <HAL_Pin_Map+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	681b      	ldr	r3, [r3, #0]
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601b0 	.word	0x080601b0

080a0450 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <HAL_Pin_Mode+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	689b      	ldr	r3, [r3, #8]
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601b0 	.word	0x080601b0

080a0460 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <HAL_Get_Pin_Mode+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	68db      	ldr	r3, [r3, #12]
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	080601b0 	.word	0x080601b0

080a0470 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b02      	ldr	r3, [pc, #8]	; (80a047c <HAL_GPIO_Write+0xc>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	691b      	ldr	r3, [r3, #16]
 80a0478:	9301      	str	r3, [sp, #4]
 80a047a:	bd08      	pop	{r3, pc}
 80a047c:	080601b0 	.word	0x080601b0

080a0480 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0480:	b508      	push	{r3, lr}
 80a0482:	4b02      	ldr	r3, [pc, #8]	; (80a048c <HAL_GPIO_Read+0xc>)
 80a0484:	681b      	ldr	r3, [r3, #0]
 80a0486:	695b      	ldr	r3, [r3, #20]
 80a0488:	9301      	str	r3, [sp, #4]
 80a048a:	bd08      	pop	{r3, pc}
 80a048c:	080601b0 	.word	0x080601b0

080a0490 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0490:	b508      	push	{r3, lr}
 80a0492:	4b02      	ldr	r3, [pc, #8]	; (80a049c <HAL_SPI_Init+0xc>)
 80a0494:	681b      	ldr	r3, [r3, #0]
 80a0496:	69db      	ldr	r3, [r3, #28]
 80a0498:	9301      	str	r3, [sp, #4]
 80a049a:	bd08      	pop	{r3, pc}
 80a049c:	080601b4 	.word	0x080601b4

080a04a0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <HAL_SPI_Is_Enabled+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	6a1b      	ldr	r3, [r3, #32]
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	080601b4 	.word	0x080601b4

080a04b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <HAL_RNG_GetRandomNumber+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	685b      	ldr	r3, [r3, #4]
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	0806019c 	.word	0x0806019c

080a04c0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	695b      	ldr	r3, [r3, #20]
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	0806019c 	.word	0x0806019c

080a04d0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <HAL_RTC_Get_UnixTime+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	69db      	ldr	r3, [r3, #28]
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	0806019c 	.word	0x0806019c

080a04e0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <HAL_RTC_Time_Is_Valid+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	0806019c 	.word	0x0806019c

080a04f0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a04f0:	b508      	push	{r3, lr}
 80a04f2:	4b02      	ldr	r3, [pc, #8]	; (80a04fc <os_mutex_create+0xc>)
 80a04f4:	681b      	ldr	r3, [r3, #0]
 80a04f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04f8:	9301      	str	r3, [sp, #4]
 80a04fa:	bd08      	pop	{r3, pc}
 80a04fc:	080601d0 	.word	0x080601d0

080a0500 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0500:	b508      	push	{r3, lr}
 80a0502:	4b02      	ldr	r3, [pc, #8]	; (80a050c <HAL_USART_Init+0xc>)
 80a0504:	681b      	ldr	r3, [r3, #0]
 80a0506:	699b      	ldr	r3, [r3, #24]
 80a0508:	9301      	str	r3, [sp, #4]
 80a050a:	bd08      	pop	{r3, pc}
 80a050c:	080601c4 	.word	0x080601c4

080a0510 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0510:	b508      	push	{r3, lr}
 80a0512:	4b02      	ldr	r3, [pc, #8]	; (80a051c <HAL_USART_Write_Data+0xc>)
 80a0514:	681b      	ldr	r3, [r3, #0]
 80a0516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0518:	9301      	str	r3, [sp, #4]
 80a051a:	bd08      	pop	{r3, pc}
 80a051c:	080601c4 	.word	0x080601c4

080a0520 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0520:	b508      	push	{r3, lr}
 80a0522:	4b02      	ldr	r3, [pc, #8]	; (80a052c <HAL_USART_Available_Data+0xc>)
 80a0524:	681b      	ldr	r3, [r3, #0]
 80a0526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0528:	9301      	str	r3, [sp, #4]
 80a052a:	bd08      	pop	{r3, pc}
 80a052c:	080601c4 	.word	0x080601c4

080a0530 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0530:	b508      	push	{r3, lr}
 80a0532:	4b02      	ldr	r3, [pc, #8]	; (80a053c <HAL_USART_Read_Data+0xc>)
 80a0534:	681b      	ldr	r3, [r3, #0]
 80a0536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0538:	9301      	str	r3, [sp, #4]
 80a053a:	bd08      	pop	{r3, pc}
 80a053c:	080601c4 	.word	0x080601c4

080a0540 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0540:	b508      	push	{r3, lr}
 80a0542:	4b02      	ldr	r3, [pc, #8]	; (80a054c <HAL_USART_Peek_Data+0xc>)
 80a0544:	681b      	ldr	r3, [r3, #0]
 80a0546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0548:	9301      	str	r3, [sp, #4]
 80a054a:	bd08      	pop	{r3, pc}
 80a054c:	080601c4 	.word	0x080601c4

080a0550 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0550:	b508      	push	{r3, lr}
 80a0552:	4b02      	ldr	r3, [pc, #8]	; (80a055c <HAL_USART_Flush_Data+0xc>)
 80a0554:	681b      	ldr	r3, [r3, #0]
 80a0556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0558:	9301      	str	r3, [sp, #4]
 80a055a:	bd08      	pop	{r3, pc}
 80a055c:	080601c4 	.word	0x080601c4

080a0560 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0560:	b508      	push	{r3, lr}
 80a0562:	4b02      	ldr	r3, [pc, #8]	; (80a056c <HAL_USART_Is_Enabled+0xc>)
 80a0564:	681b      	ldr	r3, [r3, #0]
 80a0566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0568:	9301      	str	r3, [sp, #4]
 80a056a:	bd08      	pop	{r3, pc}
 80a056c:	080601c4 	.word	0x080601c4

080a0570 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0570:	b508      	push	{r3, lr}
 80a0572:	4b02      	ldr	r3, [pc, #8]	; (80a057c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0574:	681b      	ldr	r3, [r3, #0]
 80a0576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0578:	9301      	str	r3, [sp, #4]
 80a057a:	bd08      	pop	{r3, pc}
 80a057c:	080601c4 	.word	0x080601c4

080a0580 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0580:	b508      	push	{r3, lr}
 80a0582:	4b02      	ldr	r3, [pc, #8]	; (80a058c <HAL_I2C_Write_Data+0xc>)
 80a0584:	681b      	ldr	r3, [r3, #0]
 80a0586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0588:	9301      	str	r3, [sp, #4]
 80a058a:	bd08      	pop	{r3, pc}
 80a058c:	080601ac 	.word	0x080601ac

080a0590 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <HAL_I2C_Available_Data+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601ac 	.word	0x080601ac

080a05a0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <HAL_I2C_Read_Data+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601ac 	.word	0x080601ac

080a05b0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <HAL_I2C_Peek_Data+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	080601ac 	.word	0x080601ac

080a05c0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <HAL_I2C_Flush_Data+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601ac 	.word	0x080601ac

080a05d0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <HAL_I2C_Is_Enabled+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601ac 	.word	0x080601ac

080a05e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b03      	ldr	r3, [pc, #12]	; (80a05f0 <HAL_I2C_Init+0x10>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a05ea:	9301      	str	r3, [sp, #4]
 80a05ec:	bd08      	pop	{r3, pc}
 80a05ee:	0000      	.short	0x0000
 80a05f0:	080601ac 	.word	0x080601ac

080a05f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <HAL_USB_USART_Init+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	681b      	ldr	r3, [r3, #0]
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601d8 	.word	0x080601d8

080a0604 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <HAL_USB_USART_Begin+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	685b      	ldr	r3, [r3, #4]
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601d8 	.word	0x080601d8

080a0614 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <HAL_USB_USART_Available_Data+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	691b      	ldr	r3, [r3, #16]
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601d8 	.word	0x080601d8

080a0624 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	695b      	ldr	r3, [r3, #20]
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601d8 	.word	0x080601d8

080a0634 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <HAL_USB_USART_Receive_Data+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	699b      	ldr	r3, [r3, #24]
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601d8 	.word	0x080601d8

080a0644 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <HAL_USB_USART_Send_Data+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	69db      	ldr	r3, [r3, #28]
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601d8 	.word	0x080601d8

080a0654 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <HAL_USB_USART_Flush_Data+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	6a1b      	ldr	r3, [r3, #32]
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601d8 	.word	0x080601d8

080a0664 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b02      	ldr	r3, [pc, #8]	; (80a0670 <inet_gethostbyname+0xc>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a066c:	9301      	str	r3, [sp, #4]
 80a066e:	bd08      	pop	{r3, pc}
 80a0670:	080601c0 	.word	0x080601c0

080a0674 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <system_mode+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	681b      	ldr	r3, [r3, #0]
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601a4 	.word	0x080601a4

080a0684 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <set_system_mode+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	685b      	ldr	r3, [r3, #4]
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601a4 	.word	0x080601a4

080a0694 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <application_thread_current+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601a4 	.word	0x080601a4

080a06a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <application_thread_invoke+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601a4 	.word	0x080601a4

080a06b4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <system_thread_get_state+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601a4 	.word	0x080601a4

080a06c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b03      	ldr	r3, [pc, #12]	; (80a06d4 <system_ctrl_set_app_request_handler+0x10>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a06ce:	9301      	str	r3, [sp, #4]
 80a06d0:	bd08      	pop	{r3, pc}
 80a06d2:	0000      	.short	0x0000
 80a06d4:	080601a4 	.word	0x080601a4

080a06d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b03      	ldr	r3, [pc, #12]	; (80a06e8 <system_ctrl_set_result+0x10>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a06e2:	9301      	str	r3, [sp, #4]
 80a06e4:	bd08      	pop	{r3, pc}
 80a06e6:	0000      	.short	0x0000
 80a06e8:	080601a4 	.word	0x080601a4

080a06ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06ec:	b508      	push	{r3, lr}
 80a06ee:	4b02      	ldr	r3, [pc, #8]	; (80a06f8 <network_connect+0xc>)
 80a06f0:	681b      	ldr	r3, [r3, #0]
 80a06f2:	685b      	ldr	r3, [r3, #4]
 80a06f4:	9301      	str	r3, [sp, #4]
 80a06f6:	bd08      	pop	{r3, pc}
 80a06f8:	080601c8 	.word	0x080601c8

080a06fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a06fc:	b508      	push	{r3, lr}
 80a06fe:	4b02      	ldr	r3, [pc, #8]	; (80a0708 <network_connecting+0xc>)
 80a0700:	681b      	ldr	r3, [r3, #0]
 80a0702:	689b      	ldr	r3, [r3, #8]
 80a0704:	9301      	str	r3, [sp, #4]
 80a0706:	bd08      	pop	{r3, pc}
 80a0708:	080601c8 	.word	0x080601c8

080a070c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a070c:	b508      	push	{r3, lr}
 80a070e:	4b02      	ldr	r3, [pc, #8]	; (80a0718 <network_disconnect+0xc>)
 80a0710:	681b      	ldr	r3, [r3, #0]
 80a0712:	68db      	ldr	r3, [r3, #12]
 80a0714:	9301      	str	r3, [sp, #4]
 80a0716:	bd08      	pop	{r3, pc}
 80a0718:	080601c8 	.word	0x080601c8

080a071c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a071c:	b508      	push	{r3, lr}
 80a071e:	4b02      	ldr	r3, [pc, #8]	; (80a0728 <network_ready+0xc>)
 80a0720:	681b      	ldr	r3, [r3, #0]
 80a0722:	691b      	ldr	r3, [r3, #16]
 80a0724:	9301      	str	r3, [sp, #4]
 80a0726:	bd08      	pop	{r3, pc}
 80a0728:	080601c8 	.word	0x080601c8

080a072c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a072c:	b508      	push	{r3, lr}
 80a072e:	4b02      	ldr	r3, [pc, #8]	; (80a0738 <network_on+0xc>)
 80a0730:	681b      	ldr	r3, [r3, #0]
 80a0732:	695b      	ldr	r3, [r3, #20]
 80a0734:	9301      	str	r3, [sp, #4]
 80a0736:	bd08      	pop	{r3, pc}
 80a0738:	080601c8 	.word	0x080601c8

080a073c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a073c:	b508      	push	{r3, lr}
 80a073e:	4b02      	ldr	r3, [pc, #8]	; (80a0748 <network_off+0xc>)
 80a0740:	681b      	ldr	r3, [r3, #0]
 80a0742:	699b      	ldr	r3, [r3, #24]
 80a0744:	9301      	str	r3, [sp, #4]
 80a0746:	bd08      	pop	{r3, pc}
 80a0748:	080601c8 	.word	0x080601c8

080a074c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a074c:	b508      	push	{r3, lr}
 80a074e:	4b02      	ldr	r3, [pc, #8]	; (80a0758 <network_listen+0xc>)
 80a0750:	681b      	ldr	r3, [r3, #0]
 80a0752:	69db      	ldr	r3, [r3, #28]
 80a0754:	9301      	str	r3, [sp, #4]
 80a0756:	bd08      	pop	{r3, pc}
 80a0758:	080601c8 	.word	0x080601c8

080a075c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a075c:	b508      	push	{r3, lr}
 80a075e:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <network_listening+0xc>)
 80a0760:	681b      	ldr	r3, [r3, #0]
 80a0762:	6a1b      	ldr	r3, [r3, #32]
 80a0764:	9301      	str	r3, [sp, #4]
 80a0766:	bd08      	pop	{r3, pc}
 80a0768:	080601c8 	.word	0x080601c8

080a076c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a076c:	b508      	push	{r3, lr}
 80a076e:	4b02      	ldr	r3, [pc, #8]	; (80a0778 <network_set_listen_timeout+0xc>)
 80a0770:	681b      	ldr	r3, [r3, #0]
 80a0772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0774:	9301      	str	r3, [sp, #4]
 80a0776:	bd08      	pop	{r3, pc}
 80a0778:	080601c8 	.word	0x080601c8

080a077c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a077c:	b508      	push	{r3, lr}
 80a077e:	4b02      	ldr	r3, [pc, #8]	; (80a0788 <network_get_listen_timeout+0xc>)
 80a0780:	681b      	ldr	r3, [r3, #0]
 80a0782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0784:	9301      	str	r3, [sp, #4]
 80a0786:	bd08      	pop	{r3, pc}
 80a0788:	080601c8 	.word	0x080601c8

080a078c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a078c:	b508      	push	{r3, lr}
 80a078e:	4b02      	ldr	r3, [pc, #8]	; (80a0798 <spark_process+0xc>)
 80a0790:	681b      	ldr	r3, [r3, #0]
 80a0792:	689b      	ldr	r3, [r3, #8]
 80a0794:	9301      	str	r3, [sp, #4]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	080601cc 	.word	0x080601cc

080a079c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <spark_cloud_flag_connected+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	695b      	ldr	r3, [r3, #20]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601cc 	.word	0x080601cc

080a07ac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <spark_send_event+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	6a1b      	ldr	r3, [r3, #32]
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601cc 	.word	0x080601cc

080a07bc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <spark_subscribe+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601cc 	.word	0x080601cc

080a07cc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <spark_sync_time_pending+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601cc 	.word	0x080601cc

080a07dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601cc 	.word	0x080601cc

080a07ec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <malloc+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	681b      	ldr	r3, [r3, #0]
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	080601a0 	.word	0x080601a0

080a07fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <free+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	685b      	ldr	r3, [r3, #4]
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	080601a0 	.word	0x080601a0

080a080c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <realloc+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	689b      	ldr	r3, [r3, #8]
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601a0 	.word	0x080601a0

080a081c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <vsnprintf+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601a0 	.word	0x080601a0

080a082c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <abort+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601a0 	.word	0x080601a0

080a083c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b02      	ldr	r3, [pc, #8]	; (80a0848 <_malloc_r+0xc>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0844:	9301      	str	r3, [sp, #4]
 80a0846:	bd08      	pop	{r3, pc}
 80a0848:	080601a0 	.word	0x080601a0

080a084c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a084c:	4770      	bx	lr

080a084e <_ZN8SPIClassD0Ev>:
 80a084e:	b510      	push	{r4, lr}
 80a0850:	4604      	mov	r4, r0
 80a0852:	2110      	movs	r1, #16
 80a0854:	f001 f8c5 	bl	80a19e2 <_ZdlPvj>
 80a0858:	4620      	mov	r0, r4
 80a085a:	bd10      	pop	{r4, pc}

080a085c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a085c:	b570      	push	{r4, r5, r6, lr}
 80a085e:	4604      	mov	r4, r0
 80a0860:	460e      	mov	r6, r1
 80a0862:	4b07      	ldr	r3, [pc, #28]	; (80a0880 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0864:	2500      	movs	r5, #0
 80a0866:	6003      	str	r3, [r0, #0]
 80a0868:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a086c:	f7ff fe40 	bl	80a04f0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0870:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0872:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0874:	f7ff fe0c 	bl	80a0490 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0878:	60a5      	str	r5, [r4, #8]
}
 80a087a:	4620      	mov	r0, r4
 80a087c:	bd70      	pop	{r4, r5, r6, pc}
 80a087e:	bf00      	nop
 80a0880:	080a1f5c 	.word	0x080a1f5c

080a0884 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0884:	7900      	ldrb	r0, [r0, #4]
 80a0886:	f7ff be0b 	b.w	80a04a0 <HAL_SPI_Is_Enabled>
	...

080a088c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a088c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0890:	4b03      	ldr	r3, [pc, #12]	; (80a08a0 <_GLOBAL__sub_I_System+0x14>)
 80a0892:	2000      	movs	r0, #0
 80a0894:	7018      	strb	r0, [r3, #0]
 80a0896:	8058      	strh	r0, [r3, #2]
 80a0898:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a089a:	f7ff bef3 	b.w	80a0684 <set_system_mode>
 80a089e:	bf00      	nop
 80a08a0:	200000b4 	.word	0x200000b4

080a08a4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a08a4:	b510      	push	{r4, lr}
 80a08a6:	4604      	mov	r4, r0
{
	free(buffer);
 80a08a8:	6800      	ldr	r0, [r0, #0]
 80a08aa:	f7ff ffa7 	bl	80a07fc <free>
}
 80a08ae:	4620      	mov	r0, r4
 80a08b0:	bd10      	pop	{r4, pc}

080a08b2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a08b2:	b510      	push	{r4, lr}
 80a08b4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a08b6:	6800      	ldr	r0, [r0, #0]
 80a08b8:	b108      	cbz	r0, 80a08be <_ZN6String10invalidateEv+0xc>
 80a08ba:	f7ff ff9f 	bl	80a07fc <free>
	buffer = NULL;
 80a08be:	2300      	movs	r3, #0
 80a08c0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a08c2:	60a3      	str	r3, [r4, #8]
 80a08c4:	6063      	str	r3, [r4, #4]
 80a08c6:	bd10      	pop	{r4, pc}

080a08c8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a08c8:	b538      	push	{r3, r4, r5, lr}
 80a08ca:	4604      	mov	r4, r0
 80a08cc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a08ce:	6800      	ldr	r0, [r0, #0]
 80a08d0:	3101      	adds	r1, #1
 80a08d2:	f7ff ff9b 	bl	80a080c <realloc>
	if (newbuffer) {
 80a08d6:	b110      	cbz	r0, 80a08de <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a08d8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a08dc:	2001      	movs	r0, #1
	}
	return 0;
}
 80a08de:	bd38      	pop	{r3, r4, r5, pc}

080a08e0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a08e0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a08e2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a08e4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a08e6:	b113      	cbz	r3, 80a08ee <_ZN6String7reserveEj+0xe>
 80a08e8:	6843      	ldr	r3, [r0, #4]
 80a08ea:	428b      	cmp	r3, r1
 80a08ec:	d207      	bcs.n	80a08fe <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a08ee:	4620      	mov	r0, r4
 80a08f0:	f7ff ffea 	bl	80a08c8 <_ZN6String12changeBufferEj>
 80a08f4:	b120      	cbz	r0, 80a0900 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a08f6:	68a3      	ldr	r3, [r4, #8]
 80a08f8:	b90b      	cbnz	r3, 80a08fe <_ZN6String7reserveEj+0x1e>
 80a08fa:	6822      	ldr	r2, [r4, #0]
 80a08fc:	7013      	strb	r3, [r2, #0]
 80a08fe:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0900:	bd10      	pop	{r4, pc}

080a0902 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0902:	b570      	push	{r4, r5, r6, lr}
 80a0904:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0906:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0908:	4604      	mov	r4, r0
 80a090a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a090c:	f7ff ffe8 	bl	80a08e0 <_ZN6String7reserveEj>
 80a0910:	b918      	cbnz	r0, 80a091a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0912:	4620      	mov	r0, r4
 80a0914:	f7ff ffcd 	bl	80a08b2 <_ZN6String10invalidateEv>
		return *this;
 80a0918:	e009      	b.n	80a092e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a091a:	462a      	mov	r2, r5
 80a091c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a091e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0920:	6820      	ldr	r0, [r4, #0]
 80a0922:	f001 f9bd 	bl	80a1ca0 <memcpy>
	buffer[len] = 0;
 80a0926:	6822      	ldr	r2, [r4, #0]
 80a0928:	68a3      	ldr	r3, [r4, #8]
 80a092a:	2100      	movs	r1, #0
 80a092c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a092e:	4620      	mov	r0, r4
 80a0930:	bd70      	pop	{r4, r5, r6, pc}

080a0932 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0932:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0934:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0936:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0938:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a093a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a093c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a093e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0940:	460d      	mov	r5, r1
 80a0942:	b139      	cbz	r1, 80a0954 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0944:	4608      	mov	r0, r1
 80a0946:	f001 fa02 	bl	80a1d4e <strlen>
 80a094a:	4629      	mov	r1, r5
 80a094c:	4602      	mov	r2, r0
 80a094e:	4620      	mov	r0, r4
 80a0950:	f7ff ffd7 	bl	80a0902 <_ZN6String4copyEPKcj>
}
 80a0954:	4620      	mov	r0, r4
 80a0956:	bd38      	pop	{r3, r4, r5, pc}

080a0958 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a0958:	6800      	ldr	r0, [r0, #0]
 80a095a:	b108      	cbz	r0, 80a0960 <_ZNK6String5toIntEv+0x8>
 80a095c:	f001 b98e 	b.w	80a1c7c <atol>
	return 0;
}
 80a0960:	4770      	bx	lr
	...

080a0964 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a0964:	b40e      	push	{r1, r2, r3}
 80a0966:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a0968:	ac09      	add	r4, sp, #36	; 0x24
 80a096a:	f854 7b04 	ldr.w	r7, [r4], #4
 80a096e:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a0970:	4623      	mov	r3, r4
 80a0972:	463a      	mov	r2, r7
 80a0974:	2105      	movs	r1, #5
 80a0976:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a0978:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a097a:	f7ff ff4f 	bl	80a081c <vsnprintf>
 80a097e:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a0980:	490b      	ldr	r1, [pc, #44]	; (80a09b0 <_ZN6String6formatEPKcz+0x4c>)
 80a0982:	4628      	mov	r0, r5
 80a0984:	f7ff ffd5 	bl	80a0932 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a0988:	4631      	mov	r1, r6
 80a098a:	4628      	mov	r0, r5
 80a098c:	f7ff ffa8 	bl	80a08e0 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a0990:	6828      	ldr	r0, [r5, #0]
 80a0992:	b130      	cbz	r0, 80a09a2 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a0994:	4623      	mov	r3, r4
 80a0996:	463a      	mov	r2, r7
 80a0998:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a099a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a099c:	f7ff ff3e 	bl	80a081c <vsnprintf>
        va_end(marker);
        result.len = n;
 80a09a0:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a09a2:	4628      	mov	r0, r5
 80a09a4:	b004      	add	sp, #16
 80a09a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a09aa:	b003      	add	sp, #12
 80a09ac:	4770      	bx	lr
 80a09ae:	bf00      	nop
 80a09b0:	080a200b 	.word	0x080a200b

080a09b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a09b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a09b6:	4606      	mov	r6, r0
 80a09b8:	460d      	mov	r5, r1
 80a09ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a09bc:	2400      	movs	r4, #0
  while (size--) {
 80a09be:	42bd      	cmp	r5, r7
 80a09c0:	d00c      	beq.n	80a09dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a09c2:	6833      	ldr	r3, [r6, #0]
 80a09c4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a09c8:	689b      	ldr	r3, [r3, #8]
 80a09ca:	4630      	mov	r0, r6
 80a09cc:	4798      	blx	r3
     if (chunk>=0)
 80a09ce:	2800      	cmp	r0, #0
 80a09d0:	db01      	blt.n	80a09d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a09d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a09d4:	e7f3      	b.n	80a09be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a09d6:	2c00      	cmp	r4, #0
 80a09d8:	bf08      	it	eq
 80a09da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a09dc:	4620      	mov	r0, r4
 80a09de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a09e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a09e0:	b570      	push	{r4, r5, r6, lr}
 80a09e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a09e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a09e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a09e8:	b149      	cbz	r1, 80a09fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a09ea:	f001 f9b0 	bl	80a1d4e <strlen>
 80a09ee:	682b      	ldr	r3, [r5, #0]
 80a09f0:	4602      	mov	r2, r0
 80a09f2:	4621      	mov	r1, r4
 80a09f4:	4628      	mov	r0, r5
    }
 80a09f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a09fa:	68db      	ldr	r3, [r3, #12]
 80a09fc:	4718      	bx	r3
    }
 80a09fe:	bd70      	pop	{r4, r5, r6, pc}

080a0a00 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0a00:	6803      	ldr	r3, [r0, #0]
 80a0a02:	689b      	ldr	r3, [r3, #8]
 80a0a04:	4718      	bx	r3

080a0a06 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0a06:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0a08:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0a0a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0a0c:	f7ff fff8 	bl	80a0a00 <_ZN5Print5printEc>
  n += print('\n');
 80a0a10:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0a12:	4604      	mov	r4, r0
  n += print('\n');
 80a0a14:	4628      	mov	r0, r5
 80a0a16:	f7ff fff3 	bl	80a0a00 <_ZN5Print5printEc>
  return n;
}
 80a0a1a:	4420      	add	r0, r4
 80a0a1c:	bd38      	pop	{r3, r4, r5, pc}

080a0a1e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0a1e:	b538      	push	{r3, r4, r5, lr}
 80a0a20:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0a22:	f7ff ffdd 	bl	80a09e0 <_ZN5Print5writeEPKc>
 80a0a26:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0a28:	4628      	mov	r0, r5
 80a0a2a:	f7ff ffec 	bl	80a0a06 <_ZN5Print7printlnEv>
  return n;
}
 80a0a2e:	4420      	add	r0, r4
 80a0a30:	bd38      	pop	{r3, r4, r5, pc}

080a0a32 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0a32:	2a01      	cmp	r2, #1
 80a0a34:	bf98      	it	ls
 80a0a36:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0a38:	b530      	push	{r4, r5, lr}
 80a0a3a:	460b      	mov	r3, r1
 80a0a3c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0a3e:	2100      	movs	r1, #0
 80a0a40:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0a44:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0a48:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0a4c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0a50:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0a52:	2b09      	cmp	r3, #9
 80a0a54:	bf94      	ite	ls
 80a0a56:	3330      	addls	r3, #48	; 0x30
 80a0a58:	3337      	addhi	r3, #55	; 0x37
 80a0a5a:	b2db      	uxtb	r3, r3
 80a0a5c:	4621      	mov	r1, r4
 80a0a5e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0a62:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0a64:	2d00      	cmp	r5, #0
 80a0a66:	d1ef      	bne.n	80a0a48 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0a68:	f7ff ffba 	bl	80a09e0 <_ZN5Print5writeEPKc>
}
 80a0a6c:	b00b      	add	sp, #44	; 0x2c
 80a0a6e:	bd30      	pop	{r4, r5, pc}

080a0a70 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0a70:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0a72:	b922      	cbnz	r2, 80a0a7e <_ZN5Print5printEmi+0xe>
 80a0a74:	6803      	ldr	r3, [r0, #0]
 80a0a76:	b2c9      	uxtb	r1, r1
 80a0a78:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0a7a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0a7c:	4718      	bx	r3
  else return printNumber(n, base);
 80a0a7e:	b2d2      	uxtb	r2, r2
}
 80a0a80:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0a82:	f7ff bfd6 	b.w	80a0a32 <_ZN5Print11printNumberEmh>

080a0a86 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0a86:	f7ff bff3 	b.w	80a0a70 <_ZN5Print5printEmi>

080a0a8a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a0a8a:	b40c      	push	{r2, r3}
 80a0a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0a90:	b087      	sub	sp, #28
 80a0a92:	af00      	add	r7, sp, #0
 80a0a94:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a0a98:	f854 9b04 	ldr.w	r9, [r4], #4
 80a0a9c:	4605      	mov	r5, r0
 80a0a9e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a0aa0:	4623      	mov	r3, r4
 80a0aa2:	464a      	mov	r2, r9
 80a0aa4:	2114      	movs	r1, #20
 80a0aa6:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a0aa8:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a0aaa:	f7ff feb7 	bl	80a081c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a0aae:	2813      	cmp	r0, #19
 80a0ab0:	d805      	bhi.n	80a0abe <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0ab2:	1d39      	adds	r1, r7, #4
 80a0ab4:	4628      	mov	r0, r5
 80a0ab6:	f7ff ff93 	bl	80a09e0 <_ZN5Print5writeEPKc>
 80a0aba:	4604      	mov	r4, r0
 80a0abc:	e013      	b.n	80a0ae6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a0abe:	f100 0308 	add.w	r3, r0, #8
 80a0ac2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a0ac6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a0ac8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a0acc:	1c41      	adds	r1, r0, #1
 80a0ace:	4623      	mov	r3, r4
 80a0ad0:	464a      	mov	r2, r9
 80a0ad2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a0ad4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a0ad6:	f7ff fea1 	bl	80a081c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0ada:	4669      	mov	r1, sp
 80a0adc:	4628      	mov	r0, r5
 80a0ade:	f7ff ff7f 	bl	80a09e0 <_ZN5Print5writeEPKc>
 80a0ae2:	4604      	mov	r4, r0
 80a0ae4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a0ae6:	b11e      	cbz	r6, 80a0af0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a0ae8:	4628      	mov	r0, r5
 80a0aea:	f7ff ff8c 	bl	80a0a06 <_ZN5Print7printlnEv>
 80a0aee:	4404      	add	r4, r0
    return n;
}
 80a0af0:	4620      	mov	r0, r4
 80a0af2:	371c      	adds	r7, #28
 80a0af4:	46bd      	mov	sp, r7
 80a0af6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0afa:	b002      	add	sp, #8
 80a0afc:	4770      	bx	lr

080a0afe <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0afe:	2300      	movs	r3, #0
 80a0b00:	461a      	mov	r2, r3
 80a0b02:	4619      	mov	r1, r3
 80a0b04:	6840      	ldr	r0, [r0, #4]
 80a0b06:	f7ff be11 	b.w	80a072c <network_on>

080a0b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0b0a:	680b      	ldr	r3, [r1, #0]
 80a0b0c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0b0e:	b113      	cbz	r3, 80a0b16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0b10:	685a      	ldr	r2, [r3, #4]
 80a0b12:	3201      	adds	r2, #1
 80a0b14:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0b16:	4770      	bx	lr

080a0b18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b18:	4a01      	ldr	r2, [pc, #4]	; (80a0b20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b1c:	601a      	str	r2, [r3, #0]
 80a0b1e:	4770      	bx	lr
 80a0b20:	080a1fda 	.word	0x080a1fda
 80a0b24:	200000bc 	.word	0x200000bc

080a0b28 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a0b28:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a0b2a:	2000      	movs	r0, #0
 80a0b2c:	f7ff fe4e 	bl	80a07cc <spark_sync_time_pending>
 80a0b30:	b128      	cbz	r0, 80a0b3e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0b32:	f7ff fe33 	bl	80a079c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a0b36:	f080 0001 	eor.w	r0, r0, #1
 80a0b3a:	b2c0      	uxtb	r0, r0
 80a0b3c:	bd08      	pop	{r3, pc}
 80a0b3e:	2001      	movs	r0, #1
    }
 80a0b40:	bd08      	pop	{r3, pc}

080a0b42 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a0b42:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a0b44:	2000      	movs	r0, #0
 80a0b46:	f7ff fccb 	bl	80a04e0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a0b4a:	4604      	mov	r4, r0
 80a0b4c:	b968      	cbnz	r0, 80a0b6a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a0b4e:	f7ff fd91 	bl	80a0674 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a0b52:	2801      	cmp	r0, #1
 80a0b54:	d10b      	bne.n	80a0b6e <_ZN9TimeClass7isValidEv+0x2c>
 80a0b56:	4620      	mov	r0, r4
 80a0b58:	f7ff fdac 	bl	80a06b4 <system_thread_get_state>
 80a0b5c:	b938      	cbnz	r0, 80a0b6e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a0b5e:	f7ff ffe3 	bl	80a0b28 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0b62:	b930      	cbnz	r0, 80a0b72 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a0b64:	f7ff fe12 	bl	80a078c <spark_process>
 80a0b68:	e7f9      	b.n	80a0b5e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a0b6a:	2001      	movs	r0, #1
 80a0b6c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a0b6e:	2000      	movs	r0, #0
 80a0b70:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a0b72:	f7ff ffd9 	bl	80a0b28 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a0b76:	2000      	movs	r0, #0
 80a0b78:	f7ff fcb2 	bl	80a04e0 <HAL_RTC_Time_Is_Valid>
 80a0b7c:	3000      	adds	r0, #0
 80a0b7e:	bf18      	it	ne
 80a0b80:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a0b82:	bd10      	pop	{r4, pc}

080a0b84 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a0b84:	b508      	push	{r3, lr}
    (void)isValid();
 80a0b86:	f7ff ffdc 	bl	80a0b42 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a0b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a0b8e:	f7ff bc9f 	b.w	80a04d0 <HAL_RTC_Get_UnixTime>
	...

080a0b94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b94:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b96:	681a      	ldr	r2, [r3, #0]
 80a0b98:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b9a:	601a      	str	r2, [r3, #0]
 80a0b9c:	4770      	bx	lr
 80a0b9e:	bf00      	nop
 80a0ba0:	2000001c 	.word	0x2000001c
 80a0ba4:	200000c0 	.word	0x200000c0

080a0ba8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0ba8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0baa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0bac:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0bae:	b113      	cbz	r3, 80a0bb6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0bb0:	2203      	movs	r2, #3
 80a0bb2:	4601      	mov	r1, r0
 80a0bb4:	4798      	blx	r3
    }
 80a0bb6:	4620      	mov	r0, r4
 80a0bb8:	bd10      	pop	{r4, pc}

080a0bba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0bba:	b510      	push	{r4, lr}
 80a0bbc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0bbe:	f7ff fff3 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>
 80a0bc2:	4620      	mov	r0, r4
 80a0bc4:	bd10      	pop	{r4, pc}

080a0bc6 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0bc6:	b513      	push	{r0, r1, r4, lr}
 80a0bc8:	460b      	mov	r3, r1
 80a0bca:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bcc:	c803      	ldmia	r0, {r0, r1}
 80a0bce:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0bd6:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bda:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0bde:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0be2:	b002      	add	sp, #8
 80a0be4:	bd10      	pop	{r4, pc}
	...

080a0be8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0be8:	4803      	ldr	r0, [pc, #12]	; (80a0bf8 <_GLOBAL__sub_I_RGB+0x10>)
 80a0bea:	2300      	movs	r3, #0
 80a0bec:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0bee:	4a03      	ldr	r2, [pc, #12]	; (80a0bfc <_GLOBAL__sub_I_RGB+0x14>)
 80a0bf0:	4903      	ldr	r1, [pc, #12]	; (80a0c00 <_GLOBAL__sub_I_RGB+0x18>)
 80a0bf2:	f000 bef1 	b.w	80a19d8 <__aeabi_atexit>
 80a0bf6:	bf00      	nop
 80a0bf8:	200000c4 	.word	0x200000c4
 80a0bfc:	20000088 	.word	0x20000088
 80a0c00:	080a0bbb 	.word	0x080a0bbb

080a0c04 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0c04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0c06:	4b14      	ldr	r3, [pc, #80]	; (80a0c58 <serialEventRun+0x54>)
 80a0c08:	b133      	cbz	r3, 80a0c18 <serialEventRun+0x14>
 80a0c0a:	f000 fc2f 	bl	80a146c <_Z16_fetch_usbserialv>
 80a0c0e:	6803      	ldr	r3, [r0, #0]
 80a0c10:	691b      	ldr	r3, [r3, #16]
 80a0c12:	4798      	blx	r3
 80a0c14:	2800      	cmp	r0, #0
 80a0c16:	dc16      	bgt.n	80a0c46 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0c18:	4b10      	ldr	r3, [pc, #64]	; (80a0c5c <serialEventRun+0x58>)
 80a0c1a:	b133      	cbz	r3, 80a0c2a <serialEventRun+0x26>
 80a0c1c:	f000 fce4 	bl	80a15e8 <_Z22__fetch_global_Serial1v>
 80a0c20:	6803      	ldr	r3, [r0, #0]
 80a0c22:	691b      	ldr	r3, [r3, #16]
 80a0c24:	4798      	blx	r3
 80a0c26:	2800      	cmp	r0, #0
 80a0c28:	dc10      	bgt.n	80a0c4c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c2a:	4b0d      	ldr	r3, [pc, #52]	; (80a0c60 <serialEventRun+0x5c>)
 80a0c2c:	b10b      	cbz	r3, 80a0c32 <serialEventRun+0x2e>
 80a0c2e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c32:	4b0c      	ldr	r3, [pc, #48]	; (80a0c64 <serialEventRun+0x60>)
 80a0c34:	b17b      	cbz	r3, 80a0c56 <serialEventRun+0x52>
 80a0c36:	f000 fc55 	bl	80a14e4 <_Z17_fetch_usbserial1v>
 80a0c3a:	6803      	ldr	r3, [r0, #0]
 80a0c3c:	691b      	ldr	r3, [r3, #16]
 80a0c3e:	4798      	blx	r3
 80a0c40:	2800      	cmp	r0, #0
 80a0c42:	dc06      	bgt.n	80a0c52 <serialEventRun+0x4e>
 80a0c44:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0c46:	f3af 8000 	nop.w
 80a0c4a:	e7e5      	b.n	80a0c18 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0c4c:	f3af 8000 	nop.w
 80a0c50:	e7eb      	b.n	80a0c2a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0c52:	f3af 8000 	nop.w
 80a0c56:	bd08      	pop	{r3, pc}
	...

080a0c68 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0c68:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c6a:	f7ff ffcb 	bl	80a0c04 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c6e:	f7ff fc27 	bl	80a04c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c72:	4b01      	ldr	r3, [pc, #4]	; (80a0c78 <_post_loop+0x10>)
 80a0c74:	6018      	str	r0, [r3, #0]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	20000568 	.word	0x20000568

080a0c7c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c7c:	4802      	ldr	r0, [pc, #8]	; (80a0c88 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0c7e:	4a03      	ldr	r2, [pc, #12]	; (80a0c8c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0c80:	4903      	ldr	r1, [pc, #12]	; (80a0c90 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0c82:	1a12      	subs	r2, r2, r0
 80a0c84:	f001 b80c 	b.w	80a1ca0 <memcpy>
 80a0c88:	40024000 	.word	0x40024000
 80a0c8c:	40024004 	.word	0x40024004
 80a0c90:	080a2330 	.word	0x080a2330

080a0c94 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c94:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c96:	2300      	movs	r3, #0
 80a0c98:	9300      	str	r3, [sp, #0]
 80a0c9a:	461a      	mov	r2, r3
 80a0c9c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0ca0:	f7ff fd1a 	bl	80a06d8 <system_ctrl_set_result>
}
 80a0ca4:	b003      	add	sp, #12
 80a0ca6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0cac <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0cac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0cae:	8843      	ldrh	r3, [r0, #2]
 80a0cb0:	2b0a      	cmp	r3, #10
 80a0cb2:	d008      	beq.n	80a0cc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0cb4:	2b50      	cmp	r3, #80	; 0x50
 80a0cb6:	d109      	bne.n	80a0ccc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0cb8:	4b09      	ldr	r3, [pc, #36]	; (80a0ce0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0cba:	681b      	ldr	r3, [r3, #0]
 80a0cbc:	b13b      	cbz	r3, 80a0cce <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0cbe:	b003      	add	sp, #12
 80a0cc0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0cc4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0cc6:	f7ff ffe5 	bl	80a0c94 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0cca:	e006      	b.n	80a0cda <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0ccc:	2300      	movs	r3, #0
 80a0cce:	9300      	str	r3, [sp, #0]
 80a0cd0:	461a      	mov	r2, r3
 80a0cd2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cd6:	f7ff fcff 	bl	80a06d8 <system_ctrl_set_result>
        break;
    }
}
 80a0cda:	b003      	add	sp, #12
 80a0cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0ce0:	200000d4 	.word	0x200000d4

080a0ce4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0ce4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0ce6:	4c10      	ldr	r4, [pc, #64]	; (80a0d28 <module_user_init_hook+0x44>)
 80a0ce8:	4d10      	ldr	r5, [pc, #64]	; (80a0d2c <module_user_init_hook+0x48>)
 80a0cea:	6823      	ldr	r3, [r4, #0]
 80a0cec:	42ab      	cmp	r3, r5
 80a0cee:	4b10      	ldr	r3, [pc, #64]	; (80a0d30 <module_user_init_hook+0x4c>)
 80a0cf0:	bf0c      	ite	eq
 80a0cf2:	2201      	moveq	r2, #1
 80a0cf4:	2200      	movne	r2, #0
 80a0cf6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0cf8:	d002      	beq.n	80a0d00 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0cfa:	f7ff ffbf 	bl	80a0c7c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0cfe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0d00:	f7ff fbd6 	bl	80a04b0 <HAL_RNG_GetRandomNumber>
 80a0d04:	4604      	mov	r4, r0
    srand(seed);
 80a0d06:	f000 ffdf 	bl	80a1cc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0d0a:	4b0a      	ldr	r3, [pc, #40]	; (80a0d34 <module_user_init_hook+0x50>)
 80a0d0c:	b113      	cbz	r3, 80a0d14 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0d0e:	4620      	mov	r0, r4
 80a0d10:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0d14:	2100      	movs	r1, #0
 80a0d16:	4807      	ldr	r0, [pc, #28]	; (80a0d34 <module_user_init_hook+0x50>)
 80a0d18:	f7ff fd60 	bl	80a07dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d20:	2100      	movs	r1, #0
 80a0d22:	4805      	ldr	r0, [pc, #20]	; (80a0d38 <module_user_init_hook+0x54>)
 80a0d24:	f7ff bcce 	b.w	80a06c4 <system_ctrl_set_app_request_handler>
 80a0d28:	40024000 	.word	0x40024000
 80a0d2c:	9a271c1e 	.word	0x9a271c1e
 80a0d30:	200000d8 	.word	0x200000d8
 80a0d34:	00000000 	.word	0x00000000
 80a0d38:	080a0cad 	.word	0x080a0cad

080a0d3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d3c:	4770      	bx	lr

080a0d3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0d3e:	2000      	movs	r0, #0
 80a0d40:	4770      	bx	lr

080a0d42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0d42:	b510      	push	{r4, lr}
 80a0d44:	4604      	mov	r4, r0
 80a0d46:	2110      	movs	r1, #16
 80a0d48:	f000 fe4b 	bl	80a19e2 <_ZdlPvj>
 80a0d4c:	4620      	mov	r0, r4
 80a0d4e:	bd10      	pop	{r4, pc}

080a0d50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0d50:	b508      	push	{r3, lr}
      { delete this; }
 80a0d52:	b108      	cbz	r0, 80a0d58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0d54:	f7ff fff5 	bl	80a0d42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0d58:	bd08      	pop	{r3, pc}

080a0d5a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0d5a:	2200      	movs	r2, #0
 80a0d5c:	6002      	str	r2, [r0, #0]
 80a0d5e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0d62:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0d64:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0d66:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0d6a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d6c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d6e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0d70:	680c      	ldr	r4, [r1, #0]
 80a0d72:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d74:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0d76:	bd10      	pop	{r4, pc}

080a0d78 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0d78:	b510      	push	{r4, lr}
 80a0d7a:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0d7c:	6800      	ldr	r0, [r0, #0]
 80a0d7e:	f7ff fd3d 	bl	80a07fc <free>
}
 80a0d82:	4620      	mov	r0, r4
 80a0d84:	bd10      	pop	{r4, pc}

080a0d86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0d86:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0d88:	68c4      	ldr	r4, [r0, #12]
 80a0d8a:	b1f4      	cbz	r4, 80a0dca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0d8c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0d8e:	2b02      	cmp	r3, #2
 80a0d90:	d103      	bne.n	80a0d9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0d92:	f104 000c 	add.w	r0, r4, #12
 80a0d96:	f7ff ffef 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0d9a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0d9c:	b135      	cbz	r5, 80a0dac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d9e:	4628      	mov	r0, r5
 80a0da0:	f7ff ff02 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>
 80a0da4:	2110      	movs	r1, #16
 80a0da6:	4628      	mov	r0, r5
 80a0da8:	f000 fe1b 	bl	80a19e2 <_ZdlPvj>
 80a0dac:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0dae:	b135      	cbz	r5, 80a0dbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0db0:	4628      	mov	r0, r5
 80a0db2:	f7ff fef9 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>
 80a0db6:	2110      	movs	r1, #16
 80a0db8:	4628      	mov	r0, r5
 80a0dba:	f000 fe12 	bl	80a19e2 <_ZdlPvj>
 80a0dbe:	4620      	mov	r0, r4
 80a0dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0dc4:	2114      	movs	r1, #20
 80a0dc6:	f000 be0c 	b.w	80a19e2 <_ZdlPvj>
 80a0dca:	bd38      	pop	{r3, r4, r5, pc}

080a0dcc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0dcc:	b513      	push	{r0, r1, r4, lr}
 80a0dce:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0dd0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0dd4:	2300      	movs	r3, #0
 80a0dd6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0dd8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0dda:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0ddc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0dde:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0de0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0de2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0de4:	f7ff fa2e 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0de8:	4620      	mov	r0, r4
 80a0dea:	b002      	add	sp, #8
 80a0dec:	bd10      	pop	{r4, pc}

080a0dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0df0:	460c      	mov	r4, r1
 80a0df2:	4606      	mov	r6, r0
 80a0df4:	460f      	mov	r7, r1
 80a0df6:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0dfa:	ad02      	add	r5, sp, #8
 80a0dfc:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0e00:	4621      	mov	r1, r4
 80a0e02:	a801      	add	r0, sp, #4
 80a0e04:	f7ff fe81 	bl	80a0b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0e08:	4629      	mov	r1, r5
 80a0e0a:	4630      	mov	r0, r6
 80a0e0c:	f7ff ffde 	bl	80a0dcc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0e10:	a801      	add	r0, sp, #4
 80a0e12:	f7ff fa17 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e16:	4620      	mov	r0, r4
 80a0e18:	f7ff fa14 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0e1c:	4638      	mov	r0, r7
 80a0e1e:	2108      	movs	r1, #8
 80a0e20:	f000 fddf 	bl	80a19e2 <_ZdlPvj>
        return p;
    }
 80a0e24:	4630      	mov	r0, r6
 80a0e26:	b003      	add	sp, #12
 80a0e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e2c:	b538      	push	{r3, r4, r5, lr}
 80a0e2e:	2300      	movs	r3, #0
 80a0e30:	4604      	mov	r4, r0
 80a0e32:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e34:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0e36:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e38:	f7ff f92f 	bl	80a009a <_Znwj>
 80a0e3c:	b128      	cbz	r0, 80a0e4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0e3e:	2301      	movs	r3, #1
 80a0e40:	6043      	str	r3, [r0, #4]
 80a0e42:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0e44:	4b02      	ldr	r3, [pc, #8]	; (80a0e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0e46:	60c5      	str	r5, [r0, #12]
 80a0e48:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e4a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0e4c:	4620      	mov	r0, r4
 80a0e4e:	bd38      	pop	{r3, r4, r5, pc}
 80a0e50:	080a2078 	.word	0x080a2078

080a0e54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e54:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e56:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e58:	b90a      	cbnz	r2, 80a0e5e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0e5a:	f000 fdc4 	bl	80a19e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e5e:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e64:	4718      	bx	r3

080a0e66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e66:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e68:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e6a:	f100 0110 	add.w	r1, r0, #16
 80a0e6e:	f7ff fff1 	bl	80a0e54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0e72:	bd08      	pop	{r3, pc}

080a0e74 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e74:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0e76:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0e78:	b90a      	cbnz	r2, 80a0e7e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0e7a:	f000 fdb4 	bl	80a19e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e7e:	68c3      	ldr	r3, [r0, #12]
    }
 80a0e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0e84:	4718      	bx	r3

080a0e86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0e86:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0e88:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0e8a:	f100 0110 	add.w	r1, r0, #16
 80a0e8e:	f7ff fff1 	bl	80a0e74 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0e92:	bd08      	pop	{r3, pc}

080a0e94 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e94:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e96:	2300      	movs	r3, #0
 80a0e98:	6083      	str	r3, [r0, #8]
 80a0e9a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0e9c:	4604      	mov	r4, r0
 80a0e9e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0ea0:	b12b      	cbz	r3, 80a0eae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0ea2:	2202      	movs	r2, #2
 80a0ea4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0ea6:	68eb      	ldr	r3, [r5, #12]
 80a0ea8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0eaa:	68ab      	ldr	r3, [r5, #8]
 80a0eac:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0eae:	4620      	mov	r0, r4
 80a0eb0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0eb6:	b089      	sub	sp, #36	; 0x24
 80a0eb8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0eba:	4668      	mov	r0, sp
 80a0ebc:	f7ff ff4d 	bl	80a0d5a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ec0:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0ec4:	2300      	movs	r3, #0
 80a0ec6:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0eca:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a0ece:	2b00      	cmp	r3, #0
 80a0ed0:	d103      	bne.n	80a0eda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a0ed2:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a0ed6:	2900      	cmp	r1, #0
 80a0ed8:	d1f7      	bne.n	80a0eca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a0eda:	d002      	beq.n	80a0ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a0edc:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0ee0:	e063      	b.n	80a0faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0ee2:	f114 050c 	adds.w	r5, r4, #12
 80a0ee6:	d003      	beq.n	80a0ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a0ee8:	4669      	mov	r1, sp
 80a0eea:	4628      	mov	r0, r5
 80a0eec:	f7ff ff35 	bl	80a0d5a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0ef0:	f3bf 8f5f 	dmb	sy
 80a0ef4:	2301      	movs	r3, #1
 80a0ef6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0ef8:	f3bf 8f5f 	dmb	sy
 80a0efc:	f104 0308 	add.w	r3, r4, #8
 80a0f00:	2000      	movs	r0, #0
 80a0f02:	e853 6f00 	ldrex	r6, [r3]
 80a0f06:	e843 0200 	strex	r2, r0, [r3]
 80a0f0a:	2a00      	cmp	r2, #0
 80a0f0c:	d1f9      	bne.n	80a0f02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a0f0e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0f12:	2e00      	cmp	r6, #0
 80a0f14:	d049      	beq.n	80a0faa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0f16:	f7ff fbbd 	bl	80a0694 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0f1a:	b120      	cbz	r0, 80a0f26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0f1c:	4629      	mov	r1, r5
 80a0f1e:	4630      	mov	r0, r6
 80a0f20:	f7ff ff98 	bl	80a0e54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0f24:	e03a      	b.n	80a0f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0f26:	4631      	mov	r1, r6
 80a0f28:	a802      	add	r0, sp, #8
 80a0f2a:	f7ff ffb3 	bl	80a0e94 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0f2e:	68e0      	ldr	r0, [r4, #12]
 80a0f30:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0f34:	b108      	cbz	r0, 80a0f3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0f36:	f000 feef 	bl	80a1d18 <strdup>
 80a0f3a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0f3c:	2010      	movs	r0, #16
 80a0f3e:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f42:	f7ff f8aa 	bl	80a009a <_Znwj>
 80a0f46:	4605      	mov	r5, r0
 80a0f48:	b1e8      	cbz	r0, 80a0f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f4a:	2700      	movs	r7, #0
 80a0f4c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f4e:	2018      	movs	r0, #24
 80a0f50:	f7ff f8a3 	bl	80a009a <_Znwj>
 80a0f54:	4604      	mov	r4, r0
 80a0f56:	b188      	cbz	r0, 80a0f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f58:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f5a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0f5c:	a802      	add	r0, sp, #8
 80a0f5e:	f7ff fe32 	bl	80a0bc6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f62:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0f64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f66:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0f68:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0f6a:	9204      	str	r2, [sp, #16]
 80a0f6c:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0f6e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0f70:	60e3      	str	r3, [r4, #12]
 80a0f72:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0f76:	9205      	str	r2, [sp, #20]
 80a0f78:	f7ff feef 	bl	80a0d5a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f7c:	4b0d      	ldr	r3, [pc, #52]	; (80a0fb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f7e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f82:	4b0d      	ldr	r3, [pc, #52]	; (80a0fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0f84:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0f86:	a806      	add	r0, sp, #24
 80a0f88:	f7ff fef6 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0f8c:	a802      	add	r0, sp, #8
 80a0f8e:	f7ff fe0b 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f92:	2200      	movs	r2, #0
 80a0f94:	4629      	mov	r1, r5
 80a0f96:	4809      	ldr	r0, [pc, #36]	; (80a0fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0f98:	f7ff fb84 	bl	80a06a4 <application_thread_invoke>
 80a0f9c:	4630      	mov	r0, r6
 80a0f9e:	f7ff fe03 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0fa2:	2110      	movs	r1, #16
 80a0fa4:	4630      	mov	r0, r6
 80a0fa6:	f000 fd1c 	bl	80a19e2 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0faa:	4668      	mov	r0, sp
 80a0fac:	f7ff fee4 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
    }
 80a0fb0:	b009      	add	sp, #36	; 0x24
 80a0fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0fb4:	080a0e67 	.word	0x080a0e67
 80a0fb8:	080a10dd 	.word	0x080a10dd
 80a0fbc:	080a1635 	.word	0x080a1635

080a0fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fc4:	b08b      	sub	sp, #44	; 0x2c
 80a0fc6:	4606      	mov	r6, r0
 80a0fc8:	460f      	mov	r7, r1
 80a0fca:	4690      	mov	r8, r2
 80a0fcc:	4699      	mov	r9, r3
 80a0fce:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0fd2:	f7ff fbe3 	bl	80a079c <spark_cloud_flag_connected>
 80a0fd6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a0fd8:	4683      	mov	fp, r0
 80a0fda:	bb30      	cbnz	r0, 80a102a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0fdc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0fe0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0fe2:	a905      	add	r1, sp, #20
 80a0fe4:	4628      	mov	r0, r5
 80a0fe6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0fea:	f7ff feb6 	bl	80a0d5a <_ZN8particle5ErrorC1EOS0_>
 80a0fee:	2014      	movs	r0, #20
 80a0ff0:	f7ff f853 	bl	80a009a <_Znwj>
 80a0ff4:	4604      	mov	r4, r0
 80a0ff6:	b158      	cbz	r0, 80a1010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0ff8:	2302      	movs	r3, #2
 80a0ffa:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0ffc:	2301      	movs	r3, #1
 80a0ffe:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1000:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1004:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1008:	4629      	mov	r1, r5
 80a100a:	300c      	adds	r0, #12
 80a100c:	f7ff fea5 	bl	80a0d5a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1010:	4630      	mov	r0, r6
 80a1012:	4621      	mov	r1, r4
 80a1014:	f840 4b04 	str.w	r4, [r0], #4
 80a1018:	f7ff ff08 	bl	80a0e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a101c:	4628      	mov	r0, r5
 80a101e:	f7ff feab 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1022:	a805      	add	r0, sp, #20
 80a1024:	f7ff fea8 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
 80a1028:	e052      	b.n	80a10d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a102a:	2400      	movs	r4, #0
 80a102c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a102e:	2014      	movs	r0, #20
 80a1030:	606c      	str	r4, [r5, #4]
 80a1032:	60ac      	str	r4, [r5, #8]
 80a1034:	9307      	str	r3, [sp, #28]
 80a1036:	f7ff f830 	bl	80a009a <_Znwj>
 80a103a:	4601      	mov	r1, r0
 80a103c:	b118      	cbz	r0, 80a1046 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a103e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1040:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1042:	6044      	str	r4, [r0, #4]
 80a1044:	6084      	str	r4, [r0, #8]
 80a1046:	a804      	add	r0, sp, #16
 80a1048:	9103      	str	r1, [sp, #12]
 80a104a:	f7ff feef 	bl	80a0e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a104e:	4b22      	ldr	r3, [pc, #136]	; (80a10d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1050:	2008      	movs	r0, #8
 80a1052:	9308      	str	r3, [sp, #32]
 80a1054:	f7ff f821 	bl	80a009a <_Znwj>
 80a1058:	4604      	mov	r4, r0
 80a105a:	b128      	cbz	r0, 80a1068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a105c:	9b03      	ldr	r3, [sp, #12]
 80a105e:	a904      	add	r1, sp, #16
 80a1060:	f840 3b04 	str.w	r3, [r0], #4
 80a1064:	f7ff fd51 	bl	80a0b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1068:	9500      	str	r5, [sp, #0]
 80a106a:	fa5f f38a 	uxtb.w	r3, sl
 80a106e:	464a      	mov	r2, r9
 80a1070:	4641      	mov	r1, r8
 80a1072:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1074:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1076:	f7ff fb99 	bl	80a07ac <spark_send_event>
 80a107a:	b920      	cbnz	r0, 80a1086 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a107c:	9b03      	ldr	r3, [sp, #12]
 80a107e:	785b      	ldrb	r3, [r3, #1]
 80a1080:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1084:	b183      	cbz	r3, 80a10a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1086:	9b03      	ldr	r3, [sp, #12]
 80a1088:	a904      	add	r1, sp, #16
 80a108a:	a806      	add	r0, sp, #24
 80a108c:	9305      	str	r3, [sp, #20]
 80a108e:	f7ff fd3c 	bl	80a0b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1092:	a905      	add	r1, sp, #20
 80a1094:	4630      	mov	r0, r6
 80a1096:	f7ff fe99 	bl	80a0dcc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a109a:	a806      	add	r0, sp, #24
 80a109c:	f7ff f8d2 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10a0:	a804      	add	r0, sp, #16
 80a10a2:	f7ff f8cf 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10a6:	e013      	b.n	80a10d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a10a8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a10ac:	a905      	add	r1, sp, #20
 80a10ae:	a803      	add	r0, sp, #12
 80a10b0:	9205      	str	r2, [sp, #20]
 80a10b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a10b6:	f7ff fefd 	bl	80a0eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a10ba:	a805      	add	r0, sp, #20
 80a10bc:	f7ff fe5c 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a10c0:	a805      	add	r0, sp, #20
 80a10c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a10c4:	f7ff fe93 	bl	80a0dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a10c8:	a806      	add	r0, sp, #24
 80a10ca:	f7ff f8bb 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10ce:	e7da      	b.n	80a1086 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a10d0:	4630      	mov	r0, r6
 80a10d2:	b00b      	add	sp, #44	; 0x2c
 80a10d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10d8:	080a124d 	.word	0x080a124d

080a10dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10dc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a10de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10e0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a10e2:	d006      	beq.n	80a10f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a10e4:	2a03      	cmp	r2, #3
 80a10e6:	d017      	beq.n	80a1118 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a10e8:	2a01      	cmp	r2, #1
 80a10ea:	d122      	bne.n	80a1132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a10ec:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a10ee:	6003      	str	r3, [r0, #0]
	      break;
 80a10f0:	e01f      	b.n	80a1132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a10f2:	2018      	movs	r0, #24
 80a10f4:	680e      	ldr	r6, [r1, #0]
 80a10f6:	f7fe ffd0 	bl	80a009a <_Znwj>
 80a10fa:	4605      	mov	r5, r0
 80a10fc:	b150      	cbz	r0, 80a1114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a10fe:	4631      	mov	r1, r6
 80a1100:	f7ff fec8 	bl	80a0e94 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1104:	6930      	ldr	r0, [r6, #16]
 80a1106:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a110a:	b108      	cbz	r0, 80a1110 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a110c:	f000 fe04 	bl	80a1d18 <strdup>
 80a1110:	6128      	str	r0, [r5, #16]
 80a1112:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1114:	6025      	str	r5, [r4, #0]
 80a1116:	e00c      	b.n	80a1132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1118:	6804      	ldr	r4, [r0, #0]
 80a111a:	b154      	cbz	r4, 80a1132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a111c:	f104 0010 	add.w	r0, r4, #16
 80a1120:	f7ff fe2a 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1124:	4620      	mov	r0, r4
 80a1126:	f7ff fd3f 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a112a:	2118      	movs	r1, #24
 80a112c:	4620      	mov	r0, r4
 80a112e:	f000 fc58 	bl	80a19e2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1132:	2000      	movs	r0, #0
 80a1134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1136 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1136:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1138:	2300      	movs	r3, #0
 80a113a:	6083      	str	r3, [r0, #8]
 80a113c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a113e:	4604      	mov	r4, r0
 80a1140:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1142:	b12b      	cbz	r3, 80a1150 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1144:	2202      	movs	r2, #2
 80a1146:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1148:	68eb      	ldr	r3, [r5, #12]
 80a114a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a114c:	68ab      	ldr	r3, [r5, #8]
 80a114e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1150:	4620      	mov	r0, r4
 80a1152:	bd38      	pop	{r3, r4, r5, pc}

080a1154 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1154:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1156:	b570      	push	{r4, r5, r6, lr}
 80a1158:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a115a:	d006      	beq.n	80a116a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a115c:	2a03      	cmp	r2, #3
 80a115e:	d011      	beq.n	80a1184 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1160:	2a01      	cmp	r2, #1
 80a1162:	d118      	bne.n	80a1196 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1164:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1166:	6003      	str	r3, [r0, #0]
	      break;
 80a1168:	e015      	b.n	80a1196 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a116a:	2014      	movs	r0, #20
 80a116c:	680e      	ldr	r6, [r1, #0]
 80a116e:	f7fe ff94 	bl	80a009a <_Znwj>
 80a1172:	4605      	mov	r5, r0
 80a1174:	b120      	cbz	r0, 80a1180 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1176:	4631      	mov	r1, r6
 80a1178:	f7ff ffdd 	bl	80a1136 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a117c:	7c33      	ldrb	r3, [r6, #16]
 80a117e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1180:	6025      	str	r5, [r4, #0]
 80a1182:	e008      	b.n	80a1196 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1184:	6804      	ldr	r4, [r0, #0]
 80a1186:	b134      	cbz	r4, 80a1196 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1188:	4620      	mov	r0, r4
 80a118a:	f7ff fd0d 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a118e:	2114      	movs	r1, #20
 80a1190:	4620      	mov	r0, r4
 80a1192:	f000 fc26 	bl	80a19e2 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1196:	2000      	movs	r0, #0
 80a1198:	bd70      	pop	{r4, r5, r6, pc}
	...

080a119c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a119e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a11a0:	f3bf 8f5f 	dmb	sy
 80a11a4:	b087      	sub	sp, #28
 80a11a6:	2300      	movs	r3, #0
 80a11a8:	e850 6f00 	ldrex	r6, [r0]
 80a11ac:	e840 3200 	strex	r2, r3, [r0]
 80a11b0:	2a00      	cmp	r2, #0
 80a11b2:	d1f9      	bne.n	80a11a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a11b4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a11b8:	2e00      	cmp	r6, #0
 80a11ba:	d03f      	beq.n	80a123c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a11bc:	4618      	mov	r0, r3
 80a11be:	f7ff fa69 	bl	80a0694 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a11c2:	4607      	mov	r7, r0
 80a11c4:	b120      	cbz	r0, 80a11d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a11c6:	4621      	mov	r1, r4
 80a11c8:	4630      	mov	r0, r6
 80a11ca:	f7ff fe53 	bl	80a0e74 <_ZNKSt8functionIFvRKbEEclES1_>
 80a11ce:	e02e      	b.n	80a122e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a11d0:	4631      	mov	r1, r6
 80a11d2:	a801      	add	r0, sp, #4
 80a11d4:	f7ff ffaf 	bl	80a1136 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a11d8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a11da:	2010      	movs	r0, #16
 80a11dc:	f88d 3014 	strb.w	r3, [sp, #20]
 80a11e0:	f7fe ff5b 	bl	80a009a <_Znwj>
 80a11e4:	4605      	mov	r5, r0
 80a11e6:	b1d0      	cbz	r0, 80a121e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11e8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11ea:	2014      	movs	r0, #20
 80a11ec:	f7fe ff55 	bl	80a009a <_Znwj>
 80a11f0:	4604      	mov	r4, r0
 80a11f2:	b178      	cbz	r0, 80a1214 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11f4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a11f6:	4601      	mov	r1, r0
 80a11f8:	a801      	add	r0, sp, #4
 80a11fa:	f7ff fce4 	bl	80a0bc6 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11fe:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1200:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1202:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1204:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1206:	9203      	str	r2, [sp, #12]
 80a1208:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a120a:	60e3      	str	r3, [r4, #12]
 80a120c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1210:	9204      	str	r2, [sp, #16]
 80a1212:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1214:	4b0a      	ldr	r3, [pc, #40]	; (80a1240 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1216:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1218:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a121a:	4b0a      	ldr	r3, [pc, #40]	; (80a1244 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a121c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a121e:	a801      	add	r0, sp, #4
 80a1220:	f7ff fcc2 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1224:	2200      	movs	r2, #0
 80a1226:	4629      	mov	r1, r5
 80a1228:	4807      	ldr	r0, [pc, #28]	; (80a1248 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a122a:	f7ff fa3b 	bl	80a06a4 <application_thread_invoke>
 80a122e:	4630      	mov	r0, r6
 80a1230:	f7ff fcba 	bl	80a0ba8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1234:	2110      	movs	r1, #16
 80a1236:	4630      	mov	r0, r6
 80a1238:	f000 fbd3 	bl	80a19e2 <_ZdlPvj>
        }
    }
 80a123c:	b007      	add	sp, #28
 80a123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1240:	080a0e87 	.word	0x080a0e87
 80a1244:	080a1155 	.word	0x080a1155
 80a1248:	080a1635 	.word	0x080a1635

080a124c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a124c:	b530      	push	{r4, r5, lr}
 80a124e:	4604      	mov	r4, r0
 80a1250:	b085      	sub	sp, #20
 80a1252:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1254:	4668      	mov	r0, sp
 80a1256:	4611      	mov	r1, r2
 80a1258:	f7ff fdc9 	bl	80a0dee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a125c:	b17c      	cbz	r4, 80a127e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a125e:	b224      	sxth	r4, r4
 80a1260:	4628      	mov	r0, r5
 80a1262:	b10d      	cbz	r5, 80a1268 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1264:	f000 fd58 	bl	80a1d18 <strdup>
 80a1268:	9002      	str	r0, [sp, #8]
 80a126a:	a902      	add	r1, sp, #8
 80a126c:	4668      	mov	r0, sp
 80a126e:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1272:	f7ff fe1f 	bl	80a0eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1276:	a802      	add	r0, sp, #8
 80a1278:	f7ff fd7e 	bl	80a0d78 <_ZN8particle5ErrorD1Ev>
 80a127c:	e01d      	b.n	80a12ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a127e:	f04f 0201 	mov.w	r2, #1
 80a1282:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1284:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1288:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a128c:	42a3      	cmp	r3, r4
 80a128e:	d103      	bne.n	80a1298 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1290:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1294:	2900      	cmp	r1, #0
 80a1296:	d1f7      	bne.n	80a1288 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1298:	d002      	beq.n	80a12a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a129a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a129e:	e00c      	b.n	80a12ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a12a0:	f110 010c 	adds.w	r1, r0, #12
 80a12a4:	f04f 0301 	mov.w	r3, #1
 80a12a8:	bf18      	it	ne
 80a12aa:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a12ac:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a12b0:	3004      	adds	r0, #4
 80a12b2:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a12b6:	f7ff ff71 	bl	80a119c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a12ba:	a801      	add	r0, sp, #4
 80a12bc:	f7fe ffc2 	bl	80a0244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a12c0:	b005      	add	sp, #20
 80a12c2:	bd30      	pop	{r4, r5, pc}

080a12c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a12c4:	4770      	bx	lr

080a12c6 <_ZN9IPAddressD0Ev>:
 80a12c6:	b510      	push	{r4, lr}
 80a12c8:	4604      	mov	r4, r0
 80a12ca:	2118      	movs	r1, #24
 80a12cc:	f000 fb89 	bl	80a19e2 <_ZdlPvj>
 80a12d0:	4620      	mov	r0, r4
 80a12d2:	bd10      	pop	{r4, pc}

080a12d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a12d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12d6:	460f      	mov	r7, r1
 80a12d8:	f100 0608 	add.w	r6, r0, #8
 80a12dc:	1d05      	adds	r5, r0, #4
 80a12de:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a12e4:	220a      	movs	r2, #10
 80a12e6:	4638      	mov	r0, r7
 80a12e8:	f7ff fbcd 	bl	80a0a86 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12ec:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12ee:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12f0:	d007      	beq.n	80a1302 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a12f2:	2c00      	cmp	r4, #0
 80a12f4:	d0f4      	beq.n	80a12e0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a12f6:	212e      	movs	r1, #46	; 0x2e
 80a12f8:	4638      	mov	r0, r7
 80a12fa:	f7ff fb81 	bl	80a0a00 <_ZN5Print5printEc>
 80a12fe:	4404      	add	r4, r0
 80a1300:	e7ee      	b.n	80a12e0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1302:	4620      	mov	r0, r4
 80a1304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1308 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1308:	b510      	push	{r4, lr}
 80a130a:	4604      	mov	r4, r0
 80a130c:	4b04      	ldr	r3, [pc, #16]	; (80a1320 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a130e:	2211      	movs	r2, #17
 80a1310:	f840 3b04 	str.w	r3, [r0], #4
 80a1314:	2100      	movs	r1, #0
 80a1316:	f000 fcce 	bl	80a1cb6 <memset>
{
    clear();
}
 80a131a:	4620      	mov	r0, r4
 80a131c:	bd10      	pop	{r4, pc}
 80a131e:	bf00      	nop
 80a1320:	080a2094 	.word	0x080a2094

080a1324 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1324:	4603      	mov	r3, r0
 80a1326:	4a07      	ldr	r2, [pc, #28]	; (80a1344 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1328:	b510      	push	{r4, lr}
 80a132a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a132e:	f101 0210 	add.w	r2, r1, #16
 80a1332:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1336:	4291      	cmp	r1, r2
 80a1338:	f843 4b04 	str.w	r4, [r3], #4
 80a133c:	d1f9      	bne.n	80a1332 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a133e:	780a      	ldrb	r2, [r1, #0]
 80a1340:	701a      	strb	r2, [r3, #0]
}
 80a1342:	bd10      	pop	{r4, pc}
 80a1344:	080a2094 	.word	0x080a2094

080a1348 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1348:	4a02      	ldr	r2, [pc, #8]	; (80a1354 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a134a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a134c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a134e:	2204      	movs	r2, #4
 80a1350:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1352:	4770      	bx	lr
 80a1354:	080a2094 	.word	0x080a2094

080a1358 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1358:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a135a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a135e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1362:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1366:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a136a:	2304      	movs	r3, #4
 80a136c:	6041      	str	r1, [r0, #4]
 80a136e:	7503      	strb	r3, [r0, #20]
 80a1370:	bd10      	pop	{r4, pc}
	...

080a1374 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1376:	4d04      	ldr	r5, [pc, #16]	; (80a1388 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1378:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a137a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a137e:	9500      	str	r5, [sp, #0]
 80a1380:	f7ff ffea 	bl	80a1358 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1384:	b003      	add	sp, #12
 80a1386:	bd30      	pop	{r4, r5, pc}
 80a1388:	080a2094 	.word	0x080a2094

080a138c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a138c:	7441      	strb	r1, [r0, #17]
 80a138e:	4770      	bx	lr

080a1390 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1390:	4770      	bx	lr

080a1392 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1392:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1394:	2100      	movs	r1, #0
 80a1396:	7c00      	ldrb	r0, [r0, #16]
 80a1398:	f7ff f94c 	bl	80a0634 <HAL_USB_USART_Receive_Data>
}
 80a139c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13a0:	bf28      	it	cs
 80a13a2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a13a6:	bd08      	pop	{r3, pc}

080a13a8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a13a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a13aa:	2101      	movs	r1, #1
 80a13ac:	7c00      	ldrb	r0, [r0, #16]
 80a13ae:	f7ff f941 	bl	80a0634 <HAL_USB_USART_Receive_Data>
}
 80a13b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a13b6:	bf28      	it	cs
 80a13b8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a13bc:	bd08      	pop	{r3, pc}

080a13be <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a13be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a13c0:	7c00      	ldrb	r0, [r0, #16]
 80a13c2:	f7ff f92f 	bl	80a0624 <HAL_USB_USART_Available_Data_For_Write>
}
 80a13c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13ca:	bd08      	pop	{r3, pc}

080a13cc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a13cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a13ce:	7c00      	ldrb	r0, [r0, #16]
 80a13d0:	f7ff f920 	bl	80a0614 <HAL_USB_USART_Available_Data>
}
 80a13d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a13d8:	bd08      	pop	{r3, pc}

080a13da <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a13da:	7c00      	ldrb	r0, [r0, #16]
 80a13dc:	f7ff b93a 	b.w	80a0654 <HAL_USB_USART_Flush_Data>

080a13e0 <_ZN9USBSerialD0Ev>:
 80a13e0:	b510      	push	{r4, lr}
 80a13e2:	4604      	mov	r4, r0
 80a13e4:	2114      	movs	r1, #20
 80a13e6:	f000 fafc 	bl	80a19e2 <_ZdlPvj>
 80a13ea:	4620      	mov	r0, r4
 80a13ec:	bd10      	pop	{r4, pc}

080a13ee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13ee:	b538      	push	{r3, r4, r5, lr}
 80a13f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13f2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13f4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13f6:	f7ff f915 	bl	80a0624 <HAL_USB_USART_Available_Data_For_Write>
 80a13fa:	2800      	cmp	r0, #0
 80a13fc:	dc01      	bgt.n	80a1402 <_ZN9USBSerial5writeEh+0x14>
 80a13fe:	7c60      	ldrb	r0, [r4, #17]
 80a1400:	b128      	cbz	r0, 80a140e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1402:	4629      	mov	r1, r5
 80a1404:	7c20      	ldrb	r0, [r4, #16]
 80a1406:	f7ff f91d 	bl	80a0644 <HAL_USB_USART_Send_Data>
 80a140a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a140e:	bd38      	pop	{r3, r4, r5, pc}

080a1410 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1410:	b510      	push	{r4, lr}
 80a1412:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1414:	2300      	movs	r3, #0
 80a1416:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a141c:	60a3      	str	r3, [r4, #8]
 80a141e:	4b05      	ldr	r3, [pc, #20]	; (80a1434 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1420:	4608      	mov	r0, r1
 80a1422:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1424:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1426:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1428:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a142a:	4611      	mov	r1, r2
 80a142c:	f7ff f8e2 	bl	80a05f4 <HAL_USB_USART_Init>
}
 80a1430:	4620      	mov	r0, r4
 80a1432:	bd10      	pop	{r4, pc}
 80a1434:	080a20a8 	.word	0x080a20a8

080a1438 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1438:	2200      	movs	r2, #0
 80a143a:	7c00      	ldrb	r0, [r0, #16]
 80a143c:	f7ff b8e2 	b.w	80a0604 <HAL_USB_USART_Begin>

080a1440 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1440:	b510      	push	{r4, lr}
 80a1442:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1444:	2214      	movs	r2, #20
 80a1446:	2100      	movs	r1, #0
 80a1448:	f000 fc35 	bl	80a1cb6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a144c:	4b05      	ldr	r3, [pc, #20]	; (80a1464 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a144e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1450:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1452:	4b05      	ldr	r3, [pc, #20]	; (80a1468 <_Z19acquireSerialBufferv+0x28>)
 80a1454:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1456:	f240 1301 	movw	r3, #257	; 0x101
 80a145a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a145c:	2381      	movs	r3, #129	; 0x81
 80a145e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1460:	bd10      	pop	{r4, pc}
 80a1462:	bf00      	nop
 80a1464:	20000161 	.word	0x20000161
 80a1468:	200000e0 	.word	0x200000e0

080a146c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a146c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a146e:	4d0e      	ldr	r5, [pc, #56]	; (80a14a8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1470:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1472:	a801      	add	r0, sp, #4
 80a1474:	f7ff ffe4 	bl	80a1440 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1478:	6829      	ldr	r1, [r5, #0]
 80a147a:	f011 0401 	ands.w	r4, r1, #1
 80a147e:	d110      	bne.n	80a14a2 <_Z16_fetch_usbserialv+0x36>
 80a1480:	4628      	mov	r0, r5
 80a1482:	f7fe fe0e 	bl	80a00a2 <__cxa_guard_acquire>
 80a1486:	b160      	cbz	r0, 80a14a2 <_Z16_fetch_usbserialv+0x36>
 80a1488:	aa01      	add	r2, sp, #4
 80a148a:	4621      	mov	r1, r4
 80a148c:	4807      	ldr	r0, [pc, #28]	; (80a14ac <_Z16_fetch_usbserialv+0x40>)
 80a148e:	f7ff ffbf 	bl	80a1410 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1492:	4628      	mov	r0, r5
 80a1494:	f7fe fe0a 	bl	80a00ac <__cxa_guard_release>
 80a1498:	4a05      	ldr	r2, [pc, #20]	; (80a14b0 <_Z16_fetch_usbserialv+0x44>)
 80a149a:	4906      	ldr	r1, [pc, #24]	; (80a14b4 <_Z16_fetch_usbserialv+0x48>)
 80a149c:	4803      	ldr	r0, [pc, #12]	; (80a14ac <_Z16_fetch_usbserialv+0x40>)
 80a149e:	f000 fa9b 	bl	80a19d8 <__aeabi_atexit>
	return _usbserial;
}
 80a14a2:	4802      	ldr	r0, [pc, #8]	; (80a14ac <_Z16_fetch_usbserialv+0x40>)
 80a14a4:	b007      	add	sp, #28
 80a14a6:	bd30      	pop	{r4, r5, pc}
 80a14a8:	200000dc 	.word	0x200000dc
 80a14ac:	20000264 	.word	0x20000264
 80a14b0:	20000088 	.word	0x20000088
 80a14b4:	080a1391 	.word	0x080a1391

080a14b8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a14b8:	b510      	push	{r4, lr}
 80a14ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a14bc:	2214      	movs	r2, #20
 80a14be:	2100      	movs	r1, #0
 80a14c0:	f000 fbf9 	bl	80a1cb6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a14c4:	4b05      	ldr	r3, [pc, #20]	; (80a14dc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a14c6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a14c8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a14ca:	4b05      	ldr	r3, [pc, #20]	; (80a14e0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a14cc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a14ce:	f240 1301 	movw	r3, #257	; 0x101
 80a14d2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a14d4:	2381      	movs	r3, #129	; 0x81
 80a14d6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a14d8:	bd10      	pop	{r4, pc}
 80a14da:	bf00      	nop
 80a14dc:	20000314 	.word	0x20000314
 80a14e0:	2000027c 	.word	0x2000027c

080a14e4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a14e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14e6:	4c0e      	ldr	r4, [pc, #56]	; (80a1520 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14e8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14ea:	a801      	add	r0, sp, #4
 80a14ec:	f7ff ffe4 	bl	80a14b8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14f0:	6823      	ldr	r3, [r4, #0]
 80a14f2:	07db      	lsls	r3, r3, #31
 80a14f4:	d410      	bmi.n	80a1518 <_Z17_fetch_usbserial1v+0x34>
 80a14f6:	4620      	mov	r0, r4
 80a14f8:	f7fe fdd3 	bl	80a00a2 <__cxa_guard_acquire>
 80a14fc:	b160      	cbz	r0, 80a1518 <_Z17_fetch_usbserial1v+0x34>
 80a14fe:	aa01      	add	r2, sp, #4
 80a1500:	2101      	movs	r1, #1
 80a1502:	4808      	ldr	r0, [pc, #32]	; (80a1524 <_Z17_fetch_usbserial1v+0x40>)
 80a1504:	f7ff ff84 	bl	80a1410 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1508:	4620      	mov	r0, r4
 80a150a:	f7fe fdcf 	bl	80a00ac <__cxa_guard_release>
 80a150e:	4a06      	ldr	r2, [pc, #24]	; (80a1528 <_Z17_fetch_usbserial1v+0x44>)
 80a1510:	4906      	ldr	r1, [pc, #24]	; (80a152c <_Z17_fetch_usbserial1v+0x48>)
 80a1512:	4804      	ldr	r0, [pc, #16]	; (80a1524 <_Z17_fetch_usbserial1v+0x40>)
 80a1514:	f000 fa60 	bl	80a19d8 <__aeabi_atexit>
  return _usbserial1;
}
 80a1518:	4802      	ldr	r0, [pc, #8]	; (80a1524 <_Z17_fetch_usbserial1v+0x40>)
 80a151a:	b006      	add	sp, #24
 80a151c:	bd10      	pop	{r4, pc}
 80a151e:	bf00      	nop
 80a1520:	20000278 	.word	0x20000278
 80a1524:	20000300 	.word	0x20000300
 80a1528:	20000088 	.word	0x20000088
 80a152c:	080a1391 	.word	0x080a1391

080a1530 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1530:	4770      	bx	lr

080a1532 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1532:	7441      	strb	r1, [r0, #17]
 80a1534:	4770      	bx	lr

080a1536 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1536:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1538:	7c00      	ldrb	r0, [r0, #16]
 80a153a:	f7ff f819 	bl	80a0570 <HAL_USART_Available_Data_For_Write>
}
 80a153e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1542:	bd08      	pop	{r3, pc}

080a1544 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1544:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1546:	7c00      	ldrb	r0, [r0, #16]
 80a1548:	f7fe ffea 	bl	80a0520 <HAL_USART_Available_Data>
}
 80a154c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1550:	bd08      	pop	{r3, pc}

080a1552 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1552:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1554:	7c00      	ldrb	r0, [r0, #16]
 80a1556:	f7fe fff3 	bl	80a0540 <HAL_USART_Peek_Data>
}
 80a155a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a155e:	bf28      	it	cs
 80a1560:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1564:	bd08      	pop	{r3, pc}

080a1566 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1566:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1568:	7c00      	ldrb	r0, [r0, #16]
 80a156a:	f7fe ffe1 	bl	80a0530 <HAL_USART_Read_Data>
}
 80a156e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1572:	bf28      	it	cs
 80a1574:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1578:	bd08      	pop	{r3, pc}

080a157a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a157a:	7c00      	ldrb	r0, [r0, #16]
 80a157c:	f7fe bfe8 	b.w	80a0550 <HAL_USART_Flush_Data>

080a1580 <_ZN11USARTSerialD0Ev>:
 80a1580:	b510      	push	{r4, lr}
 80a1582:	4604      	mov	r4, r0
 80a1584:	2114      	movs	r1, #20
 80a1586:	f000 fa2c 	bl	80a19e2 <_ZdlPvj>
 80a158a:	4620      	mov	r0, r4
 80a158c:	bd10      	pop	{r4, pc}

080a158e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a158e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1590:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1592:	4604      	mov	r4, r0
 80a1594:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1596:	b925      	cbnz	r5, 80a15a2 <_ZN11USARTSerial5writeEh+0x14>
 80a1598:	7c00      	ldrb	r0, [r0, #16]
 80a159a:	f7fe ffe9 	bl	80a0570 <HAL_USART_Available_Data_For_Write>
 80a159e:	2800      	cmp	r0, #0
 80a15a0:	dd05      	ble.n	80a15ae <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a15a2:	4631      	mov	r1, r6
 80a15a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a15a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a15aa:	f7fe bfb1 	b.w	80a0510 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a15ae:	4628      	mov	r0, r5
 80a15b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a15b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a15b4:	b510      	push	{r4, lr}
 80a15b6:	4604      	mov	r4, r0
 80a15b8:	4608      	mov	r0, r1
 80a15ba:	4611      	mov	r1, r2
 80a15bc:	2200      	movs	r2, #0
 80a15be:	6062      	str	r2, [r4, #4]
 80a15c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a15c4:	60a2      	str	r2, [r4, #8]
 80a15c6:	4a05      	ldr	r2, [pc, #20]	; (80a15dc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a15c8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a15ca:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a15cc:	2201      	movs	r2, #1
 80a15ce:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a15d0:	461a      	mov	r2, r3
 80a15d2:	f7fe ff95 	bl	80a0500 <HAL_USART_Init>
}
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	bd10      	pop	{r4, pc}
 80a15da:	bf00      	nop
 80a15dc:	080a20d8 	.word	0x080a20d8

080a15e0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a15e0:	7c00      	ldrb	r0, [r0, #16]
 80a15e2:	f7fe bfbd 	b.w	80a0560 <HAL_USART_Is_Enabled>
	...

080a15e8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a15e8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a15ea:	4d0c      	ldr	r5, [pc, #48]	; (80a161c <_Z22__fetch_global_Serial1v+0x34>)
 80a15ec:	6829      	ldr	r1, [r5, #0]
 80a15ee:	f011 0401 	ands.w	r4, r1, #1
 80a15f2:	d111      	bne.n	80a1618 <_Z22__fetch_global_Serial1v+0x30>
 80a15f4:	4628      	mov	r0, r5
 80a15f6:	f7fe fd54 	bl	80a00a2 <__cxa_guard_acquire>
 80a15fa:	b168      	cbz	r0, 80a1618 <_Z22__fetch_global_Serial1v+0x30>
 80a15fc:	4a08      	ldr	r2, [pc, #32]	; (80a1620 <_Z22__fetch_global_Serial1v+0x38>)
 80a15fe:	4621      	mov	r1, r4
 80a1600:	4b08      	ldr	r3, [pc, #32]	; (80a1624 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1602:	4809      	ldr	r0, [pc, #36]	; (80a1628 <_Z22__fetch_global_Serial1v+0x40>)
 80a1604:	f7ff ffd6 	bl	80a15b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1608:	4628      	mov	r0, r5
 80a160a:	f7fe fd4f 	bl	80a00ac <__cxa_guard_release>
 80a160e:	4a07      	ldr	r2, [pc, #28]	; (80a162c <_Z22__fetch_global_Serial1v+0x44>)
 80a1610:	4907      	ldr	r1, [pc, #28]	; (80a1630 <_Z22__fetch_global_Serial1v+0x48>)
 80a1612:	4805      	ldr	r0, [pc, #20]	; (80a1628 <_Z22__fetch_global_Serial1v+0x40>)
 80a1614:	f000 f9e0 	bl	80a19d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1618:	4803      	ldr	r0, [pc, #12]	; (80a1628 <_Z22__fetch_global_Serial1v+0x40>)
 80a161a:	bd38      	pop	{r3, r4, r5, pc}
 80a161c:	200004b0 	.word	0x200004b0
 80a1620:	200004b4 	.word	0x200004b4
 80a1624:	2000042c 	.word	0x2000042c
 80a1628:	20000418 	.word	0x20000418
 80a162c:	20000088 	.word	0x20000088
 80a1630:	080a1531 	.word	0x080a1531

080a1634 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1634:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1636:	6883      	ldr	r3, [r0, #8]
 80a1638:	4604      	mov	r4, r0
 80a163a:	b90b      	cbnz	r3, 80a1640 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a163c:	f000 f9d3 	bl	80a19e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1640:	68c3      	ldr	r3, [r0, #12]
 80a1642:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1644:	68a3      	ldr	r3, [r4, #8]
 80a1646:	b11b      	cbz	r3, 80a1650 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1648:	2203      	movs	r2, #3
 80a164a:	4621      	mov	r1, r4
 80a164c:	4620      	mov	r0, r4
 80a164e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1650:	4620      	mov	r0, r4
}
 80a1652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1656:	2110      	movs	r1, #16
 80a1658:	f000 b9c3 	b.w	80a19e2 <_ZdlPvj>

080a165c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a165c:	4770      	bx	lr

080a165e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a165e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1660:	4606      	mov	r6, r0
 80a1662:	4615      	mov	r5, r2
 80a1664:	460c      	mov	r4, r1
 80a1666:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1668:	42bc      	cmp	r4, r7
 80a166a:	d006      	beq.n	80a167a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a166c:	6833      	ldr	r3, [r6, #0]
 80a166e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1672:	689b      	ldr	r3, [r3, #8]
 80a1674:	4630      	mov	r0, r6
 80a1676:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1678:	e7f6      	b.n	80a1668 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a167a:	4628      	mov	r0, r5
 80a167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a167e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a167e:	2200      	movs	r2, #0
 80a1680:	7c00      	ldrb	r0, [r0, #16]
 80a1682:	f7fe bf7d 	b.w	80a0580 <HAL_I2C_Write_Data>

080a1686 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1686:	2100      	movs	r1, #0
 80a1688:	7c00      	ldrb	r0, [r0, #16]
 80a168a:	f7fe bf81 	b.w	80a0590 <HAL_I2C_Available_Data>

080a168e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a168e:	2100      	movs	r1, #0
 80a1690:	7c00      	ldrb	r0, [r0, #16]
 80a1692:	f7fe bf85 	b.w	80a05a0 <HAL_I2C_Read_Data>

080a1696 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1696:	2100      	movs	r1, #0
 80a1698:	7c00      	ldrb	r0, [r0, #16]
 80a169a:	f7fe bf89 	b.w	80a05b0 <HAL_I2C_Peek_Data>

080a169e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a169e:	2100      	movs	r1, #0
 80a16a0:	7c00      	ldrb	r0, [r0, #16]
 80a16a2:	f7fe bf8d 	b.w	80a05c0 <HAL_I2C_Flush_Data>

080a16a6 <_ZN7TwoWireD0Ev>:
 80a16a6:	b510      	push	{r4, lr}
 80a16a8:	4604      	mov	r4, r0
 80a16aa:	2114      	movs	r1, #20
 80a16ac:	f000 f999 	bl	80a19e2 <_ZdlPvj>
 80a16b0:	4620      	mov	r0, r4
 80a16b2:	bd10      	pop	{r4, pc}

080a16b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a16b4:	b510      	push	{r4, lr}
 80a16b6:	4604      	mov	r4, r0
 80a16b8:	4608      	mov	r0, r1
 80a16ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a16be:	60a3      	str	r3, [r4, #8]
 80a16c0:	4b04      	ldr	r3, [pc, #16]	; (80a16d4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a16c2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a16c4:	7420      	strb	r0, [r4, #16]
 80a16c6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a16c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a16ca:	f7fe ff89 	bl	80a05e0 <HAL_I2C_Init>

}
 80a16ce:	4620      	mov	r0, r4
 80a16d0:	bd10      	pop	{r4, pc}
 80a16d2:	bf00      	nop
 80a16d4:	080a2108 	.word	0x080a2108

080a16d8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a16d8:	2100      	movs	r1, #0
 80a16da:	7c00      	ldrb	r0, [r0, #16]
 80a16dc:	f7fe bf78 	b.w	80a05d0 <HAL_I2C_Is_Enabled>

080a16e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a16e0:	2200      	movs	r2, #0
 80a16e2:	4611      	mov	r1, r2
 80a16e4:	6840      	ldr	r0, [r0, #4]
 80a16e6:	f7ff b819 	b.w	80a071c <network_ready>

080a16ea <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a16ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a16ec:	4616      	mov	r6, r2
 80a16ee:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a16f0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a16f2:	460f      	mov	r7, r1
 80a16f4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a16f6:	2100      	movs	r1, #0
 80a16f8:	a803      	add	r0, sp, #12
 80a16fa:	f000 fadc 	bl	80a1cb6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a16fe:	4630      	mov	r0, r6
 80a1700:	f000 fb25 	bl	80a1d4e <strlen>
 80a1704:	2500      	movs	r5, #0
 80a1706:	9500      	str	r5, [sp, #0]
 80a1708:	b281      	uxth	r1, r0
 80a170a:	687b      	ldr	r3, [r7, #4]
 80a170c:	aa03      	add	r2, sp, #12
 80a170e:	4630      	mov	r0, r6
 80a1710:	f7fe ffa8 	bl	80a0664 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1714:	b120      	cbz	r0, 80a1720 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1716:	4629      	mov	r1, r5
 80a1718:	4620      	mov	r0, r4
 80a171a:	f7ff fe15 	bl	80a1348 <_ZN9IPAddressC1Em>
 80a171e:	e003      	b.n	80a1728 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1720:	a903      	add	r1, sp, #12
 80a1722:	4620      	mov	r0, r4
 80a1724:	f7ff fdfe 	bl	80a1324 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1728:	4620      	mov	r0, r4
 80a172a:	b009      	add	sp, #36	; 0x24
 80a172c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a172e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a172e:	2200      	movs	r2, #0
 80a1730:	4611      	mov	r1, r2
 80a1732:	6840      	ldr	r0, [r0, #4]
 80a1734:	f7ff b812 	b.w	80a075c <network_listening>

080a1738 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1738:	2200      	movs	r2, #0
 80a173a:	4611      	mov	r1, r2
 80a173c:	6840      	ldr	r0, [r0, #4]
 80a173e:	f7ff b81d 	b.w	80a077c <network_get_listen_timeout>

080a1742 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1742:	2200      	movs	r2, #0
 80a1744:	6840      	ldr	r0, [r0, #4]
 80a1746:	f7ff b811 	b.w	80a076c <network_set_listen_timeout>

080a174a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a174a:	2200      	movs	r2, #0
 80a174c:	f081 0101 	eor.w	r1, r1, #1
 80a1750:	6840      	ldr	r0, [r0, #4]
 80a1752:	f7fe bffb 	b.w	80a074c <network_listen>

080a1756 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1756:	2300      	movs	r3, #0
 80a1758:	461a      	mov	r2, r3
 80a175a:	4619      	mov	r1, r3
 80a175c:	6840      	ldr	r0, [r0, #4]
 80a175e:	f7fe bfed 	b.w	80a073c <network_off>

080a1762 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1762:	2200      	movs	r2, #0
 80a1764:	4611      	mov	r1, r2
 80a1766:	6840      	ldr	r0, [r0, #4]
 80a1768:	f7fe bfc8 	b.w	80a06fc <network_connecting>

080a176c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a176c:	2200      	movs	r2, #0
 80a176e:	2102      	movs	r1, #2
 80a1770:	6840      	ldr	r0, [r0, #4]
 80a1772:	f7fe bfcb 	b.w	80a070c <network_disconnect>

080a1776 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1776:	2300      	movs	r3, #0
 80a1778:	461a      	mov	r2, r3
 80a177a:	6840      	ldr	r0, [r0, #4]
 80a177c:	f7fe bfb6 	b.w	80a06ec <network_connect>

080a1780 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1780:	4b02      	ldr	r3, [pc, #8]	; (80a178c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1782:	2204      	movs	r2, #4
 80a1784:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1786:	4a02      	ldr	r2, [pc, #8]	; (80a1790 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1788:	601a      	str	r2, [r3, #0]
 80a178a:	4770      	bx	lr
 80a178c:	20000538 	.word	0x20000538
 80a1790:	080a2130 	.word	0x080a2130

080a1794 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1794:	2300      	movs	r3, #0
 80a1796:	461a      	mov	r2, r3
 80a1798:	6840      	ldr	r0, [r0, #4]
 80a179a:	f7fe bfa7 	b.w	80a06ec <network_connect>

080a179e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a179e:	2200      	movs	r2, #0
 80a17a0:	2102      	movs	r1, #2
 80a17a2:	6840      	ldr	r0, [r0, #4]
 80a17a4:	f7fe bfb2 	b.w	80a070c <network_disconnect>

080a17a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a17a8:	2200      	movs	r2, #0
 80a17aa:	4611      	mov	r1, r2
 80a17ac:	6840      	ldr	r0, [r0, #4]
 80a17ae:	f7fe bfa5 	b.w	80a06fc <network_connecting>

080a17b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a17b2:	2200      	movs	r2, #0
 80a17b4:	4611      	mov	r1, r2
 80a17b6:	6840      	ldr	r0, [r0, #4]
 80a17b8:	f7fe bfb0 	b.w	80a071c <network_ready>

080a17bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a17bc:	2300      	movs	r3, #0
 80a17be:	461a      	mov	r2, r3
 80a17c0:	4619      	mov	r1, r3
 80a17c2:	6840      	ldr	r0, [r0, #4]
 80a17c4:	f7fe bfb2 	b.w	80a072c <network_on>

080a17c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a17c8:	2300      	movs	r3, #0
 80a17ca:	461a      	mov	r2, r3
 80a17cc:	4619      	mov	r1, r3
 80a17ce:	6840      	ldr	r0, [r0, #4]
 80a17d0:	f7fe bfb4 	b.w	80a073c <network_off>

080a17d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a17d4:	2200      	movs	r2, #0
 80a17d6:	f081 0101 	eor.w	r1, r1, #1
 80a17da:	6840      	ldr	r0, [r0, #4]
 80a17dc:	f7fe bfb6 	b.w	80a074c <network_listen>

080a17e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a17e0:	2200      	movs	r2, #0
 80a17e2:	6840      	ldr	r0, [r0, #4]
 80a17e4:	f7fe bfc2 	b.w	80a076c <network_set_listen_timeout>

080a17e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a17e8:	2200      	movs	r2, #0
 80a17ea:	4611      	mov	r1, r2
 80a17ec:	6840      	ldr	r0, [r0, #4]
 80a17ee:	f7fe bfc5 	b.w	80a077c <network_get_listen_timeout>

080a17f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a17f2:	2200      	movs	r2, #0
 80a17f4:	4611      	mov	r1, r2
 80a17f6:	6840      	ldr	r0, [r0, #4]
 80a17f8:	f7fe bfb0 	b.w	80a075c <network_listening>

080a17fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a17fc:	b570      	push	{r4, r5, r6, lr}
 80a17fe:	4616      	mov	r6, r2
 80a1800:	b08e      	sub	sp, #56	; 0x38
 80a1802:	4604      	mov	r4, r0
    IPAddress addr;
 80a1804:	a808      	add	r0, sp, #32
 80a1806:	f7ff fd7f 	bl	80a1308 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a180a:	2211      	movs	r2, #17
 80a180c:	2100      	movs	r1, #0
 80a180e:	a803      	add	r0, sp, #12
 80a1810:	f000 fa51 	bl	80a1cb6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1814:	4630      	mov	r0, r6
 80a1816:	f000 fa9a 	bl	80a1d4e <strlen>
 80a181a:	2500      	movs	r5, #0
 80a181c:	4b0a      	ldr	r3, [pc, #40]	; (80a1848 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a181e:	9500      	str	r5, [sp, #0]
 80a1820:	b281      	uxth	r1, r0
 80a1822:	685b      	ldr	r3, [r3, #4]
 80a1824:	aa03      	add	r2, sp, #12
 80a1826:	4630      	mov	r0, r6
 80a1828:	f7fe ff1c 	bl	80a0664 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a182c:	b120      	cbz	r0, 80a1838 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a182e:	4629      	mov	r1, r5
 80a1830:	4620      	mov	r0, r4
 80a1832:	f7ff fd89 	bl	80a1348 <_ZN9IPAddressC1Em>
 80a1836:	e003      	b.n	80a1840 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1838:	a903      	add	r1, sp, #12
 80a183a:	4620      	mov	r0, r4
 80a183c:	f7ff fd72 	bl	80a1324 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1840:	4620      	mov	r0, r4
 80a1842:	b00e      	add	sp, #56	; 0x38
 80a1844:	bd70      	pop	{r4, r5, r6, pc}
 80a1846:	bf00      	nop
 80a1848:	20000538 	.word	0x20000538

080a184c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a184c:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a184e:	4a03      	ldr	r2, [pc, #12]	; (80a185c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1850:	601a      	str	r2, [r3, #0]
 80a1852:	2200      	movs	r2, #0
 80a1854:	605a      	str	r2, [r3, #4]
 80a1856:	4770      	bx	lr
 80a1858:	20000540 	.word	0x20000540
 80a185c:	080a2164 	.word	0x080a2164

080a1860 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1860:	b510      	push	{r4, lr}
 80a1862:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1864:	480f      	ldr	r0, [pc, #60]	; (80a18a4 <pinAvailable+0x44>)
 80a1866:	f7ff f80d 	bl	80a0884 <_ZN8SPIClass9isEnabledEv>
 80a186a:	b128      	cbz	r0, 80a1878 <pinAvailable+0x18>
 80a186c:	f1a4 030d 	sub.w	r3, r4, #13
 80a1870:	2b02      	cmp	r3, #2
 80a1872:	d801      	bhi.n	80a1878 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1874:	2000      	movs	r0, #0
 80a1876:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1878:	f000 f88e 	bl	80a1998 <_Z19__fetch_global_Wirev>
 80a187c:	f7ff ff2c 	bl	80a16d8 <_ZN7TwoWire9isEnabledEv>
 80a1880:	b108      	cbz	r0, 80a1886 <pinAvailable+0x26>
 80a1882:	2c01      	cmp	r4, #1
 80a1884:	d9f6      	bls.n	80a1874 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1886:	f7ff feaf 	bl	80a15e8 <_Z22__fetch_global_Serial1v>
 80a188a:	f7ff fea9 	bl	80a15e0 <_ZN11USARTSerial9isEnabledEv>
 80a188e:	b118      	cbz	r0, 80a1898 <pinAvailable+0x38>
 80a1890:	f1a4 0312 	sub.w	r3, r4, #18
 80a1894:	2b01      	cmp	r3, #1
 80a1896:	d9ed      	bls.n	80a1874 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1898:	2c17      	cmp	r4, #23
 80a189a:	bf8c      	ite	hi
 80a189c:	2000      	movhi	r0, #0
 80a189e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a18a0:	bd10      	pop	{r4, pc}
 80a18a2:	bf00      	nop
 80a18a4:	20000548 	.word	0x20000548

080a18a8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18a8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a18aa:	b538      	push	{r3, r4, r5, lr}
 80a18ac:	4604      	mov	r4, r0
 80a18ae:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a18b0:	d80a      	bhi.n	80a18c8 <pinMode+0x20>
 80a18b2:	29ff      	cmp	r1, #255	; 0xff
 80a18b4:	d008      	beq.n	80a18c8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a18b6:	f7ff ffd3 	bl	80a1860 <pinAvailable>
 80a18ba:	b128      	cbz	r0, 80a18c8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a18bc:	4629      	mov	r1, r5
 80a18be:	4620      	mov	r0, r4
}
 80a18c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a18c4:	f7fe bdc4 	b.w	80a0450 <HAL_Pin_Mode>
 80a18c8:	bd38      	pop	{r3, r4, r5, pc}

080a18ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a18ca:	b538      	push	{r3, r4, r5, lr}
 80a18cc:	4604      	mov	r4, r0
 80a18ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a18d0:	f7fe fdc6 	bl	80a0460 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a18d4:	28ff      	cmp	r0, #255	; 0xff
 80a18d6:	d010      	beq.n	80a18fa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a18d8:	2806      	cmp	r0, #6
 80a18da:	d804      	bhi.n	80a18e6 <digitalWrite+0x1c>
 80a18dc:	234d      	movs	r3, #77	; 0x4d
 80a18de:	fa23 f000 	lsr.w	r0, r3, r0
 80a18e2:	07c3      	lsls	r3, r0, #31
 80a18e4:	d409      	bmi.n	80a18fa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a18e6:	4620      	mov	r0, r4
 80a18e8:	f7ff ffba 	bl	80a1860 <pinAvailable>
 80a18ec:	b128      	cbz	r0, 80a18fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a18ee:	4629      	mov	r1, r5
 80a18f0:	4620      	mov	r0, r4
}
 80a18f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a18f6:	f7fe bdbb 	b.w	80a0470 <HAL_GPIO_Write>
 80a18fa:	bd38      	pop	{r3, r4, r5, pc}

080a18fc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a18fc:	b510      	push	{r4, lr}
 80a18fe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1900:	f7fe fdae 	bl	80a0460 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1904:	3804      	subs	r0, #4
 80a1906:	b2c0      	uxtb	r0, r0
 80a1908:	2801      	cmp	r0, #1
 80a190a:	d908      	bls.n	80a191e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a190c:	4620      	mov	r0, r4
 80a190e:	f7ff ffa7 	bl	80a1860 <pinAvailable>
 80a1912:	b120      	cbz	r0, 80a191e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1914:	4620      	mov	r0, r4
}
 80a1916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a191a:	f7fe bdb1 	b.w	80a0480 <HAL_GPIO_Read>
}
 80a191e:	2000      	movs	r0, #0
 80a1920:	bd10      	pop	{r4, pc}
	...

080a1924 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1924:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1926:	4c0c      	ldr	r4, [pc, #48]	; (80a1958 <_GLOBAL__sub_I_SPI+0x34>)
 80a1928:	4e0c      	ldr	r6, [pc, #48]	; (80a195c <_GLOBAL__sub_I_SPI+0x38>)
 80a192a:	4d0d      	ldr	r5, [pc, #52]	; (80a1960 <_GLOBAL__sub_I_SPI+0x3c>)
 80a192c:	2100      	movs	r1, #0
 80a192e:	4620      	mov	r0, r4
 80a1930:	f7fe ff94 	bl	80a085c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1934:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1936:	4c0b      	ldr	r4, [pc, #44]	; (80a1964 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1938:	4632      	mov	r2, r6
 80a193a:	4629      	mov	r1, r5
 80a193c:	f000 f84c 	bl	80a19d8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1940:	2101      	movs	r1, #1
 80a1942:	4620      	mov	r0, r4
 80a1944:	f7fe ff8a 	bl	80a085c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1948:	4632      	mov	r2, r6
 80a194a:	4629      	mov	r1, r5
 80a194c:	4620      	mov	r0, r4
 80a194e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1952:	f000 b841 	b.w	80a19d8 <__aeabi_atexit>
 80a1956:	bf00      	nop
 80a1958:	20000548 	.word	0x20000548
 80a195c:	20000088 	.word	0x20000088
 80a1960:	080a084d 	.word	0x080a084d
 80a1964:	20000558 	.word	0x20000558

080a1968 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1968:	b513      	push	{r0, r1, r4, lr}
 80a196a:	4c08      	ldr	r4, [pc, #32]	; (80a198c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a196c:	2300      	movs	r3, #0
 80a196e:	461a      	mov	r2, r3
 80a1970:	4619      	mov	r1, r3
 80a1972:	9300      	str	r3, [sp, #0]
 80a1974:	4620      	mov	r0, r4
 80a1976:	f7ff fcfd 	bl	80a1374 <_ZN9IPAddressC1Ehhhh>
 80a197a:	4620      	mov	r0, r4
 80a197c:	4a04      	ldr	r2, [pc, #16]	; (80a1990 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a197e:	4905      	ldr	r1, [pc, #20]	; (80a1994 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1980:	b002      	add	sp, #8
 80a1982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1986:	f000 b827 	b.w	80a19d8 <__aeabi_atexit>
 80a198a:	bf00      	nop
 80a198c:	2000056c 	.word	0x2000056c
 80a1990:	20000088 	.word	0x20000088
 80a1994:	080a12c5 	.word	0x080a12c5

080a1998 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1998:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a199a:	4d0b      	ldr	r5, [pc, #44]	; (80a19c8 <_Z19__fetch_global_Wirev+0x30>)
 80a199c:	6829      	ldr	r1, [r5, #0]
 80a199e:	f011 0401 	ands.w	r4, r1, #1
 80a19a2:	d10f      	bne.n	80a19c4 <_Z19__fetch_global_Wirev+0x2c>
 80a19a4:	4628      	mov	r0, r5
 80a19a6:	f7fe fb7c 	bl	80a00a2 <__cxa_guard_acquire>
 80a19aa:	b158      	cbz	r0, 80a19c4 <_Z19__fetch_global_Wirev+0x2c>
 80a19ac:	4621      	mov	r1, r4
 80a19ae:	4807      	ldr	r0, [pc, #28]	; (80a19cc <_Z19__fetch_global_Wirev+0x34>)
 80a19b0:	f7ff fe80 	bl	80a16b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a19b4:	4628      	mov	r0, r5
 80a19b6:	f7fe fb79 	bl	80a00ac <__cxa_guard_release>
 80a19ba:	4a05      	ldr	r2, [pc, #20]	; (80a19d0 <_Z19__fetch_global_Wirev+0x38>)
 80a19bc:	4905      	ldr	r1, [pc, #20]	; (80a19d4 <_Z19__fetch_global_Wirev+0x3c>)
 80a19be:	4803      	ldr	r0, [pc, #12]	; (80a19cc <_Z19__fetch_global_Wirev+0x34>)
 80a19c0:	f000 f80a 	bl	80a19d8 <__aeabi_atexit>
	return wire;
}
 80a19c4:	4801      	ldr	r0, [pc, #4]	; (80a19cc <_Z19__fetch_global_Wirev+0x34>)
 80a19c6:	bd38      	pop	{r3, r4, r5, pc}
 80a19c8:	20000584 	.word	0x20000584
 80a19cc:	20000588 	.word	0x20000588
 80a19d0:	20000088 	.word	0x20000088
 80a19d4:	080a165d 	.word	0x080a165d

080a19d8 <__aeabi_atexit>:
 80a19d8:	460b      	mov	r3, r1
 80a19da:	4601      	mov	r1, r0
 80a19dc:	4618      	mov	r0, r3
 80a19de:	f000 b951 	b.w	80a1c84 <__cxa_atexit>

080a19e2 <_ZdlPvj>:
 80a19e2:	f7fe bb5c 	b.w	80a009e <_ZdlPv>

080a19e6 <_ZSt25__throw_bad_function_callv>:
 80a19e6:	b508      	push	{r3, lr}
 80a19e8:	f7fe ff20 	bl	80a082c <abort>

080a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a19ec:	4b18      	ldr	r3, [pc, #96]	; (80a1a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a19ee:	681a      	ldr	r2, [r3, #0]
 80a19f0:	07d1      	lsls	r1, r2, #31
 80a19f2:	bf5c      	itt	pl
 80a19f4:	2201      	movpl	r2, #1
 80a19f6:	601a      	strpl	r2, [r3, #0]
 80a19f8:	4b16      	ldr	r3, [pc, #88]	; (80a1a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a19fa:	681a      	ldr	r2, [r3, #0]
 80a19fc:	07d2      	lsls	r2, r2, #31
 80a19fe:	bf5c      	itt	pl
 80a1a00:	2201      	movpl	r2, #1
 80a1a02:	601a      	strpl	r2, [r3, #0]
 80a1a04:	4b14      	ldr	r3, [pc, #80]	; (80a1a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1a06:	681a      	ldr	r2, [r3, #0]
 80a1a08:	07d0      	lsls	r0, r2, #31
 80a1a0a:	bf5c      	itt	pl
 80a1a0c:	2201      	movpl	r2, #1
 80a1a0e:	601a      	strpl	r2, [r3, #0]
 80a1a10:	4b12      	ldr	r3, [pc, #72]	; (80a1a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1a12:	681a      	ldr	r2, [r3, #0]
 80a1a14:	07d1      	lsls	r1, r2, #31
 80a1a16:	bf5c      	itt	pl
 80a1a18:	2201      	movpl	r2, #1
 80a1a1a:	601a      	strpl	r2, [r3, #0]
 80a1a1c:	4b10      	ldr	r3, [pc, #64]	; (80a1a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a1e:	681a      	ldr	r2, [r3, #0]
 80a1a20:	07d2      	lsls	r2, r2, #31
 80a1a22:	bf5c      	itt	pl
 80a1a24:	2201      	movpl	r2, #1
 80a1a26:	601a      	strpl	r2, [r3, #0]
 80a1a28:	4b0e      	ldr	r3, [pc, #56]	; (80a1a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a2a:	681a      	ldr	r2, [r3, #0]
 80a1a2c:	07d0      	lsls	r0, r2, #31
 80a1a2e:	bf5c      	itt	pl
 80a1a30:	2201      	movpl	r2, #1
 80a1a32:	601a      	strpl	r2, [r3, #0]
 80a1a34:	4b0c      	ldr	r3, [pc, #48]	; (80a1a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a36:	681a      	ldr	r2, [r3, #0]
 80a1a38:	07d1      	lsls	r1, r2, #31
 80a1a3a:	bf5c      	itt	pl
 80a1a3c:	2201      	movpl	r2, #1
 80a1a3e:	601a      	strpl	r2, [r3, #0]
 80a1a40:	4b0a      	ldr	r3, [pc, #40]	; (80a1a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a42:	681a      	ldr	r2, [r3, #0]
 80a1a44:	07d2      	lsls	r2, r2, #31
 80a1a46:	bf5c      	itt	pl
 80a1a48:	2201      	movpl	r2, #1
 80a1a4a:	601a      	strpl	r2, [r3, #0]
 80a1a4c:	4770      	bx	lr
 80a1a4e:	bf00      	nop
 80a1a50:	200005b8 	.word	0x200005b8
 80a1a54:	200005b4 	.word	0x200005b4
 80a1a58:	200005b0 	.word	0x200005b0
 80a1a5c:	200005ac 	.word	0x200005ac
 80a1a60:	200005a8 	.word	0x200005a8
 80a1a64:	200005a4 	.word	0x200005a4
 80a1a68:	200005a0 	.word	0x200005a0
 80a1a6c:	2000059c 	.word	0x2000059c

080a1a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1a70:	4b24      	ldr	r3, [pc, #144]	; (80a1b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1a72:	681a      	ldr	r2, [r3, #0]
 80a1a74:	07d0      	lsls	r0, r2, #31
 80a1a76:	bf5c      	itt	pl
 80a1a78:	2201      	movpl	r2, #1
 80a1a7a:	601a      	strpl	r2, [r3, #0]
 80a1a7c:	4b22      	ldr	r3, [pc, #136]	; (80a1b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1a7e:	681a      	ldr	r2, [r3, #0]
 80a1a80:	07d1      	lsls	r1, r2, #31
 80a1a82:	bf5c      	itt	pl
 80a1a84:	2201      	movpl	r2, #1
 80a1a86:	601a      	strpl	r2, [r3, #0]
 80a1a88:	4b20      	ldr	r3, [pc, #128]	; (80a1b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1a8a:	681a      	ldr	r2, [r3, #0]
 80a1a8c:	07d2      	lsls	r2, r2, #31
 80a1a8e:	bf5c      	itt	pl
 80a1a90:	2201      	movpl	r2, #1
 80a1a92:	601a      	strpl	r2, [r3, #0]
 80a1a94:	4b1e      	ldr	r3, [pc, #120]	; (80a1b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1a96:	681a      	ldr	r2, [r3, #0]
 80a1a98:	07d0      	lsls	r0, r2, #31
 80a1a9a:	bf5c      	itt	pl
 80a1a9c:	2201      	movpl	r2, #1
 80a1a9e:	601a      	strpl	r2, [r3, #0]
 80a1aa0:	4b1c      	ldr	r3, [pc, #112]	; (80a1b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1aa2:	681a      	ldr	r2, [r3, #0]
 80a1aa4:	07d1      	lsls	r1, r2, #31
 80a1aa6:	bf5c      	itt	pl
 80a1aa8:	2201      	movpl	r2, #1
 80a1aaa:	601a      	strpl	r2, [r3, #0]
 80a1aac:	4b1a      	ldr	r3, [pc, #104]	; (80a1b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1aae:	681a      	ldr	r2, [r3, #0]
 80a1ab0:	07d2      	lsls	r2, r2, #31
 80a1ab2:	bf5c      	itt	pl
 80a1ab4:	2201      	movpl	r2, #1
 80a1ab6:	601a      	strpl	r2, [r3, #0]
 80a1ab8:	4b18      	ldr	r3, [pc, #96]	; (80a1b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1aba:	681a      	ldr	r2, [r3, #0]
 80a1abc:	07d0      	lsls	r0, r2, #31
 80a1abe:	bf5c      	itt	pl
 80a1ac0:	2201      	movpl	r2, #1
 80a1ac2:	601a      	strpl	r2, [r3, #0]
 80a1ac4:	4b16      	ldr	r3, [pc, #88]	; (80a1b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1ac6:	681a      	ldr	r2, [r3, #0]
 80a1ac8:	07d1      	lsls	r1, r2, #31
 80a1aca:	bf5c      	itt	pl
 80a1acc:	2201      	movpl	r2, #1
 80a1ace:	601a      	strpl	r2, [r3, #0]
 80a1ad0:	4b14      	ldr	r3, [pc, #80]	; (80a1b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1ad2:	681a      	ldr	r2, [r3, #0]
 80a1ad4:	07d2      	lsls	r2, r2, #31
 80a1ad6:	bf5c      	itt	pl
 80a1ad8:	2201      	movpl	r2, #1
 80a1ada:	601a      	strpl	r2, [r3, #0]
 80a1adc:	4b12      	ldr	r3, [pc, #72]	; (80a1b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1ade:	681a      	ldr	r2, [r3, #0]
 80a1ae0:	07d0      	lsls	r0, r2, #31
 80a1ae2:	bf5c      	itt	pl
 80a1ae4:	2201      	movpl	r2, #1
 80a1ae6:	601a      	strpl	r2, [r3, #0]
 80a1ae8:	4b10      	ldr	r3, [pc, #64]	; (80a1b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1aea:	681a      	ldr	r2, [r3, #0]
 80a1aec:	07d1      	lsls	r1, r2, #31
 80a1aee:	bf5c      	itt	pl
 80a1af0:	2201      	movpl	r2, #1
 80a1af2:	601a      	strpl	r2, [r3, #0]
 80a1af4:	4b0e      	ldr	r3, [pc, #56]	; (80a1b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1af6:	681a      	ldr	r2, [r3, #0]
 80a1af8:	07d2      	lsls	r2, r2, #31
 80a1afa:	bf5c      	itt	pl
 80a1afc:	2201      	movpl	r2, #1
 80a1afe:	601a      	strpl	r2, [r3, #0]
 80a1b00:	4770      	bx	lr
 80a1b02:	bf00      	nop
 80a1b04:	200005e8 	.word	0x200005e8
 80a1b08:	200005e4 	.word	0x200005e4
 80a1b0c:	200005e0 	.word	0x200005e0
 80a1b10:	200005dc 	.word	0x200005dc
 80a1b14:	200005d8 	.word	0x200005d8
 80a1b18:	200005d4 	.word	0x200005d4
 80a1b1c:	200005d0 	.word	0x200005d0
 80a1b20:	200005cc 	.word	0x200005cc
 80a1b24:	200005c8 	.word	0x200005c8
 80a1b28:	200005c4 	.word	0x200005c4
 80a1b2c:	200005c0 	.word	0x200005c0
 80a1b30:	200005bc 	.word	0x200005bc

080a1b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1b34:	4b24      	ldr	r3, [pc, #144]	; (80a1bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1b36:	681a      	ldr	r2, [r3, #0]
 80a1b38:	07d0      	lsls	r0, r2, #31
 80a1b3a:	bf5c      	itt	pl
 80a1b3c:	2201      	movpl	r2, #1
 80a1b3e:	601a      	strpl	r2, [r3, #0]
 80a1b40:	4b22      	ldr	r3, [pc, #136]	; (80a1bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1b42:	681a      	ldr	r2, [r3, #0]
 80a1b44:	07d1      	lsls	r1, r2, #31
 80a1b46:	bf5c      	itt	pl
 80a1b48:	2201      	movpl	r2, #1
 80a1b4a:	601a      	strpl	r2, [r3, #0]
 80a1b4c:	4b20      	ldr	r3, [pc, #128]	; (80a1bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1b4e:	681a      	ldr	r2, [r3, #0]
 80a1b50:	07d2      	lsls	r2, r2, #31
 80a1b52:	bf5c      	itt	pl
 80a1b54:	2201      	movpl	r2, #1
 80a1b56:	601a      	strpl	r2, [r3, #0]
 80a1b58:	4b1e      	ldr	r3, [pc, #120]	; (80a1bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1b5a:	681a      	ldr	r2, [r3, #0]
 80a1b5c:	07d0      	lsls	r0, r2, #31
 80a1b5e:	bf5c      	itt	pl
 80a1b60:	2201      	movpl	r2, #1
 80a1b62:	601a      	strpl	r2, [r3, #0]
 80a1b64:	4b1c      	ldr	r3, [pc, #112]	; (80a1bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1b66:	681a      	ldr	r2, [r3, #0]
 80a1b68:	07d1      	lsls	r1, r2, #31
 80a1b6a:	bf5c      	itt	pl
 80a1b6c:	2201      	movpl	r2, #1
 80a1b6e:	601a      	strpl	r2, [r3, #0]
 80a1b70:	4b1a      	ldr	r3, [pc, #104]	; (80a1bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1b72:	681a      	ldr	r2, [r3, #0]
 80a1b74:	07d2      	lsls	r2, r2, #31
 80a1b76:	bf5c      	itt	pl
 80a1b78:	2201      	movpl	r2, #1
 80a1b7a:	601a      	strpl	r2, [r3, #0]
 80a1b7c:	4b18      	ldr	r3, [pc, #96]	; (80a1be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1b7e:	681a      	ldr	r2, [r3, #0]
 80a1b80:	07d0      	lsls	r0, r2, #31
 80a1b82:	bf5c      	itt	pl
 80a1b84:	2201      	movpl	r2, #1
 80a1b86:	601a      	strpl	r2, [r3, #0]
 80a1b88:	4b16      	ldr	r3, [pc, #88]	; (80a1be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1b8a:	681a      	ldr	r2, [r3, #0]
 80a1b8c:	07d1      	lsls	r1, r2, #31
 80a1b8e:	bf5c      	itt	pl
 80a1b90:	2201      	movpl	r2, #1
 80a1b92:	601a      	strpl	r2, [r3, #0]
 80a1b94:	4b14      	ldr	r3, [pc, #80]	; (80a1be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1b96:	681a      	ldr	r2, [r3, #0]
 80a1b98:	07d2      	lsls	r2, r2, #31
 80a1b9a:	bf5c      	itt	pl
 80a1b9c:	2201      	movpl	r2, #1
 80a1b9e:	601a      	strpl	r2, [r3, #0]
 80a1ba0:	4b12      	ldr	r3, [pc, #72]	; (80a1bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1ba2:	681a      	ldr	r2, [r3, #0]
 80a1ba4:	07d0      	lsls	r0, r2, #31
 80a1ba6:	bf5c      	itt	pl
 80a1ba8:	2201      	movpl	r2, #1
 80a1baa:	601a      	strpl	r2, [r3, #0]
 80a1bac:	4b10      	ldr	r3, [pc, #64]	; (80a1bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1bae:	681a      	ldr	r2, [r3, #0]
 80a1bb0:	07d1      	lsls	r1, r2, #31
 80a1bb2:	bf5c      	itt	pl
 80a1bb4:	2201      	movpl	r2, #1
 80a1bb6:	601a      	strpl	r2, [r3, #0]
 80a1bb8:	4b0e      	ldr	r3, [pc, #56]	; (80a1bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1bba:	681a      	ldr	r2, [r3, #0]
 80a1bbc:	07d2      	lsls	r2, r2, #31
 80a1bbe:	bf5c      	itt	pl
 80a1bc0:	2201      	movpl	r2, #1
 80a1bc2:	601a      	strpl	r2, [r3, #0]
 80a1bc4:	4770      	bx	lr
 80a1bc6:	bf00      	nop
 80a1bc8:	20000618 	.word	0x20000618
 80a1bcc:	20000614 	.word	0x20000614
 80a1bd0:	20000610 	.word	0x20000610
 80a1bd4:	2000060c 	.word	0x2000060c
 80a1bd8:	20000608 	.word	0x20000608
 80a1bdc:	20000604 	.word	0x20000604
 80a1be0:	20000600 	.word	0x20000600
 80a1be4:	200005fc 	.word	0x200005fc
 80a1be8:	200005f8 	.word	0x200005f8
 80a1bec:	200005f4 	.word	0x200005f4
 80a1bf0:	200005f0 	.word	0x200005f0
 80a1bf4:	200005ec 	.word	0x200005ec

080a1bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1bf8:	4b18      	ldr	r3, [pc, #96]	; (80a1c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1bfa:	681a      	ldr	r2, [r3, #0]
 80a1bfc:	07d1      	lsls	r1, r2, #31
 80a1bfe:	bf5c      	itt	pl
 80a1c00:	2201      	movpl	r2, #1
 80a1c02:	601a      	strpl	r2, [r3, #0]
 80a1c04:	4b16      	ldr	r3, [pc, #88]	; (80a1c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1c06:	681a      	ldr	r2, [r3, #0]
 80a1c08:	07d2      	lsls	r2, r2, #31
 80a1c0a:	bf5c      	itt	pl
 80a1c0c:	2201      	movpl	r2, #1
 80a1c0e:	601a      	strpl	r2, [r3, #0]
 80a1c10:	4b14      	ldr	r3, [pc, #80]	; (80a1c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1c12:	681a      	ldr	r2, [r3, #0]
 80a1c14:	07d0      	lsls	r0, r2, #31
 80a1c16:	bf5c      	itt	pl
 80a1c18:	2201      	movpl	r2, #1
 80a1c1a:	601a      	strpl	r2, [r3, #0]
 80a1c1c:	4b12      	ldr	r3, [pc, #72]	; (80a1c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1c1e:	681a      	ldr	r2, [r3, #0]
 80a1c20:	07d1      	lsls	r1, r2, #31
 80a1c22:	bf5c      	itt	pl
 80a1c24:	2201      	movpl	r2, #1
 80a1c26:	601a      	strpl	r2, [r3, #0]
 80a1c28:	4b10      	ldr	r3, [pc, #64]	; (80a1c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1c2a:	681a      	ldr	r2, [r3, #0]
 80a1c2c:	07d2      	lsls	r2, r2, #31
 80a1c2e:	bf5c      	itt	pl
 80a1c30:	2201      	movpl	r2, #1
 80a1c32:	601a      	strpl	r2, [r3, #0]
 80a1c34:	4b0e      	ldr	r3, [pc, #56]	; (80a1c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1c36:	681a      	ldr	r2, [r3, #0]
 80a1c38:	07d0      	lsls	r0, r2, #31
 80a1c3a:	bf5c      	itt	pl
 80a1c3c:	2201      	movpl	r2, #1
 80a1c3e:	601a      	strpl	r2, [r3, #0]
 80a1c40:	4b0c      	ldr	r3, [pc, #48]	; (80a1c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1c42:	681a      	ldr	r2, [r3, #0]
 80a1c44:	07d1      	lsls	r1, r2, #31
 80a1c46:	bf5c      	itt	pl
 80a1c48:	2201      	movpl	r2, #1
 80a1c4a:	601a      	strpl	r2, [r3, #0]
 80a1c4c:	4b0a      	ldr	r3, [pc, #40]	; (80a1c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1c4e:	681a      	ldr	r2, [r3, #0]
 80a1c50:	07d2      	lsls	r2, r2, #31
 80a1c52:	bf5c      	itt	pl
 80a1c54:	2201      	movpl	r2, #1
 80a1c56:	601a      	strpl	r2, [r3, #0]
 80a1c58:	4770      	bx	lr
 80a1c5a:	bf00      	nop
 80a1c5c:	20000638 	.word	0x20000638
 80a1c60:	20000634 	.word	0x20000634
 80a1c64:	20000630 	.word	0x20000630
 80a1c68:	2000062c 	.word	0x2000062c
 80a1c6c:	20000628 	.word	0x20000628
 80a1c70:	20000624 	.word	0x20000624
 80a1c74:	20000620 	.word	0x20000620
 80a1c78:	2000061c 	.word	0x2000061c

080a1c7c <atol>:
 80a1c7c:	220a      	movs	r2, #10
 80a1c7e:	2100      	movs	r1, #0
 80a1c80:	f000 b8f4 	b.w	80a1e6c <strtol>

080a1c84 <__cxa_atexit>:
 80a1c84:	b510      	push	{r4, lr}
 80a1c86:	4c05      	ldr	r4, [pc, #20]	; (80a1c9c <__cxa_atexit+0x18>)
 80a1c88:	4613      	mov	r3, r2
 80a1c8a:	b12c      	cbz	r4, 80a1c98 <__cxa_atexit+0x14>
 80a1c8c:	460a      	mov	r2, r1
 80a1c8e:	4601      	mov	r1, r0
 80a1c90:	2002      	movs	r0, #2
 80a1c92:	f3af 8000 	nop.w
 80a1c96:	bd10      	pop	{r4, pc}
 80a1c98:	4620      	mov	r0, r4
 80a1c9a:	bd10      	pop	{r4, pc}
 80a1c9c:	00000000 	.word	0x00000000

080a1ca0 <memcpy>:
 80a1ca0:	b510      	push	{r4, lr}
 80a1ca2:	1e43      	subs	r3, r0, #1
 80a1ca4:	440a      	add	r2, r1
 80a1ca6:	4291      	cmp	r1, r2
 80a1ca8:	d004      	beq.n	80a1cb4 <memcpy+0x14>
 80a1caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1cb2:	e7f8      	b.n	80a1ca6 <memcpy+0x6>
 80a1cb4:	bd10      	pop	{r4, pc}

080a1cb6 <memset>:
 80a1cb6:	4603      	mov	r3, r0
 80a1cb8:	4402      	add	r2, r0
 80a1cba:	4293      	cmp	r3, r2
 80a1cbc:	d002      	beq.n	80a1cc4 <memset+0xe>
 80a1cbe:	f803 1b01 	strb.w	r1, [r3], #1
 80a1cc2:	e7fa      	b.n	80a1cba <memset+0x4>
 80a1cc4:	4770      	bx	lr
	...

080a1cc8 <srand>:
 80a1cc8:	b538      	push	{r3, r4, r5, lr}
 80a1cca:	4b12      	ldr	r3, [pc, #72]	; (80a1d14 <srand+0x4c>)
 80a1ccc:	4605      	mov	r5, r0
 80a1cce:	681c      	ldr	r4, [r3, #0]
 80a1cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1cd2:	b9d3      	cbnz	r3, 80a1d0a <srand+0x42>
 80a1cd4:	2018      	movs	r0, #24
 80a1cd6:	f7fe fd89 	bl	80a07ec <malloc>
 80a1cda:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1cde:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1ce0:	8003      	strh	r3, [r0, #0]
 80a1ce2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1ce6:	8043      	strh	r3, [r0, #2]
 80a1ce8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1cec:	8083      	strh	r3, [r0, #4]
 80a1cee:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1cf2:	80c3      	strh	r3, [r0, #6]
 80a1cf4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1cf8:	8103      	strh	r3, [r0, #8]
 80a1cfa:	2305      	movs	r3, #5
 80a1cfc:	8143      	strh	r3, [r0, #10]
 80a1cfe:	230b      	movs	r3, #11
 80a1d00:	8183      	strh	r3, [r0, #12]
 80a1d02:	2201      	movs	r2, #1
 80a1d04:	2300      	movs	r3, #0
 80a1d06:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1d0c:	2200      	movs	r2, #0
 80a1d0e:	611d      	str	r5, [r3, #16]
 80a1d10:	615a      	str	r2, [r3, #20]
 80a1d12:	bd38      	pop	{r3, r4, r5, pc}
 80a1d14:	20000084 	.word	0x20000084

080a1d18 <strdup>:
 80a1d18:	4b02      	ldr	r3, [pc, #8]	; (80a1d24 <strdup+0xc>)
 80a1d1a:	4601      	mov	r1, r0
 80a1d1c:	6818      	ldr	r0, [r3, #0]
 80a1d1e:	f000 b803 	b.w	80a1d28 <_strdup_r>
 80a1d22:	bf00      	nop
 80a1d24:	20000084 	.word	0x20000084

080a1d28 <_strdup_r>:
 80a1d28:	b570      	push	{r4, r5, r6, lr}
 80a1d2a:	4606      	mov	r6, r0
 80a1d2c:	4608      	mov	r0, r1
 80a1d2e:	460c      	mov	r4, r1
 80a1d30:	f000 f80d 	bl	80a1d4e <strlen>
 80a1d34:	1c45      	adds	r5, r0, #1
 80a1d36:	4629      	mov	r1, r5
 80a1d38:	4630      	mov	r0, r6
 80a1d3a:	f7fe fd7f 	bl	80a083c <_malloc_r>
 80a1d3e:	4606      	mov	r6, r0
 80a1d40:	b118      	cbz	r0, 80a1d4a <_strdup_r+0x22>
 80a1d42:	462a      	mov	r2, r5
 80a1d44:	4621      	mov	r1, r4
 80a1d46:	f7ff ffab 	bl	80a1ca0 <memcpy>
 80a1d4a:	4630      	mov	r0, r6
 80a1d4c:	bd70      	pop	{r4, r5, r6, pc}

080a1d4e <strlen>:
 80a1d4e:	4603      	mov	r3, r0
 80a1d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1d54:	2a00      	cmp	r2, #0
 80a1d56:	d1fb      	bne.n	80a1d50 <strlen+0x2>
 80a1d58:	1a18      	subs	r0, r3, r0
 80a1d5a:	3801      	subs	r0, #1
 80a1d5c:	4770      	bx	lr
	...

080a1d60 <_strtol_r>:
 80a1d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1d64:	460f      	mov	r7, r1
 80a1d66:	4680      	mov	r8, r0
 80a1d68:	483f      	ldr	r0, [pc, #252]	; (80a1e68 <_strtol_r+0x108>)
 80a1d6a:	f8d0 9000 	ldr.w	r9, [r0]
 80a1d6e:	463d      	mov	r5, r7
 80a1d70:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1d74:	eb09 0004 	add.w	r0, r9, r4
 80a1d78:	7840      	ldrb	r0, [r0, #1]
 80a1d7a:	f000 0008 	and.w	r0, r0, #8
 80a1d7e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a1d82:	b108      	cbz	r0, 80a1d88 <_strtol_r+0x28>
 80a1d84:	462f      	mov	r7, r5
 80a1d86:	e7f2      	b.n	80a1d6e <_strtol_r+0xe>
 80a1d88:	2c2d      	cmp	r4, #45	; 0x2d
 80a1d8a:	d103      	bne.n	80a1d94 <_strtol_r+0x34>
 80a1d8c:	1cbd      	adds	r5, r7, #2
 80a1d8e:	787c      	ldrb	r4, [r7, #1]
 80a1d90:	2601      	movs	r6, #1
 80a1d92:	e003      	b.n	80a1d9c <_strtol_r+0x3c>
 80a1d94:	2c2b      	cmp	r4, #43	; 0x2b
 80a1d96:	bf04      	itt	eq
 80a1d98:	787c      	ldrbeq	r4, [r7, #1]
 80a1d9a:	1cbd      	addeq	r5, r7, #2
 80a1d9c:	b113      	cbz	r3, 80a1da4 <_strtol_r+0x44>
 80a1d9e:	2b10      	cmp	r3, #16
 80a1da0:	d10a      	bne.n	80a1db8 <_strtol_r+0x58>
 80a1da2:	e05b      	b.n	80a1e5c <_strtol_r+0xfc>
 80a1da4:	2c30      	cmp	r4, #48	; 0x30
 80a1da6:	d157      	bne.n	80a1e58 <_strtol_r+0xf8>
 80a1da8:	7828      	ldrb	r0, [r5, #0]
 80a1daa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1dae:	2858      	cmp	r0, #88	; 0x58
 80a1db0:	d14d      	bne.n	80a1e4e <_strtol_r+0xee>
 80a1db2:	786c      	ldrb	r4, [r5, #1]
 80a1db4:	2310      	movs	r3, #16
 80a1db6:	3502      	adds	r5, #2
 80a1db8:	2e00      	cmp	r6, #0
 80a1dba:	bf14      	ite	ne
 80a1dbc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a1dc0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a1dc4:	fbbc faf3 	udiv	sl, ip, r3
 80a1dc8:	2700      	movs	r7, #0
 80a1dca:	4638      	mov	r0, r7
 80a1dcc:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a1dd0:	eb09 0e04 	add.w	lr, r9, r4
 80a1dd4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a1dd8:	f01e 0f04 	tst.w	lr, #4
 80a1ddc:	d001      	beq.n	80a1de2 <_strtol_r+0x82>
 80a1dde:	3c30      	subs	r4, #48	; 0x30
 80a1de0:	e00b      	b.n	80a1dfa <_strtol_r+0x9a>
 80a1de2:	f01e 0e03 	ands.w	lr, lr, #3
 80a1de6:	d01b      	beq.n	80a1e20 <_strtol_r+0xc0>
 80a1de8:	f1be 0f01 	cmp.w	lr, #1
 80a1dec:	bf0c      	ite	eq
 80a1dee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a1df2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a1df6:	ebce 0404 	rsb	r4, lr, r4
 80a1dfa:	42a3      	cmp	r3, r4
 80a1dfc:	dd10      	ble.n	80a1e20 <_strtol_r+0xc0>
 80a1dfe:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a1e02:	d00a      	beq.n	80a1e1a <_strtol_r+0xba>
 80a1e04:	4550      	cmp	r0, sl
 80a1e06:	d806      	bhi.n	80a1e16 <_strtol_r+0xb6>
 80a1e08:	d101      	bne.n	80a1e0e <_strtol_r+0xae>
 80a1e0a:	4564      	cmp	r4, ip
 80a1e0c:	dc03      	bgt.n	80a1e16 <_strtol_r+0xb6>
 80a1e0e:	fb03 4000 	mla	r0, r3, r0, r4
 80a1e12:	2701      	movs	r7, #1
 80a1e14:	e001      	b.n	80a1e1a <_strtol_r+0xba>
 80a1e16:	f04f 37ff 	mov.w	r7, #4294967295
 80a1e1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1e1e:	e7d7      	b.n	80a1dd0 <_strtol_r+0x70>
 80a1e20:	1c7b      	adds	r3, r7, #1
 80a1e22:	d10c      	bne.n	80a1e3e <_strtol_r+0xde>
 80a1e24:	2e00      	cmp	r6, #0
 80a1e26:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a1e2a:	bf14      	ite	ne
 80a1e2c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a1e30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1e34:	f8c8 3000 	str.w	r3, [r8]
 80a1e38:	b92a      	cbnz	r2, 80a1e46 <_strtol_r+0xe6>
 80a1e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1e3e:	b106      	cbz	r6, 80a1e42 <_strtol_r+0xe2>
 80a1e40:	4240      	negs	r0, r0
 80a1e42:	b172      	cbz	r2, 80a1e62 <_strtol_r+0x102>
 80a1e44:	b107      	cbz	r7, 80a1e48 <_strtol_r+0xe8>
 80a1e46:	1e69      	subs	r1, r5, #1
 80a1e48:	6011      	str	r1, [r2, #0]
 80a1e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1e4e:	2430      	movs	r4, #48	; 0x30
 80a1e50:	2b00      	cmp	r3, #0
 80a1e52:	d1b1      	bne.n	80a1db8 <_strtol_r+0x58>
 80a1e54:	2308      	movs	r3, #8
 80a1e56:	e7af      	b.n	80a1db8 <_strtol_r+0x58>
 80a1e58:	230a      	movs	r3, #10
 80a1e5a:	e7ad      	b.n	80a1db8 <_strtol_r+0x58>
 80a1e5c:	2c30      	cmp	r4, #48	; 0x30
 80a1e5e:	d0a3      	beq.n	80a1da8 <_strtol_r+0x48>
 80a1e60:	e7aa      	b.n	80a1db8 <_strtol_r+0x58>
 80a1e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1e66:	bf00      	nop
 80a1e68:	20000020 	.word	0x20000020

080a1e6c <strtol>:
 80a1e6c:	4613      	mov	r3, r2
 80a1e6e:	460a      	mov	r2, r1
 80a1e70:	4601      	mov	r1, r0
 80a1e72:	4802      	ldr	r0, [pc, #8]	; (80a1e7c <strtol+0x10>)
 80a1e74:	6800      	ldr	r0, [r0, #0]
 80a1e76:	f7ff bf73 	b.w	80a1d60 <_strtol_r>
 80a1e7a:	bf00      	nop
 80a1e7c:	20000084 	.word	0x20000084

080a1e80 <dynalib_user>:
 80a1e80:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a1e90:	00000000 73726150 43206465 6e656461     ....Parsed Caden
 80a1ea0:	203a6563 68006425 2d6b6f6f 70736572     ce: %d.hook-resp
 80a1eb0:	65736e6f 7465672f 65646143 0065636e     onse/getCadence.
 80a1ec0:	6b6f6f68 7365722d 736e6f70 74732f65     hook-response/st
 80a1ed0:	52747261 00656469 7563227b 6e657272     artRide.{"curren
 80a1ee0:	6d695474 253a2265 22202c64 6f727473     tTime":%d, "stro
 80a1ef0:	5373656b 65636e69 7473614c 6c627550     kesSinceLastPubl
 80a1f00:	22687369 2c64253a 69722220 64496564     ish":%d, "rideId
 80a1f10:	25203a22 61007d64 65526464 6e696461     ": %d}.addReadin
 80a1f20:	74530067 20747261 74747542 50206e6f     g.Start Button P
 80a1f30:	73736572 53006465 20706f74 74747542     ressed.Stop Butt
 80a1f40:	50206e6f 73736572 73006465 52706f74     on Pressed.stopR
 80a1f50:	00656469                                ide.

080a1f54 <_ZTV8SPIClass>:
	...
 80a1f5c:	080a084d 080a084f 64756162 72655300     M...O...baud.Ser
 80a1f6c:	006c6169 53425355 61697265 7400316c     ial.USBSerial1.t
 80a1f7c:	00657079 61726170 6d63006d 64690064     ype.param.cmd.id
 80a1f8c:	646e6800 72747300 6966006d 6c00746c     .hnd.strm.filt.l
 80a1f9c:	61006c76 61486464 656c646e 65720072     vl.addHandler.re
 80a1fac:	65766f6d 646e6148 0072656c 6d756e65     moveHandler.enum
 80a1fbc:	646e6148 7372656c 4f534a00 7274534e     Handlers.JSONStr
 80a1fcc:	4c6d6165 6148676f 656c646e 70610072     eamLogHandler.ap
 80a1fdc:	30250070 20753031 00205d00 2800202c     p.%010u .] ., .(
 80a1fec:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
 80a1ffc:	65640069 6c696174 203d2073 000a0d00     i.details = ....
 80a200c:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
 80a201c:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
 80a202c:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
 80a203c:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
 80a204c:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
 80a205c:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
 80a206c:	00000065                                e...

080a2070 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2078:	080a0d3d 080a0d43 080a0d87 080a0d51     =...C.......Q...
 80a2088:	080a0d3f                                ?...

080a208c <_ZTV9IPAddress>:
	...
 80a2094:	080a12d5 080a12c5 080a12c7              ............

080a20a0 <_ZTV9USBSerial>:
	...
 80a20a8:	080a1391 080a13e1 080a13ef 080a09b5     ................
 80a20b8:	080a13cd 080a1393 080a13a9 080a13db     ................
 80a20c8:	080a13bf 080a138d                       ........

080a20d0 <_ZTV11USARTSerial>:
	...
 80a20d8:	080a1531 080a1581 080a158f 080a09b5     1...............
 80a20e8:	080a1545 080a1567 080a1553 080a157b     E...g...S...{...
 80a20f8:	080a1533 080a1537                       3...7...

080a2100 <_ZTV7TwoWire>:
	...
 80a2108:	080a165d 080a16a7 080a167f 080a165f     ]..........._...
 80a2118:	080a1687 080a168f 080a1697 080a169f     ................

080a2128 <_ZTVN5spark9WiFiClassE>:
	...
 80a2130:	080a1777 080a176d 080a1763 080a16e1     w...m...c.......
 80a2140:	080a0aff 080a1757 080a174b 080a1743     ....W...K...C...
 80a2150:	080a1739 080a172f 080a16eb              9.../.......

080a215c <_ZTVN5spark12NetworkClassE>:
	...
 80a2164:	080a1795 080a179f 080a17a9 080a17b3     ................
 80a2174:	080a17bd 080a17c9 080a17d5 080a17e1     ................
 80a2184:	080a17e9 080a17f3 080a17fd              ............

080a2190 <_ctype_>:
 80a2190:	20202000 20202020 28282020 20282828     .         ((((( 
 80a21a0:	20202020 20202020 20202020 20202020                     
 80a21b0:	10108820 10101010 10101010 10101010      ...............
 80a21c0:	04040410 04040404 10040404 10101010     ................
 80a21d0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a21e0:	01010101 01010101 01010101 10101010     ................
 80a21f0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a2200:	02020202 02020202 02020202 10101010     ................
 80a2210:	00000020 00000000 00000000 00000000      ...............
	...

080a2294 <__sf_fake_stdin>:
	...

080a22b4 <__sf_fake_stdout>:
	...

080a22d4 <__sf_fake_stderr>:
	...
 80a22f4:	00000043                                         C.

080a22f6 <link_const_variable_data_end>:
	...

080a22f8 <link_constructors_location>:
 80a22f8:	080a0429 	.word	0x080a0429
 80a22fc:	080a088d 	.word	0x080a088d
 80a2300:	080a0b19 	.word	0x080a0b19
 80a2304:	080a0b95 	.word	0x080a0b95
 80a2308:	080a0be9 	.word	0x080a0be9
 80a230c:	080a1781 	.word	0x080a1781
 80a2310:	080a184d 	.word	0x080a184d
 80a2314:	080a1925 	.word	0x080a1925
 80a2318:	080a1969 	.word	0x080a1969
 80a231c:	080a19ed 	.word	0x080a19ed
 80a2320:	080a1a71 	.word	0x080a1a71
 80a2324:	080a1b35 	.word	0x080a1b35
 80a2328:	080a1bf9 	.word	0x080a1bf9

080a232c <link_constructors_end>:
 80a232c:	00000000 	.word	0x00000000
